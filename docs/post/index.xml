<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on suzmemo</title><link>https://dddsuz2.github.io/suzmemo/post/</link><description>Recent content in Posts on suzmemo</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Mon, 21 Aug 2023 21:54:11 +0900</lastBuildDate><atom:link href="https://dddsuz2.github.io/suzmemo/post/index.xml" rel="self" type="application/rss+xml"/><item><title>【書誌】現代文解釈の基礎.md</title><link>https://dddsuz2.github.io/suzmemo/%E6%9B%B8%E8%AA%8C%E7%8F%BE%E4%BB%A3%E6%96%87%E8%A7%A3%E9%87%88%E3%81%AE%E5%9F%BA%E7%A4%8E.md/</link><pubDate>Mon, 21 Aug 2023 21:54:11 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/%E6%9B%B8%E8%AA%8C%E7%8F%BE%E4%BB%A3%E6%96%87%E8%A7%A3%E9%87%88%E3%81%AE%E5%9F%BA%E7%A4%8E.md/</guid><description>目次 ■文学的な文章 Ⅰ 解釈の基本 １ 主人公の輪郭 ―主人公はどのような人物であるか―　解釈上のポイント〈主人公の輪郭のとらえ方〉　２ 主人公をめぐる人間関係 ―お互いに相手をどのように意識しているか―　解釈上のポイント〈主人公をめぐる人間関係のとらえ方〉　３　構成を調べる―事件の中で最も大きく変化したものは何か― 解釈上のポイント〈構成の調べ方〉 ４ 全体の主題 ―全体から訴えてくるもの― 解釈上のポイント〈全体の主題のとらえ方〉 Ⅱ 登場人物について １ 人物の性格 ―登場人物の発言や行動から性格を読む― 解釈上のポイント〈人物の性格のとらえ方〉 ２ 人物の心理 ―登場人物の心理の起伏を追求する― 解釈上のポイント〈人物の心理のとらえ方〉 ３ 人物の思想 ―登場人物の思想を知る― 解釈上のポイント〈人物の思想のとらえ方〉 Ⅲ 構成・表現について １ 主題をつかむ ―「どんなことが」書かれているか― 解釈上のポイント〈主題のとらえ方〉 ２ 意図を解釈する ―「どのようなものとして」書かれているか― 解釈上のポイント〈意図のとらえ方〉 ３ 文体を解釈する ―「どのように」表現されているか― 解釈上のポイント〈文体のとらえ方〉 Ⅳ 作者について １ 発 想 ―作者が書くときにとった根本的な態度― 解釈上のポイント〈作者の発想のとらえ方〉 ２ 想像力 ―作者の想像力のはたらき― 解釈上のポイント〈作者の想像力のとらえ方〉 ３ 感 覚 ―作者の感覚のはたらき― 解釈上のポイント〈作者の感覚のとらえ方〉 〈付〉 近代・現代の詩について 解釈上のポイント〈詩の読み方 〉 ■論理的な文章 Ⅰ 解釈の基本 １ 一語一語の内容 ―難解な語を理解する― 解釈上のポイント〈一語一語の内容のとらえ方〉 ２ 一文一文の内容 ―一文一文の内容をおさえていく― 解釈上のポイント〈一文一文の内容のとらえ方〉 ３ 段落の要旨 ―段落の要旨を一つ一つおさえていく― 解釈上のポイント〈段落の要旨のとらえ方〉 ４ 全体の論旨 ―全体としてどういうことが論じられているか― 解釈上のポイント〈全体の論旨のつかみ方〉 Ⅱ 論の重点について １ 指示詞の実質内容 ―コソアドの指し示すものの内容を正しくつかむ― 解釈上のポイント〈コソアド（指示詞）の実質内容のとらえ方〉 ２ 具体的事例と抽象的見解 ―引き合いに出された実例― 解釈上のポイント〈具体的な事例と抽象的な見解のとらえ方〉 ３ 語句の照応 ―繰り返されているもの・対比されているもの― 解釈上のポイント〈語句の照応のとらえ方〉 Ⅲ 論の構成について １ 段落の設定 ―接続詞をつかまえるだけでは不十分― 解釈上のポイント〈段落の句切り方〉 ２ 判断の論拠㈠帰納を中心に ―わかりきったこととして書かれていない判断に注意― 解釈上のポイント〈判断の論拠㈠―帰納―のとらえ方〉 ３ 判断の論拠㈡演繹を中心に ―前提から結論が導き出されるときの法則を知る― 解釈上のポイント〈判断の論拠㈡―演繹―のとらえ方〉 Ⅳ 論者について １ 価値の置き方 ―論者がどういうものに価値を置こうとしているか― 解釈上のポイント〈論者の価値の置き方のとらえ方〉 ２ 考え方 ―論者の根本的な考え方を理解する― 解釈上のポイント〈論者の考え方のとらえ方〉 ３ 物の見方 ―論者の世界観・人生観を探る― 解釈上のポイント〈論者の物の見方のつかみ方〉 索 引 練習問題〈考え方〉解答 解説（読書猿）</description></item><item><title>TOEFL英単語</title><link>https://dddsuz2.github.io/suzmemo/toefl%E8%8B%B1%E5%8D%98%E8%AA%9E/</link><pubDate>Mon, 21 Aug 2023 19:24:37 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/toefl%E8%8B%B1%E5%8D%98%E8%AA%9E/</guid><description> provide v n: provision merchant n needle n fasten v mental adj object n, v produce v, n progress n, v finished adj oxygen n alive adj own v recommend v diplomacy n rainfall n rise v admirable adj v: admire structure n upstairs n, adv observatory n herbivore n exercise n lava n territory n imagine v usage n grain n syn: cereal adopt v n: adoption investment n proposal n v: propose tool n vibration n previous adj treatment n scissors n fireplace n folk n involve v poet n passenger n wage n ancestor n ant: descendant interrupt v n: interruption bank n*2 recover v n: recovery carve v exclaim v n: exclamation herb n hesitate v n: hesitancy X-ray n grass n undertake v recognize v n: recognition accomplish v fond adj tend v discussion n humid adj island n permanent adj scholar n later adj, adv fine adj carbon n decision n v: decide broad adj freeze v creative adj futhermore adv sufficient adj n: sufficiency affluent adj increase v, n cheerfully adv nearly adv water v skill n illness n vote n, v saw n indeed adv require v n: requirement describe v n: description parcel n apparent adj official adj navy n (the ~) sign v signature odor n scent n suppose v brochure n calm adj tuition n trial n countryside n (the ~) clerk n independence n past n, adj sculpture n habitat n unable adj tissue n package n aroma n resemble v n: resemblance generate v complain v compete v n: competition landscape painting n blow n, v religion n adj: religious act n instantly adv syn: immediately resist v n: resistance typical adj formal adj anti: informal equipment n excuse n, v fever n restrict v n: restriction available adj divide v n: division economic adj discover v n: discovery priest n basic adj resume v edition n v: edit traffic n distant adj prevent v occupy v n: occupation maize n syn: corn channel n victim n BCE n syn: BC voyage n honor n adj: honorable wonder v, n halt v corner n politician n democracy n brave adj gene n register v boring adj feature n major n, adj anti: minor wrap v airflow n modest adj syn: humble dangerous adj n: danger poetry n strict adj succeed v n: succession elect v ashamed adj role n insist v n: insistance declare v declaration achieve v consider v n: consideration warn v quite adv annoy v mathematics n forecast n, v publish v carnivore n adj: carnivorous useless adj anti: useful feed v summit n fortunate adj waterproof adj orbit n, v demand v, n shallow adj secure adj garment n governor n pursue v n: pursuit trap revolution n experience n, v raw adj shortly adv offend v present v, n aggressive adj tribe n faithful adj donate v n: donation sociable adj bay n realize v load n, v trust n, v secret adj, n rhythm n settle v continue v atlas n complaint n reply v, n count v real adj electronic adj fragment n, v marsh n trend n right n vary v adj: variable author n nebula n routine adj annual adj courage n algae n sin: alga emphasize v n: emphasis civic adj bright adj actual adj escape v, n growth n v: grow tragedy n anti: comedy permit v n: permission believe v n: belief union n fellow n disaster n task n coast n difference n adj: different numerous adj guess v, n biodiversity n convenient adj n: convenience safety n adj: safe efficient adj n: efficiency agriculture n grab v patient n, adj force n, v primitive adj final adj trash n awful adj division n modern adj repeat v n: repetition plant n meanwhile adv opinion n thirsty adj crime n adj: criminal stable adj, n occur v n: occurrence actress n dust n throw v connect v n: connection crop n toe n flag v, n hostage n fee committee n blood n motif n elderly adj, n store n ceremony n beehive n attitude n election n doubt n, v internal adj anti: external compare v n: comparison harbor n media n sin: medium invest v plate n Atlantic Ocean n stock n wrinkle n raise v shave v surface n spectacle n playing field n rate n commerce n adj: commercial exception n blossom n suprise n, v elementary adj performance n selfish adj</description></item><item><title>【1.3】自作の例外を定義する</title><link>https://dddsuz2.github.io/suzmemo/1.3%E8%87%AA%E4%BD%9C%E3%81%AE%E4%BE%8B%E5%A4%96%E3%82%92%E5%AE%9A%E7%BE%A9%E3%81%99%E3%82%8B/</link><pubDate>Thu, 17 Aug 2023 22:31:11 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/1.3%E8%87%AA%E4%BD%9C%E3%81%AE%E4%BE%8B%E5%A4%96%E3%82%92%E5%AE%9A%E7%BE%A9%E3%81%99%E3%82%8B/</guid><description> Exceptionから継承させた自作の例外を定義できる class MyBaseError(Exception) def __init__(self, code, msg) -&amp;gt; None: self.code = code self.msg = msg def __str__(self) -&amp;gt; str: return f&amp;#34;{self.code} {self.msg}&amp;#34; class ParameterError(MyBaseError) def __init__(self, msg: str) -&amp;gt; None: super().__init__(&amp;#34;errorCode&amp;#34;, msg) try: ... except ValueError as e: raise ParameterError(&amp;#34;ValueErrorによってエラーが出ました&amp;#34;) from e</description></item><item><title>【1.2】raise文で特定の例外を発生させる</title><link>https://dddsuz2.github.io/suzmemo/1.2raise%E6%96%87%E3%81%A7%E7%89%B9%E5%AE%9A%E3%81%AE%E4%BE%8B%E5%A4%96%E3%82%92%E7%99%BA%E7%94%9F%E3%81%95%E3%81%9B%E3%82%8B/</link><pubDate>Thu, 17 Aug 2023 22:24:22 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/1.2raise%E6%96%87%E3%81%A7%E7%89%B9%E5%AE%9A%E3%81%AE%E4%BE%8B%E5%A4%96%E3%82%92%E7%99%BA%E7%94%9F%E3%81%95%E3%81%9B%E3%82%8B/</guid><description> raiseで特定の例外を発生させることができる raise ValueError(&amp;#34;Hello&amp;#34;) ---------------------------------------- &amp;gt;&amp;gt;&amp;gt; raise ValueError(&amp;#34;Hello&amp;#34;) Traceback (most recent call last): File &amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;, line 1, in &amp;lt;module&amp;gt; ValueError: Hello BaseExceptionあるいは、Exceptionを継承した例外クラスでなければならない
例外を自作する場合は注意する 例外を再送出することもできる
try: raise NameError(&amp;#39;HiThere&amp;#39;) except NameError: print(&amp;#39;An exception flew by!&amp;#39;) raise An exception flew by! Traceback (most recent call last): File &amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;, line 2, in &amp;lt;module&amp;gt; NameError: HiThere ある例外がほかの例外から連鎖していることを示す場合には、fromを使う from Noneでこれを無効化できる def func(): raise ConnectionError try: func() except ConnectionError as exc: raise RuntimeError(&amp;#39;Failed to open database&amp;#39;) from exc Traceback (most recent call last): File &amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;, line 2, in &amp;lt;module&amp;gt; File &amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;, line 2, in func ConnectionError The above exception was the direct cause of the following exception: Traceback (most recent call last): File &amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;, line 4, in &amp;lt;module&amp;gt; RuntimeError: Failed to open database</description></item><item><title>【1.1】try~exceptで終了させたい時</title><link>https://dddsuz2.github.io/suzmemo/1.1try~except%E3%81%A7%E7%B5%82%E4%BA%86%E3%81%95%E3%81%9B%E3%81%9F%E3%81%84%E6%99%82/</link><pubDate>Thu, 17 Aug 2023 22:10:00 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/1.1try~except%E3%81%A7%E7%B5%82%E4%BA%86%E3%81%95%E3%81%9B%E3%81%9F%E3%81%84%E6%99%82/</guid><description> try ... except ...で終了させたい時はsys.exit()を使う import logging import sys try: 1/0 except (ValueError,ZeroDivisionError): logging.warning(&amp;#34;test&amp;#34;) sys.exit(1) print(1+1) ------------------------------------------- WARNING:root:test 注意点として、try句の中ではexitできない exitは例外を発生させて終了するため そのため、関数呼び出しの時などは注意する # これは終了しない def test(): try: 1/0 except ZeroDivisionError: logging.warning(&amp;#34;testの中&amp;#34;) sys.exit(1) try: test() except (ValueError,ZeroDivisionError): logging.warning(&amp;#34;test&amp;#34;) # これは終了する def test(): try: 1/0 except ZeroDivisionError: logging.warning(&amp;#34;testの中&amp;#34;) try: test() except (ValueError,ZeroDivisionError): logging.warning(&amp;#34;test&amp;#34;) sys.exit(1)</description></item><item><title>【1】Pythonにおける例外処理の基本</title><link>https://dddsuz2.github.io/suzmemo/1python%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E4%BE%8B%E5%A4%96%E5%87%A6%E7%90%86%E3%81%AE%E5%9F%BA%E6%9C%AC/</link><pubDate>Thu, 17 Aug 2023 21:35:50 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/1python%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E4%BE%8B%E5%A4%96%E5%87%A6%E7%90%86%E3%81%AE%E5%9F%BA%E6%9C%AC/</guid><description> 基本中の基本は、try ... except ... import logging try: 1/0 except ZeroDivisionError: logging.warning(&amp;#34;test&amp;#34;) 何も例外が発生しない時、exceptの実行は飛ばされる tryで例外が発生すると、exceptキーワードの後に指定されている例外かどうか判定される 指定されている例外の場合、except句が実行された後、実行が継続される 指定されていない例外の場合、unhandled exceptionとなり、エラーが出力され、実行が止まる import logging try: 1/0 except ZeroDivisionError: logging.warning(&amp;#34;test&amp;#34;) print(1+1) try: 1/0 except ValueError: logging.warning(&amp;#34;test&amp;#34;) print(3+3) -------------------------------------- 2 WARNING:root:test Traceback (most recent call last): File &amp;#34;z:\home\dada\test\Python\Exception\test.py&amp;#34;, line 11, in &amp;lt;module&amp;gt; 1/0 ZeroDivisionError: division by zero exceptで例外をキャッチできた場合、そのまま実行が続くのがミソですな
じゃないとこの世のプログラム異常終了しまくるでな exceptでは複数のエラーを指定できる
import logging try: 1/0 except (ValueError,ZeroDivisionError): logging.warning(&amp;#34;test&amp;#34;) print(1+1) ----------------------------------- 2 WARNING:root:test</description></item><item><title>【1】コードがわからない時の対処法</title><link>https://dddsuz2.github.io/suzmemo/1%E3%82%B3%E3%83%BC%E3%83%89%E3%81%8C%E3%82%8F%E3%81%8B%E3%82%89%E3%81%AA%E3%81%84%E6%99%82%E3%81%AE%E5%AF%BE%E5%87%A6%E6%B3%95/</link><pubDate>Thu, 17 Aug 2023 21:28:50 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/1%E3%82%B3%E3%83%BC%E3%83%89%E3%81%8C%E3%82%8F%E3%81%8B%E3%82%89%E3%81%AA%E3%81%84%E6%99%82%E3%81%AE%E5%AF%BE%E5%87%A6%E6%B3%95/</guid><description> 仕事をしていて、わからないコードがあったときの対処法ができたのでメモ
初見のコードは一気に読んでも、まずわかることはない VSCodeを開いて、めちゃくちゃ小さい単位に分解して、それを実際のコードに近づけていく作業をすると理解できることがわかった 実験してみることが大事 これと本を読んで知識をつけることを並行すればよい そもそも小さい範囲に分解できない場合
そんな場合あるのか？ 専用の環境でしか動かないようなコードだと難しいのか そういう場合は、開発環境で実験する方法を有識者に聞く つまりDockerとかを利用してない環境はGarbage その場合はあきらめて寝る</description></item><item><title>【1】プラグインの導入</title><link>https://dddsuz2.github.io/suzmemo/1%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3%E3%81%AE%E5%B0%8E%E5%85%A5/</link><pubDate>Sat, 12 Aug 2023 21:09:11 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/1%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3%E3%81%AE%E5%B0%8E%E5%85%A5/</guid><description> 現在はvim-plugを使用している プラグインの導入方法 ~/.config/nvim/init.vimに以下の内容を追記する &amp;#34; vim-plugの初期化 call plug#begin(&amp;#39;~/.local/share/nvim/plugged&amp;#39;) &amp;#34; プラグインを指定してインストール Plug &amp;#39;ユーザー名/リポジトリ名&amp;#39; &amp;#34; GitHubのユーザー名とリポジトリ名を指定 &amp;#34; 他のプラグインをここに追加 &amp;#34; vim-plugの終了 call plug#end() Plug ...でプラグインを追加した後、vimを再起動 :PlugInstallでインストールされる</description></item><item><title>基本的に電子書籍を買う</title><link>https://dddsuz2.github.io/suzmemo/%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AB%E9%9B%BB%E5%AD%90%E6%9B%B8%E7%B1%8D%E3%82%92%E8%B2%B7%E3%81%86/</link><pubDate>Sat, 05 Aug 2023 00:19:11 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AB%E9%9B%BB%E5%AD%90%E6%9B%B8%E7%B1%8D%E3%82%92%E8%B2%B7%E3%81%86/</guid><description> suzmemoにメモを取りながら読むので、電子の方が明らかに読書体験が良い ブックスタンドを買ってみたが、分厚い本には微妙 というか、本が傷まないか気になってしまい、読むどころじゃない感もある 電子書籍になっていない本も多いのでどうしよう というか、図書館ヘビーユーザーなので、読む本はどうしても物理本が多い 裁断せずにスキャンできるやつ買えば良くね？ 10万ぐらいするわどうしよう 図書館の本をスキャンするのは法律的にどうなんだ問題 調べると、私的利用の範囲なら問題ないらしい 【参考】図書館で本を借りて自炊でPDF化したら違法になる？</description></item><item><title>【3.1】terraformにおけるプロバイダとは？</title><link>https://dddsuz2.github.io/suzmemo/3.1terraform%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E3%83%97%E3%83%AD%E3%83%90%E3%82%A4%E3%83%80%E3%81%A8%E3%81%AF/</link><pubDate>Thu, 03 Aug 2023 18:39:51 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/3.1terraform%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E3%83%97%E3%83%AD%E3%83%90%E3%82%A4%E3%83%80%E3%81%A8%E3%81%AF/</guid><description>プロバイダとは
インフラを管理するリソース（AWSとかGCPとか、GithubとかDockerとか）と対話するためのプラグイン terraform において、その設定内で作成されるリソースの作成、更新、削除などの管理を担当する</description></item><item><title>【3.0】terraformにおいて、状態ファイルをS3に保存する</title><link>https://dddsuz2.github.io/suzmemo/3.0terraform%E3%81%AB%E3%81%8A%E3%81%84%E3%81%A6%E7%8A%B6%E6%85%8B%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92s3%E3%81%AB%E4%BF%9D%E5%AD%98%E3%81%99%E3%82%8B/</link><pubDate>Thu, 03 Aug 2023 18:14:01 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/3.0terraform%E3%81%AB%E3%81%8A%E3%81%84%E3%81%A6%E7%8A%B6%E6%85%8B%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92s3%E3%81%AB%E4%BF%9D%E5%AD%98%E3%81%99%E3%82%8B/</guid><description>terraform { backend &amp;#34;s3&amp;#34; { region = &amp;#34;region&amp;#34; bucket = &amp;#34;bucket_name&amp;#34; key = &amp;#34;wawawa.tfstate&amp;#34; encrypt = true } } required_version = &amp;#34;=1.x.x&amp;#34; required_providers { aws = { version = &amp;#34;4.x.x&amp;#34; } http = { version = &amp;#34;2.x.x&amp;#34; } } terraform において、.tfstate はデフォルトでローカルに保存される backend に s3 を指定して状態ファイルをS3に保存する key: S3バケット内での状態ファイルのパスまたは名前を指定する required_version: terraformのバージョンを指定する 複数人でterraformを実行して、.tfstateが更新されてコンフリクトを起こすのを防ぐため、DynamoDBによってロックをかけることができる dynamodb_table = 'テーブル名'</description></item><item><title>【2.1】terraformにおけるモジュールとは？</title><link>https://dddsuz2.github.io/suzmemo/2.1terraform%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%A8%E3%81%AF/</link><pubDate>Thu, 03 Aug 2023 17:54:18 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/2.1terraform%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%A8%E3%81%AF/</guid><description>Terraform Module とは？
複数のresourceブロックで構成されたファイル群(.tf)をテンプレート化したもの 別ディレクトリ、リモートにある.tfファイルを関数のように呼び出すことができる</description></item><item><title>【2.0】terraformにおける環境ごとのデプロイ</title><link>https://dddsuz2.github.io/suzmemo/2.0terraform%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E7%92%B0%E5%A2%83%E3%81%94%E3%81%A8%E3%81%AE%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4/</link><pubDate>Thu, 03 Aug 2023 17:53:47 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/2.0terraform%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E7%92%B0%E5%A2%83%E3%81%94%E3%81%A8%E3%81%AE%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4/</guid><description>それぞれの環境ごとに異なるリソースを管理したり、同じリソースでも異なるパラメータを使いたい場合 環境ごとに env/{$環境}フォルダを作る それらの下に、main.tf ファイルを作る [Terraform]Moduleを作ると環境毎のデプロイが便利</description></item><item><title>【1.0】最も簡単なパターンのcodebuildスクリプト</title><link>https://dddsuz2.github.io/suzmemo/1.0%E6%9C%80%E3%82%82%E7%B0%A1%E5%8D%98%E3%81%AA%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E3%81%AEcodebuild%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88/</link><pubDate>Thu, 03 Aug 2023 17:39:14 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/1.0%E6%9C%80%E3%82%82%E7%B0%A1%E5%8D%98%E3%81%AA%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E3%81%AEcodebuild%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88/</guid><description>version: 0.2 phases: build: commands: - ./terraform/codebuild/build.sh set -eux terraform version cd &amp;#34;terraform/env/${ENV}&amp;#34; || exit if [&amp;#34;{$COMMNAD}&amp;#34; = &amp;#34;apply&amp;#34;]; then terraform apply -auto-approve elif [&amp;#34;{$COMMAND}&amp;#34; = &amp;#34;destroy&amp;#34;]; then terraform destroy -auto-approve else terraform &amp;#34;${COMMAND}&amp;#34; fi cd - || exit CI/CD パイプラインのようなスクリプトの実行が自動化されている環境では、auto-approve をつけて、対話的なプロンプトが起動しないようにする || exit をつけることで、前のコマンドが失敗した時に強制的にスクリプトを終了する set -eux -e（errexit）: このオプションが設定されていると、シェルスクリプトはエラーが発生した箇所で停止します。通常、シェルスクリプトはエラーが発生しても全てのコマンドを実行し終えるまで処理を続けます。しかし、set -eを設定すると、途中でエラーが起きた場合にはその時点でスクリプトが停止します。
-u（nounset）: このオプションが設定されていると、未定義の変数を参照しようとするとエラーが発生します。これは、変数の名前を間違えたり、変数が予期せず未設定のままになっている場合などのミスを防ぐのに役立ちます。
-x（xtrace）: このオプションが設定されていると、シェルスクリプトは実行するコマンドをすべて表示します。これはデバッグに便利で、どのコマンドがどのように実行されているかを明確にするのに役立ちます。
cd - cd -というコマンドはシェルで前回の作業ディレクトリに戻る役割を果たします。</description></item><item><title>メモ一覧</title><link>https://dddsuz2.github.io/suzmemo/%E3%83%A1%E3%83%A2%E4%B8%80%E8%A6%A7/</link><pubDate>Thu, 03 Aug 2023 17:14:30 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/%E3%83%A1%E3%83%A2%E4%B8%80%E8%A6%A7/</guid><description>ba</description></item><item><title>【Splunk Enterprise 2.1】License pooling とは？</title><link>https://dddsuz2.github.io/suzmemo/splunk-enterprise-2.1license-pooling-%E3%81%A8%E3%81%AF/</link><pubDate>Wed, 02 Aug 2023 22:41:20 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/splunk-enterprise-2.1license-pooling-%E3%81%A8%E3%81%AF/</guid><description> License Stack 個々の License Volume が集約されたもの Enterprise と Enterprise Sales Trial ライセンスのみスタック可能 License Master (LM) Liscense Stack を持ち、Liscense Peer (Liscense Slave) 以下の各インスタンスにライセンスを分配する Liscense Peer 間でライセンスを共有することができる License Pool License stack から割り当てられるライセンスの量</description></item><item><title>【Splunk Enterprise 2.0】Splunk Enterprise と Splunk Cloud の違い</title><link>https://dddsuz2.github.io/suzmemo/splunk-enterprise-2.0splunk-enterprise-%E3%81%A8-splunk-cloud-%E3%81%AE%E9%81%95%E3%81%84/</link><pubDate>Wed, 02 Aug 2023 22:22:13 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/splunk-enterprise-2.0splunk-enterprise-%E3%81%A8-splunk-cloud-%E3%81%AE%E9%81%95%E3%81%84/</guid><description> Splunk Enterprise Splunk Cloud CLI 利用可能 利用不可　Splunk Apps 利用者が自由に決められる Splunkによって承認されたアプリのみ Direct TCP/UDP network input 利用可能 利用不可 Scripted Alerts 利用可能 承認されたアプリのみ利用可能 License pooling 利用可能 利用不可 HEC 利用可能 利用可能(ELB on port 443 のみ) Splunk API デフォルトで利用可能 IP Allow List を使用すれば利用可能 Network Connection TCP or UDP オンプレミス上の Forwarder からのTCPのみ（UF credentials が必要） 【Splunk Enterprise 2-1】License pooling とは？
License Poolong って何やねんと思ったときの説明</description></item><item><title>2.人の目を見て話す</title><link>https://dddsuz2.github.io/suzmemo/2.%E4%BA%BA%E3%81%AE%E7%9B%AE%E3%82%92%E8%A6%8B%E3%81%A6%E8%A9%B1%E3%81%99/</link><pubDate>Tue, 25 Jul 2023 01:08:51 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/2.%E4%BA%BA%E3%81%AE%E7%9B%AE%E3%82%92%E8%A6%8B%E3%81%A6%E8%A9%B1%E3%81%99/</guid><description>人の目を見て話せるとき
1対1で向かい合って話している時 人の目を見て話せないとき
急に話しかけられた時 緊張している時、テンパっている時 話に集中していない時 人の目を見て話すメリット
人の話を聞くことに集中できる 他のことを考えたり、人の話を聞いている最中に考え事をしてしまう事象減らす 相手に興味があると示すことができる 人の目を見て話すデメリット
強いて言うなら、威圧感を与える可能性がある</description></item><item><title>1.基本的な姿勢</title><link>https://dddsuz2.github.io/suzmemo/1.%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AA%E5%A7%BF%E5%8B%A2/</link><pubDate>Sat, 15 Jul 2023 22:05:13 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/1.%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AA%E5%A7%BF%E5%8B%A2/</guid><description> あらゆるものは「問いの集合体である」という考え方
それについて、考える/考えない、答える/答えない は自分の好きなように選択する 全てのことに対して疑問を持つことが可能
ニラジ氏が言ってた「五感を磨く」って、「全てのことに対して疑問が持てるような感覚を磨く」ってことなのかなと少し思った
【参考】https://www.youtube.com/watch?v=18mwiVRIFBc</description></item><item><title>【Splunk Enterprise 1】Splunkの主要コンポーネント</title><link>https://dddsuz2.github.io/suzmemo/splunk-enterprise-1splunk%E3%81%AE%E4%B8%BB%E8%A6%81%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88/</link><pubDate>Mon, 10 Jul 2023 22:25:40 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/splunk-enterprise-1splunk%E3%81%AE%E4%B8%BB%E8%A6%81%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88/</guid><description> Instance
Splunk が起動しているサーバーのこと StandAlone: 単独サーバーのみで、input, parse, index, search を行う構成のこと Distributed: 複数のサーバーで、input, parse, index, search を行う構成のこと Forwader
データを Indexer または別の Forwarder に対して転送するコンポーネント Indexer
データをインデックス化し、raw data をイベントに変換する 検索リクエストに応じて、インデックス化されたデータを検索する Distributed なデプロイメントの場合 Search Head と呼ばれるコンポーネントが検索管理を行い、複数の Indexer 間で検索を調整する この場合、個々の Indexer は「検索ピア」と呼ばれる Index
Splunk によって検索可能な形式に変換された raw data のこと Deployment-Server
任意の数のインスタンスの設定をまとめて管理するインスタンス Deployment-Client
Deployment-Server によってリモートで設定を管理されるインスタンス</description></item></channel></rss>