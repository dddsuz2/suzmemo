<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>suzmemo</title><link>https://dddsuz2.github.io/suzmemo/</link><description>Recent content on suzmemo</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Tue, 29 Aug 2023 02:02:14 +0900</lastBuildDate><atom:link href="https://dddsuz2.github.io/suzmemo/index.xml" rel="self" type="application/rss+xml"/><item><title>【評論3.2】練習問題.md</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E7%8F%BE%E4%BB%A3%E6%96%87%E8%A7%A3%E9%87%88%E3%81%AE%E5%9F%BA%E7%A4%8E/%E8%A9%95%E8%AB%963.2%E7%B7%B4%E7%BF%92%E5%95%8F%E9%A1%8C.md/</link><pubDate>Tue, 29 Aug 2023 02:02:14 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E7%8F%BE%E4%BB%A3%E6%96%87%E8%A7%A3%E9%87%88%E3%81%AE%E5%9F%BA%E7%A4%8E/%E8%A9%95%E8%AB%963.2%E7%B7%B4%E7%BF%92%E5%95%8F%E9%A1%8C.md/</guid><description>内容 参考
A 郷愁 B 自分 エ
日ごろ見失われている真実の自分に出会う願いと喜び 承 2,3 転 3,4 真実の自分
ツッコミ・考察 問題文は読めてるけど問題間違い多いな 2,3 3,4 って被ってもうてるやん 疑問点 リンク</description></item><item><title>【評論3.1】例題.md</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E7%8F%BE%E4%BB%A3%E6%96%87%E8%A7%A3%E9%87%88%E3%81%AE%E5%9F%BA%E7%A4%8E/%E8%A9%95%E8%AB%963.1%E4%BE%8B%E9%A1%8C.md/</link><pubDate>Tue, 29 Aug 2023 01:42:47 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E7%8F%BE%E4%BB%A3%E6%96%87%E8%A7%A3%E9%87%88%E3%81%AE%E5%9F%BA%E7%A4%8E/%E8%A9%95%E8%AB%963.1%E4%BE%8B%E9%A1%8C.md/</guid><description>内容 人間が人間として独立するためには、疑問を自ら背負うことが大切である。そうした疑問は、恋愛のような形で、文学に現れる。
文学を手に取ることは、自分の悩みをうちあけようとする衝動があることであって、そうした点から文学は生ける人間に等しい。人と出会うように、文学に出会うことも青春時代には大きな喜びとなる。
第6段の題目は？
大疑問 人生の根本問題 人生の根本問題に対して筆者は何と言っている？
人生の根本問題と共通なもの 青春時代の悩み 文学 第7段の要旨は？
文学に心を向けることと、悩みを打ち明けることは同一 書物は死せる印刷物ではなく、生ける人間に等しい姿をとる それに出会うことが青春の大きな喜び 人生の根本問題は、青春時代の真剣な悩みの対象であり、文学作品の扱うものも、同じ人生の根本問題にほかならない
自分の病を打ち明けることができ、またそれに応じてくれるような文学作品に巡り合うことが、青春時代には大切である
ツッコミ・考察 疑問点 リンク</description></item><item><title>【評論3.0】段落の要旨.md</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E7%8F%BE%E4%BB%A3%E6%96%87%E8%A7%A3%E9%87%88%E3%81%AE%E5%9F%BA%E7%A4%8E/%E8%A9%95%E8%AB%963.0%E6%AE%B5%E8%90%BD%E3%81%AE%E8%A6%81%E6%97%A8.md/</link><pubDate>Tue, 29 Aug 2023 01:32:36 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E7%8F%BE%E4%BB%A3%E6%96%87%E8%A7%A3%E9%87%88%E3%81%AE%E5%9F%BA%E7%A4%8E/%E8%A9%95%E8%AB%963.0%E6%AE%B5%E8%90%BD%E3%81%AE%E8%A6%81%E6%97%A8.md/</guid><description>要約 繰り返される同一語句に注意する それが段落の要旨の題目にあたることがきわめて多い 類義語、言い換え、対義語に注意する 題目に対する論者の把握のしかたを示す 一文一文の内容を検討し、その題目に対して中心的な解説を見出す 今までの論理の運びとその関係においてその段落の要旨を位置づける 内容 論理的な文章は、何らかの題目について解説している これが結論 結論に肉をつけていくのが評論 肉をつけていくためのある目的をもったひとまとまりが段落 1つ1つの段落の内容を抑えていく必要がある 段落の要旨 何が扱われているのか しばしば繰り返される語句 言い換え表現も繰り返しの一種 対義語も見逃してはならない 何がどうだと解説されているのか 題目に関して述べている、一文一文の内容を検討して、最も中心となっている解説を見出す 今までの論理の運びとの関係においてその段落の要旨を位置づける ツッコミ・考察 疑問点 リンク</description></item><item><title>【12.1】ポインタを使った問題解決</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9%E3%81%8C%E3%81%8A%E3%82%82%E3%81%97%E3%82%8D%E3%81%84%E3%81%BB%E3%81%A9%E8%BA%AB%E3%81%AB%E3%81%A4%E3%81%8F%E6%9C%AC/12.1%E3%83%9D%E3%82%A4%E3%83%B3%E3%82%BF%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9F%E5%95%8F%E9%A1%8C%E8%A7%A3%E6%B1%BA/</link><pubDate>Sat, 26 Aug 2023 20:12:15 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9%E3%81%8C%E3%81%8A%E3%82%82%E3%81%97%E3%82%8D%E3%81%84%E3%81%BB%E3%81%A9%E8%BA%AB%E3%81%AB%E3%81%A4%E3%81%8F%E6%9C%AC/12.1%E3%83%9D%E3%82%A4%E3%83%B3%E3%82%BF%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9F%E5%95%8F%E9%A1%8C%E8%A7%A3%E6%B1%BA/</guid><description>内容 問題：可変長文字列の操作 ヒープを使った実装で、文字列型に必要な以下の 3 つの関数を書いてみよう。 append この関数は、文字列と文字を受け取り、文字列の最後に文字を追加する。 concatenate この関数は、2 つの文字列を受け取り、1 番目の文字列に 2 番目の文字列を追加する。 characterAt この関数は、文字列と数字を受け取り、文字列のなかでその数字の位置にある文字を返す（最初の文 字をゼロ番目の文字として扱う）。 このなかで頻繁に呼び出されるのは、characterAt だ。他の 2 つの関数に関しては、それほど頻繁に 呼び出されることはないだろう。呼び出される頻度に合わせて、処理の効率も考慮しなければいけない。 ツッコミ・考察 疑問点 リンク</description></item><item><title>【12】ポインタ</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9%E3%81%8C%E3%81%8A%E3%82%82%E3%81%97%E3%82%8D%E3%81%84%E3%81%BB%E3%81%A9%E8%BA%AB%E3%81%AB%E3%81%A4%E3%81%8F%E6%9C%AC/12%E3%83%9D%E3%82%A4%E3%83%B3%E3%82%BF/</link><pubDate>Sat, 26 Aug 2023 19:45:34 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9%E3%81%8C%E3%81%8A%E3%82%82%E3%81%97%E3%82%8D%E3%81%84%E3%81%BB%E3%81%A9%E8%BA%AB%E3%81%AB%E3%81%A4%E3%81%8F%E6%9C%AC/12%E3%83%9D%E3%82%A4%E3%83%B3%E3%82%BF/</guid><description>内容 ポインタを表すにはアスタリスクを使う コンテキストによって意味が変わる ポインタを宣言していることを表す場合 ポインタがさしている先のメモリを表す場合 int * variable1, variable2 variable2はポインタではなくintになる 変数の前に&amp;amp;を書くと、アドレス演算子になる メモリリーク ヒープに確保したメモリが解放されず、どのポインタからも参照されなくなること ツッコミ・考察 デリファレンスって用語を調べとく スラッシングも 疑問点 リンク</description></item><item><title>【11】配列を使った問題解決</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9%E3%81%8C%E3%81%8A%E3%82%82%E3%81%97%E3%82%8D%E3%81%84%E3%81%BB%E3%81%A9%E8%BA%AB%E3%81%AB%E3%81%A4%E3%81%8F%E6%9C%AC/11%E9%85%8D%E5%88%97%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9F%E5%95%8F%E9%A1%8C%E8%A7%A3%E6%B1%BA/</link><pubDate>Sat, 26 Aug 2023 19:29:30 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9%E3%81%8C%E3%81%8A%E3%82%82%E3%81%97%E3%82%8D%E3%81%84%E3%81%BB%E3%81%A9%E8%BA%AB%E3%81%AB%E3%81%A4%E3%81%8F%E6%9C%AC/11%E9%85%8D%E5%88%97%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9F%E5%95%8F%E9%A1%8C%E8%A7%A3%E6%B1%BA/</guid><description>内容 モードの探索 ある値の集合のなかで、最も頻繁に登場する値のことを統計では「モード」と呼ぶ。調査データの配列 を処理するコードを書いてみよう。調査対象が質問に 1～10 のいずれかの数値で答えているので、そこ からモードを求めたい。モードが複数存在する場合は、いずれかの値を選択する。 dict使えば良くね？ 10個程度しか値の種類がないなら、10種類の配列を用意しても良いね 構造体を使えば多次元配列みたいなめんどくさいものを使わずに済む ツッコミ・考察 番兵ってなんだっけ 疑問点 リンク</description></item><item><title>【10】配列</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9%E3%81%8C%E3%81%8A%E3%82%82%E3%81%97%E3%82%8D%E3%81%84%E3%81%BB%E3%81%A9%E8%BA%AB%E3%81%AB%E3%81%A4%E3%81%8F%E6%9C%AC/10%E9%85%8D%E5%88%97/</link><pubDate>Sat, 26 Aug 2023 19:16:26 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9%E3%81%8C%E3%81%8A%E3%82%82%E3%81%97%E3%82%8D%E3%81%84%E3%81%BB%E3%81%A9%E8%BA%AB%E3%81%AB%E3%81%A4%E3%81%8F%E6%9C%AC/10%E9%85%8D%E5%88%97/</guid><description>内容 ベクター 可変長配列 配列 同じ型の変数を1つの名前でまとめたもの 配列の中に含まれる変数のことを配列の要素と呼ぶ ランダムアクセスが可能 値の保存 tenIntegerArray[0]=5 イニシャライザ 初期値の代入 値の取得 インデックスを指定する インデックスがわからない場合 検索する ソート 高速なソート qsort 4つの引数が必要 ソートする配列 配列の要素数 1つの要素のサイズ 比較関数 美しくて理解しやすいソート 挿入ソート ツッコミ・考察 疑問点 リンク</description></item><item><title>【文学3.2】練習問題</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E7%8F%BE%E4%BB%A3%E6%96%87%E8%A7%A3%E9%87%88%E3%81%AE%E5%9F%BA%E7%A4%8E/%E6%96%87%E5%AD%A63.2%E7%B7%B4%E7%BF%92%E5%95%8F%E9%A1%8C/</link><pubDate>Fri, 25 Aug 2023 22:09:25 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E7%8F%BE%E4%BB%A3%E6%96%87%E8%A7%A3%E9%87%88%E3%81%AE%E5%9F%BA%E7%A4%8E/%E6%96%87%E5%AD%A63.2%E7%B7%B4%E7%BF%92%E5%95%8F%E9%A1%8C/</guid><description>内容 参考問題
擬人法 エ、ウ、イ　→　カ・ア・エ ア 演習
夕日のさし～していた。　→　正太のコマ～していた。 ア → イ 永遠の魂 正太が亡く 一年ばかり それから間 ツッコミ・考察 結構間違えた そもそも選択肢をちゃんと読んでいない 前後の文脈を把握する 適当に入れたらこういうのは間違う 疑問点 リンク</description></item><item><title>【文学3.1】例題</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E7%8F%BE%E4%BB%A3%E6%96%87%E8%A7%A3%E9%87%88%E3%81%AE%E5%9F%BA%E7%A4%8E/%E6%96%87%E5%AD%A63.1%E4%BE%8B%E9%A1%8C/</link><pubDate>Fri, 25 Aug 2023 21:50:54 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E7%8F%BE%E4%BB%A3%E6%96%87%E8%A7%A3%E9%87%88%E3%81%AE%E5%9F%BA%E7%A4%8E/%E6%96%87%E5%AD%A63.1%E4%BE%8B%E9%A1%8C/</guid><description>内容 さっきの門の下で老婆を捕らえた時の勇気とは、全然、反対な方向に動こうとする勇気
死体の髪を抜くことに対する憤り 飢え死にするぐらいなら盗人になるという勇気 老婆の話を聞いたことによる 髪を抜かれている女 へびを干し魚という嘘をついて帯刀に売っていた そうしないと飢え死にするため 老婆も飢え死にをしないために死体から髪を抜いている しかたがないことを良く知っていた女も許してくれるだろう 生きるためには自己中心的にならざるを得ないこと 飢え死にをしないために悪事を働くための勇気。善良な人物であり、先ほどは悪事を働くことに一歩踏み出せずにいた下人が、老婆の話を聞いて、生きるために悪事を働くのは仕方がないという考えになったことを勇気という言葉で表現している。
例題3までの流れ
平安時代のある日、主人から暇を出されて、明日の暮らしのあてもつかなくなっていながら、それでも盗人になる決心がつかないでいた下人 下人は羅生門の下で雨宿りをしていたが、死骸の置いてあるに違いない羅生門の二階を、その夜の宿にしようとして上がっていく。だれも思っていないと思っていた二階には、老婆がいて、若い女の死骸から髪を引き抜いていた 下人は死者を冒涜する老婆に怒りを感じ、老婆をねじ伏せる。老婆は、生きるためには、悪を犯すことも許されるべきだ。現にこの若い女もわるいことをした女だと言う。下人はそれを聞いているうちに「ある勇気」が生まれ、飢え死にをするか盗人になるか迷わなくなる。 重要なのは下人の心の変化
「盗人になるよりほかに仕方がない」ことを、積極だけに肯定するだけの勇気が出ずにいた しかし、ある勇気が生まれてきた 第二段によって、恐怖心で下人の頭は空っぽになった そこから老婆の説得を聞いて、勇気が湧いてきた 老婆を捕らえた時の勇気
悪への憤り こことは逆の方向に動こうとする勇気が生まれてくる このあとの下人
飢え死にをするくらいなら悪を犯す 盗人をしてでも生きよう、という決心。生きることへの意欲が心を満たしている状態だから。
ツッコミ・考察 疑問点 リンク</description></item><item><title>【文学3.0】構成を調べる</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E7%8F%BE%E4%BB%A3%E6%96%87%E8%A7%A3%E9%87%88%E3%81%AE%E5%9F%BA%E7%A4%8E/%E6%96%87%E5%AD%A63.0%E6%A7%8B%E6%88%90%E3%82%92%E8%AA%BF%E3%81%B9%E3%82%8B/</link><pubDate>Fri, 25 Aug 2023 21:41:35 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E7%8F%BE%E4%BB%A3%E6%96%87%E8%A7%A3%E9%87%88%E3%81%AE%E5%9F%BA%E7%A4%8E/%E6%96%87%E5%AD%A63.0%E6%A7%8B%E6%88%90%E3%82%92%E8%AA%BF%E3%81%B9%E3%82%8B/</guid><description>要約 今までの事件の展開をまとめてみる 事件の展開の中からとくに大きな変化と思われるものを発見し、小説を貫く一本の太い筋を見出す その太い筋を基準として一つ一つの事件の意味を考え、事件と事件との関係を考える 次は事件がどの方向に向かって発展するかについて予想してみる 内容 主人公と主人公をめぐる人間関係 事件という具体的なものの中で明瞭な肉付けを持つことになる 事件と人物の関係に根本的な差はない 事件が周囲の人間に影響を及ぼす そして性格や人間関係を様々に変える 小説はただその筋を読むのではなく、事件が持つ意味に注意する 小説の一つ一つの事件をとらえ、それらが持つ意味を一つ一つ確かめながら進む 今までの事件のあらすじをとらえる 事件の外面的な展開の中では、色々な変化がある 一番大きな変化と言えるものは何か 1つ1つの事件の役割を確かめることによって確認できる 次の事件の展開のための伏線を発見する ツッコミ・考察 疑問点 リンク</description></item><item><title>【評論2.2】練習問題</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E7%8F%BE%E4%BB%A3%E6%96%87%E8%A7%A3%E9%87%88%E3%81%AE%E5%9F%BA%E7%A4%8E/%E8%A9%95%E8%AB%962.2%E7%B7%B4%E7%BF%92%E5%95%8F%E9%A1%8C/</link><pubDate>Fri, 25 Aug 2023 01:10:56 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E7%8F%BE%E4%BB%A3%E6%96%87%E8%A7%A3%E9%87%88%E3%81%AE%E5%9F%BA%E7%A4%8E/%E8%A9%95%E8%AB%962.2%E7%B7%B4%E7%BF%92%E5%95%8F%E9%A1%8C/</guid><description>内容 参考問題
相対、創造 受け入れる対象の力　→　受容しようとしている文化も可 練習問題
勢い判断　&amp;ndash;&amp;gt; 感性的 合理性が弱いということ イウ 自分の調理法をもつこと ツッコミ・考察 疑問点 リンク</description></item><item><title>【評論2.1】例題</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E7%8F%BE%E4%BB%A3%E6%96%87%E8%A7%A3%E9%87%88%E3%81%AE%E5%9F%BA%E7%A4%8E/%E8%A9%95%E8%AB%962.1%E4%BE%8B%E9%A1%8C/</link><pubDate>Fri, 25 Aug 2023 00:54:28 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E7%8F%BE%E4%BB%A3%E6%96%87%E8%A7%A3%E9%87%88%E3%81%AE%E5%9F%BA%E7%A4%8E/%E8%A9%95%E8%AB%962.1%E4%BE%8B%E9%A1%8C/</guid><description>内容 解決の与えられそうにない大疑問を担うことで、精神は鍛えられ、成長していけるということ。 難問に触れ、わからなくなることは、それだけ真剣に問題と対決したということであり、文学がわかるための第一歩である。 1の指示語の内容について
解決の与えられそうにない大疑問を担うこと 精神の大きさを保証する
精神を鍛えること 成長する 2
難問にふれる 大疑問を担う 自分で考えるというニュアンス 大きな疑問を抱くなど ～にふれる 青年自身の外にある問題 青年の外にある何の問題に触れるのか？→文学 悩みを深め 自身の悩みを文学に接してますます「深める」 青年 = 自ら疑問に悩む 文学 = もっと大きな人生の問題を含む 本来は別々のものが、青年の側から文学に接して、文学の抱くもっと大きな問題にふれ、ますますわからなくなって悩みが深刻になる それが文学がわかる第一歩 ツッコミ・考察 2はカスってそうでカスってない 青年自身が疑問を持つ→自発的に文学に触れる 外側の問題によってさらにわからなくなる 最初の流れが、青年の内側から疑問を抱くことから文学の話に展開しているということをもっとはっきり捉えられていればよかった 疑問点 リンク</description></item><item><title>【評論2.0】一文一文の内容</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E7%8F%BE%E4%BB%A3%E6%96%87%E8%A7%A3%E9%87%88%E3%81%AE%E5%9F%BA%E7%A4%8E/%E8%A9%95%E8%AB%962.0%E4%B8%80%E6%96%87%E4%B8%80%E6%96%87%E3%81%AE%E5%86%85%E5%AE%B9/</link><pubDate>Fri, 25 Aug 2023 00:46:12 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E7%8F%BE%E4%BB%A3%E6%96%87%E8%A7%A3%E9%87%88%E3%81%AE%E5%9F%BA%E7%A4%8E/%E8%A9%95%E8%AB%962.0%E4%B8%80%E6%96%87%E4%B8%80%E6%96%87%E3%81%AE%E5%86%85%E5%AE%B9/</guid><description>要約 主語・述語を抽出して、その文の内容の範囲を把握する 重要な修飾語を見抜いて、その文の内容の中心点を把握する 指示語の指示対象を正確につかむ必要がある 特に言い換え語句については、必ず正確につかむ 内容 論理的な文章を読むときに大事なのが、一文一文の内容を正確につかむこと 最終目的は論旨をつかむこと 「何がどうか」を言おうとすること 主語と述語を掴む 主語と述語は文の内容を大きく囲む枠のようなもの 修飾語がその分の内容の実質的な中心をなすことがある 実質的に重要な修飾語を見抜くためには 例: 人間は考えることにおいて尊い 指示語の場合は、指示語の内容を正しくつかむことが大事 言い換え語句の正しい把握 例: 人間は疑うことにおいて尊い 先ほどの例の言い換え ツッコミ・考察 疑問点 リンク</description></item><item><title>【37】さらに高度な楽器へ</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/37%E3%81%95%E3%82%89%E3%81%AB%E9%AB%98%E5%BA%A6%E3%81%AA%E6%A5%BD%E5%99%A8%E3%81%B8/</link><pubDate>Thu, 24 Aug 2023 02:15:25 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/37%E3%81%95%E3%82%89%E3%81%AB%E9%AB%98%E5%BA%A6%E3%81%AA%E6%A5%BD%E5%99%A8%E3%81%B8/</guid><description>内容 ( SynthDef( &amp;#34;MyMoog&amp;#34;, { arg out, freq = 110, pan = 0.5, pitch1 = 4.0; var detune, sig1, sig2, env, sound; detune = 1.005; sig1 = MoogFF.ar( Pulse.ar(freq, LFNoise1.ar(1.0, 0.3, 0.4)), freq*pitch1, 3 ).dup; sig2 = MoogFF.ar( Pulse.ar(freq*detune, LFNoise1.ar(0.8, 0.2, 0.5)), freq*pitch1*1.5, 3 ).dup; sound = (sig1 + sig2) * 0.5; env = EnvGen.kr(Env.perc(0.005), doneAction:2); OffsetOut.ar(out,DirtPan.ar(sound, ~dirt.numChannels, pan, env)); }).add ) d1 $ sound &amp;#34;MyMoog*4&amp;#34; # n &amp;#34;c3 g4 c3 f4&amp;#34; d1 $ jux ((5/8) &amp;lt;~) $ sometimesBy 0.</description></item><item><title>【36】SynthをSuperDirt用に書き換える</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/36synth%E3%82%92superdirt%E7%94%A8%E3%81%AB%E6%9B%B8%E3%81%8D%E6%8F%9B%E3%81%88%E3%82%8B/</link><pubDate>Thu, 24 Aug 2023 01:37:38 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/36synth%E3%82%92superdirt%E7%94%A8%E3%81%AB%E6%9B%B8%E3%81%8D%E6%8F%9B%E3%81%88%E3%82%8B/</guid><description>内容 ( SynthDef( &amp;#34;SawSynth&amp;#34;, { arg out, freq = 110, pan = 0.5; var detune, sig1, sig2, env, sound; detune = 1.001; sig1 = Saw.ar(freq).dup; sig2 = Saw.ar(freq * detune).dup; sound = (sig1 + sig2) * 0.5; env = EnvGen.kr(Env.perc(), doneAction:2); OffsetOut.ar(out, DirtPan.ar(sound, ~dirt.numChannels, pan, env)); }).add ) d1 $ sound &amp;#34;SawSynth*4&amp;#34; # n &amp;#34;c4 g5 c5 g4&amp;#34; d1 $ sometimesBy 0.8 (jux (iter 8)) $ sometimes (jux ((3/8) ~&amp;gt;)) $ stack [ sound &amp;#34;SawSynth(5, 8, 3)&amp;#34; # n &amp;#34;[c5, e5, g5, &amp;lt;a5 b5&amp;gt;]&amp;#34; |+| n &amp;#34;&amp;lt;0 -5 -12 12&amp;gt;/2&amp;#34; # sustain &amp;#34;[0.</description></item><item><title>【35】シンセサイザーを定義する</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/35%E3%82%B7%E3%83%B3%E3%82%BB%E3%82%B5%E3%82%A4%E3%82%B6%E3%83%BC%E3%82%92%E5%AE%9A%E7%BE%A9%E3%81%99%E3%82%8B/</link><pubDate>Thu, 24 Aug 2023 01:29:57 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/35%E3%82%B7%E3%83%B3%E3%82%BB%E3%82%B5%E3%82%A4%E3%82%B6%E3%83%BC%E3%82%92%E5%AE%9A%E7%BE%A9%E3%81%99%E3%82%8B/</guid><description>内容 SynthDefを定義する ( Synthdef( &amp;#34;Synthの名前&amp;#34;, { ...音を生成する関数... Out.ar(Bus番号、出力する信号); } ) ) ( SynthDef( &amp;#34;SawSynth&amp;#34;, { var freq, detune, sig1, sig2, env; freq = 110; detune = 1.001; sig1 = Saw.ar(freq).dup; sig2 = Saw.ar(freq * detune).dup; env = EnvGen.kr(Env.perc(), doneAction:2); Out.ar(0, (sig1 + sig2) * env); }).add ) Synth(&amp;#34;SawSynth&amp;#34;) Synth(&amp;#34;SawSynth&amp;#34;, [&amp;#34;freq&amp;#34;, 220]); ツッコミ・考察 疑問点 リンク</description></item><item><title>【14.6.2】特殊文字</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/14.6.2%E7%89%B9%E6%AE%8A%E6%96%87%E5%AD%97/</link><pubDate>Thu, 24 Aug 2023 01:19:57 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/14.6.2%E7%89%B9%E6%AE%8A%E6%96%87%E5%AD%97/</guid><description>内容 パターン マッチ \d 1個の数字 \D 1個の数字以外の文字 \w 1個のUnicode単語文字（または英数字と_） \W 1個のUnicode単語文字（または英数字と_）以外の文字 \s 1個の空白文字 \S 1個の空白以外の文字 \b 単語の境界 \B 単語の境界以外の文字間 ツッコミ・考察 疑問点 リンク</description></item><item><title>【14.6.1】ワイルドカード</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/14.6.1%E3%83%AF%E3%82%A4%E3%83%AB%E3%83%89%E3%82%AB%E3%83%BC%E3%83%89/</link><pubDate>Thu, 24 Aug 2023 01:13:59 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/14.6.1%E3%83%AF%E3%82%A4%E3%83%AB%E3%83%89%E3%82%AB%E3%83%BC%E3%83%89/</guid><description>内容 .は任意の1文字 *は任意の個数の直前のものという意味 ?は0個か1個の直前の文字にマッチする ツッコミ・考察 疑問点 リンク</description></item><item><title>【14.6】正規表現</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/14.6%E6%AD%A3%E8%A6%8F%E8%A1%A8%E7%8F%BE/</link><pubDate>Thu, 24 Aug 2023 00:52:10 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/14.6%E6%AD%A3%E8%A6%8F%E8%A1%A8%E7%8F%BE/</guid><description>内容 Pythonにおける正規表現機能 標準ライブラリのreモジュールを使う &amp;gt;&amp;gt;&amp;gt; import re &amp;gt;&amp;gt;&amp;gt; result = re.match(r&amp;#39;You&amp;#39;, &amp;#39;Young Frankenstein&amp;#39;) Youが探しているパターン Young Frankensteinがソース文字列 matchはソースの先頭がパターンにマッチするかどうかをチェックする より複雑なマッチでは、パターンをコンパイルして、あとで行うマッチングのスピードを上げることができる &amp;gt;&amp;gt;&amp;gt; import re &amp;gt;&amp;gt;&amp;gt; youpattern = re.compile(r&amp;#39;You&amp;#39;) &amp;gt;&amp;gt;&amp;gt; result = youpattern.match(&amp;#39;Young Frankenstein&amp;#39;) &amp;gt;&amp;gt;&amp;gt; print(result) &amp;lt;re.Match object; span=(0, 3), match=&amp;#39;You&amp;#39;&amp;gt; 任意の位置でパターンを探すためにはsearch()を使う 重なり合わないすべてのマッチのリストを返すのはfindall() パターンにマッチしたところでソースを分割し、部分文字列のリストを返すのはsplit() 置き換え文字列引数を取り、ソースのうち、パターンにマッチする全ての部分を置き換え文字列に置き換えるのはsub() ツッコミ・考察 疑問点 リンク</description></item><item><title>【14.5.4】正規化</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/14.5.4%E6%AD%A3%E8%A6%8F%E5%8C%96/</link><pubDate>Thu, 24 Aug 2023 00:49:09 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/14.5.4%E6%AD%A3%E8%A6%8F%E5%8C%96/</guid><description>内容 複数のUnicodeエンコーディングを持つものが存在する これらは同じものとして扱われない unicodedataモジュールのnormalze()関数を使えば解決できる ツッコミ・考察 疑問点 リンク</description></item><item><title>【文学2.2】練習問題</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E7%8F%BE%E4%BB%A3%E6%96%87%E8%A7%A3%E9%87%88%E3%81%AE%E5%9F%BA%E7%A4%8E/%E6%96%87%E5%AD%A62.2%E7%B7%B4%E7%BF%92%E5%95%8F%E9%A1%8C/</link><pubDate>Wed, 23 Aug 2023 23:53:58 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E7%8F%BE%E4%BB%A3%E6%96%87%E8%A7%A3%E9%87%88%E3%81%AE%E5%9F%BA%E7%A4%8E/%E6%96%87%E5%AD%A62.2%E7%B7%B4%E7%BF%92%E5%95%8F%E9%A1%8C/</guid><description>内容 参考
エ ウ ア 母の憤りが、俊一にも素直に理解できた
俊一には、ハタハタの存在がきわめて尊大なものとして意識され、その動きに一喜一憂する人間そのものがひどく心許ないものに感じられてならなかった
演習 1.本当にハタハタは、永久に村落へはこないのだろうか。 2. 憤り 3. イ
ツッコミ・考察 疑問点 リンク</description></item><item><title>【文学2.1】例題</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E7%8F%BE%E4%BB%A3%E6%96%87%E8%A7%A3%E9%87%88%E3%81%AE%E5%9F%BA%E7%A4%8E/%E6%96%87%E5%AD%A62.1%E4%BE%8B%E9%A1%8C/</link><pubDate>Wed, 23 Aug 2023 23:37:43 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E7%8F%BE%E4%BB%A3%E6%96%87%E8%A7%A3%E9%87%88%E3%81%AE%E5%9F%BA%E7%A4%8E/%E6%96%87%E5%AD%A62.1%E4%BE%8B%E9%A1%8C/</guid><description>内容 六分の恐怖と四分の好奇心とに動かされて、暫時は息をするのさえ忘れていた
死骸の中に蹲っていた老婆に対しての恐怖心と、この場所で何をしているのか気になる好奇心に支配されている気持ち
下人は寝る場所を求めて羅生門の上に上がった
死骸が打ち捨てられていることを承知で 生きている人間は、羅生門の二階にはいないという暗黙の了解 そこに人がいたので、ギョッとした気持ち ある強い感情に襲われた
ギョッとするような驚きと不気味さ 何かしている老婆 気付かれていない安心感と優越感 女の死骸を眺めていると下人が気付く このあたりの下人の気持ち
六分の恐怖と四分の好奇心 最初のギョッとした気持ちの延長 四分の好奇心は落ち着きの心のあらわれ この後の老婆の奇怪な行動に対して下人はどう思ったか
老婆は死骸の髪の毛を一本ずつ抜き始めた 下人は良心的な人間 憤りを感じた ツッコミ・考察 疑問点 リンク</description></item><item><title>【文学2.0】主人公をめぐる人間関係</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E7%8F%BE%E4%BB%A3%E6%96%87%E8%A7%A3%E9%87%88%E3%81%AE%E5%9F%BA%E7%A4%8E/%E6%96%87%E5%AD%A62.0%E4%B8%BB%E4%BA%BA%E5%85%AC%E3%82%92%E3%82%81%E3%81%90%E3%82%8B%E4%BA%BA%E9%96%93%E9%96%A2%E4%BF%82/</link><pubDate>Wed, 23 Aug 2023 23:24:57 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E7%8F%BE%E4%BB%A3%E6%96%87%E8%A7%A3%E9%87%88%E3%81%AE%E5%9F%BA%E7%A4%8E/%E6%96%87%E5%AD%A62.0%E4%B8%BB%E4%BA%BA%E5%85%AC%E3%82%92%E3%82%81%E3%81%90%E3%82%8B%E4%BA%BA%E9%96%93%E9%96%A2%E4%BF%82/</guid><description>要約 相手に対する感情を直接に語ることばを見出す 相手に対する平素の態度を述べた部分に注意し、それがどのような人間関係を示すものであるかを考える 相手との外面的な関係を整理し、それが内面的な人間関係にどう影響するかを考えてみる 相手に対する一回一回の発言や態度をとらえ、そこに現れている人間関係を把握する 内容 ほとんどの小説では、主人公の周りに複数の登場人物が存在する 人間関係ができあがる その人間関係が事件を生み、展開させる基礎となる 人間関係をつかむには 身分関係などの外面的条件は重要ではない 登場人物がお互いに相手をどのような相手と受け取っているかという内面的な関係 相手に対する感情を直接に語ることばを見つける 例:彼は彼女を憎んでいた 相手の人間に対する平素の態度を見つける 彼女に対して彼の方から口をきいたことは一度もない 外面的な関係も考慮に入れる 例:彼は彼女の一年後輩であるために、出納責任者である彼女の下で長らく帳簿係を務めてきた 相手に対する一つ一つの発言や態度 例:彼女は「もう帰ってもいいわよ。」と言った。彼は思わず帳簿を彼女にたたきつけた。 一回一回の態度のよって肉付けされた人間関係をつかむ ツッコミ・考察 疑問点 リンク</description></item><item><title>【2.34】変動係数</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.34%E5%A4%89%E5%8B%95%E4%BF%82%E6%95%B0/</link><pubDate>Wed, 23 Aug 2023 23:19:39 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.34%E5%A4%89%E5%8B%95%E4%BF%82%E6%95%B0/</guid><description>内容 標準偏差と平均の両方がわかって初めて事象が理解できる どちらか片方では意味のあるデータにならない 平均に対する標準偏差の割合のことを変動係数という ばらつきを表現する方法としてZ値もある ツッコミ・考察 疑問点 リンク</description></item><item><title>【2.33】標準偏差、パーセンタイル、中央値</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.33%E6%A8%99%E6%BA%96%E5%81%8F%E5%B7%AE%E3%83%91%E3%83%BC%E3%82%BB%E3%83%B3%E3%82%BF%E3%82%A4%E3%83%AB%E4%B8%AD%E5%A4%AE%E5%80%A4/</link><pubDate>Wed, 23 Aug 2023 23:17:44 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.33%E6%A8%99%E6%BA%96%E5%81%8F%E5%B7%AE%E3%83%91%E3%83%BC%E3%82%BB%E3%83%B3%E3%82%BF%E3%82%A4%E3%83%AB%E4%B8%AD%E5%A4%AE%E5%80%A4/</guid><description>内容 標準偏差と99パーセンタイルは、データの分布についての情報を与える統計学的なテクニック 標準偏差 ばらつきの度合を示すもの 値が大きいほどばらつきが大きい 99パーセンタイル 分布の中で99％の値が含まれる点を示す ツッコミ・考察 疑問点 リンク</description></item><item><title>【2.32】平均</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.32%E5%B9%B3%E5%9D%87/</link><pubDate>Wed, 23 Aug 2023 23:14:14 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.32%E5%B9%B3%E5%9D%87/</guid><description>内容 平均は、データセットをひとつの値で代表させる 算術平均 値の総和を値の個数で割ったもの 幾何平均 全ての値をかけた積のn条根 調和平均 値の個数を値の逆数の総和で割ったもの 速度の時にはこれが適している 期間平均 時系列的にとった同じ指標を平均する ある一定の時間に100％に達した場合は見えなくなる 減衰平均 ロードアベレージのこと 平均の限界 平均は詳細を隠す ツッコミ・考察 疑問点 リンク</description></item><item><title>【2.31】パフォーマンスゲインの定量化</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.31%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9%E3%82%B2%E3%82%A4%E3%83%B3%E3%81%AE%E5%AE%9A%E9%87%8F%E5%8C%96/</link><pubDate>Wed, 23 Aug 2023 23:11:55 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.31%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9%E3%82%B2%E3%82%A4%E3%83%B3%E3%81%AE%E5%AE%9A%E9%87%8F%E5%8C%96/</guid><description>内容 パフォーマンス生涯の大きさや問題解決によるパフォーマンス向上の度合いを定量化する 観察 信頼できる指標を選ぶ 問題解決によるパフォーマンス向上の度合を推定する レイテンシは定量化に非常に向いている 実験 フィックスする 信頼できる指標を使ってフィックス前後のパフォーマンスを定量化する ツッコミ・考察 疑問点 リンク</description></item><item><title>【2.30.3】スケーラビリティを向上させる方法</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.30.3%E3%82%B9%E3%82%B1%E3%83%BC%E3%83%A9%E3%83%93%E3%83%AA%E3%83%86%E3%82%A3%E3%82%92%E5%90%91%E4%B8%8A%E3%81%95%E3%81%9B%E3%82%8B%E6%96%B9%E6%B3%95/</link><pubDate>Wed, 23 Aug 2023 23:09:23 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.30.3%E3%82%B9%E3%82%B1%E3%83%BC%E3%83%A9%E3%83%93%E3%83%AA%E3%83%86%E3%82%A3%E3%82%92%E5%90%91%E4%B8%8A%E3%81%95%E3%81%9B%E3%82%8B%E6%96%B9%E6%B3%95/</guid><description>内容 システムの大規模化 垂直スケーリング ロードバランサによる負荷分散 水平スケーリング スケーリングの自動化（AWSでいうASG） データベースのスケーリングではｍ、シャーディング ツッコミ・考察 疑問点 リンク</description></item><item><title>【2.30.2】要素分析</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.30.2%E8%A6%81%E7%B4%A0%E5%88%86%E6%9E%90/</link><pubDate>Wed, 23 Aug 2023 23:04:14 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.30.2%E8%A6%81%E7%B4%A0%E5%88%86%E6%9E%90/</guid><description>内容 すべての要素を最高値に設定してパフォーマンスを試す 要素を一つずつ変更してパフォーマンスをテストする 計測に基づき、要素ごとにパフォーマンスの低下率と節約できるコストを記録する パフォーマンスの上限からスタートして、必要なだけのパフォーマンスを維持しながら、コスト節減のために取り除ける要素を選んでいく 計算によって得られた構成が必要なパフォーマンスを維持していることを確認するために改めてテストを行う ツッコミ・考察 疑問点 リンク</description></item><item><title>【2.30.2】リソースの限界</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.30.1%E3%83%AA%E3%82%BD%E3%83%BC%E3%82%B9%E3%81%AE%E9%99%90%E7%95%8C/</link><pubDate>Wed, 23 Aug 2023 22:35:43 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.30.1%E3%83%AA%E3%82%BD%E3%83%BC%E3%82%B9%E3%81%AE%E9%99%90%E7%95%8C/</guid><description>内容 サーバーへの要求のペースを計測する 時系列的にペースをモニタリングする ハードウェア/ソフトウェアリソースの使用率を計測する 時系列的に使用率をモニタリングする 使っているリソースによってサーバーへの要求を表現する 各リソースの既知の（または実験によって明らかにした）限界を使い切るサーバー要求の数を外挿法で推定する ツッコミ・考察 疑問点 リンク</description></item><item><title>【2.29.6】キャパシティプランニング</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.30%E3%82%AD%E3%83%A3%E3%83%91%E3%82%B7%E3%83%86%E3%82%A3%E3%83%97%E3%83%A9%E3%83%B3%E3%83%8B%E3%83%B3%E3%82%B0/</link><pubDate>Wed, 23 Aug 2023 22:33:05 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.30%E3%82%AD%E3%83%A3%E3%83%91%E3%82%B7%E3%83%86%E3%82%A3%E3%83%97%E3%83%A9%E3%83%B3%E3%83%8B%E3%83%B3%E3%82%B0/</guid><description>内容 システムが負荷をどの程度処理できるか、負荷が増えたときにシステムがどれくらいスケーリングするかを検討するのがキャパシティプランニング ツッコミ・考察 疑問点 リンク</description></item><item><title>【2.29.5.2】60%の使用率</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.29.5.260%E3%81%AE%E4%BD%BF%E7%94%A8%E7%8E%87/</link><pubDate>Wed, 23 Aug 2023 22:27:26 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.29.5.260%E3%81%AE%E4%BD%BF%E7%94%A8%E7%8E%87/</guid><description>内容 ワークロードを一定時間で処理するディスクについて モデルはM/D/1となる 使用率が上がると、ディスクの応答時間はどのように変わるか r = s(2 - ρ)/2(1 - ρ) 応答時間rは、サービス時間sと使用率ρによって定義される 使用率が60％を超えると平均応答時間が倍になり、80％を超えると3倍になる ディスク使用率が100％に達する前に問題になる理由はコレ ディスクは一般的にキューイングシステムといえる ツッコミ・考察 疑問点 リンク</description></item><item><title>【2.29.5.1】ケンドールの記法</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.29.5.1%E3%82%B1%E3%83%B3%E3%83%89%E3%83%BC%E3%83%AB%E3%81%AE%E8%A8%98%E6%B3%95/</link><pubDate>Wed, 23 Aug 2023 22:23:35 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.29.5.1%E3%82%B1%E3%83%B3%E3%83%89%E3%83%BC%E3%83%AB%E3%81%AE%E8%A8%98%E6%B3%95/</guid><description>内容 ケンドールの記法は次の形式になる
A/S/m Aは到着過程 Sはサービス時間分布 mはサービスセンター数 ケンドールの記法によるキューイングシステムの例
M/M/1 マルコフ過程の到着時間 M/M/c M/M/1のマルチサーバー版 M/G/1 マルコフ過程の到着時間、一般分布のサービス時間 サービスセンターひとつ M/D/1 マルコフ過程の到着時間 決定論的サービス時間 サービスセンターひとつ ツッコミ・考察 疑問点 リンク</description></item><item><title>【2.29.5】待ち行列理論</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.29.5%E5%BE%85%E3%81%A1%E8%A1%8C%E5%88%97%E7%90%86%E8%AB%96/</link><pubDate>Wed, 23 Aug 2023 22:18:55 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.29.5%E5%BE%85%E3%81%A1%E8%A1%8C%E5%88%97%E7%90%86%E8%AB%96/</guid><description>内容 待ち行列理論はキューイングシステムとしてモデリングできる リトルの法則 L = λW システム内の平均要求数Lは平均到着率λに平均要求時間Wを掛けた値になる キューイングシステムは、並列に処理を実行する複数のサービスセンターを持つことができる 待ち行列理論では、サービスセンターはサーバーと呼ばれる キューイングシステムの分類 到着過程 サービス時間分布 サービスセンター数 ツッコミ・考察 疑問点 リンク</description></item><item><title>【34】SuperColliderの基本</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/34supercollider%E3%81%AE%E5%9F%BA%E6%9C%AC/</link><pubDate>Wed, 23 Aug 2023 02:22:20 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/34supercollider%E3%81%AE%E5%9F%BA%E6%9C%AC/</guid><description>内容 SuperColliderは、音響合成用プログラミング言語
リアルタイム音響合成とアルゴリズミック・コンポジションに特化している {SinOsc.ar(440)}.play
440Hzのサイン波が片方のチャンネルから出力される {SinOsc.ar([440, 660])}.play
左から440Hz, 右に660HzのSin波が出力される ({ var freq, detune, sig1, sig2; freq = 110; detune = 1.001; sig1 = Saw.ar(freq).dup; sig2 = Saw.ar(freq * detune).dup; (sig1 + sig2) * 0.5; }.play) freqは基本周波数 detuneは基本周波数から少しだけずらすため sig1とsig2はそれぞれSaw.ar()からの出力を代入 ツッコミ・考察 疑問点 リンク</description></item><item><title>【33】シンセサイザーを作る</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/33%E3%82%B7%E3%83%B3%E3%82%BB%E3%82%B5%E3%82%A4%E3%82%B6%E3%83%BC%E3%82%92%E4%BD%9C%E3%82%8B/</link><pubDate>Wed, 23 Aug 2023 02:12:34 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/33%E3%82%B7%E3%83%B3%E3%82%BB%E3%82%B5%E3%82%A4%E3%82%B6%E3%83%BC%E3%82%92%E4%BD%9C%E3%82%8B/</guid><description>内容 d1 $ sound &amp;#34;supersaw(5, 8)&amp;#34; # n &amp;#34;[c4, e4, g4, b4]&amp;#34; # sustain &amp;#34;[0.1 0.2 0.1 0.4]*2&amp;#34; # lpf (scale 800 8000 $ slow 8 $ sine) ならねー
なんで？ dafault-synth-extra.scd内で定義されている
ツッコミ・考察 疑問点 リンク</description></item><item><title>【32】サンプルの入手</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/32%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%81%AE%E5%85%A5%E6%89%8B/</link><pubDate>Wed, 23 Aug 2023 01:58:06 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/32%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%81%AE%E5%85%A5%E6%89%8B/</guid><description>内容 FreeSound LANDR Samples などのサイトから著作権フリーのサンプルを入手できる d1 $ sometimesBy 0.3 (jux (0.125 ~&amp;gt;)) $ sound &amp;#34;tictac(5, 8, [0, 3])&amp;#34; # n &amp;#34;[7 9 6 10]*2&amp;#34; # delay &amp;#34;0.5&amp;#34; # delaytime (3/8) ツッコミ・考察 疑問点 リンク</description></item><item><title>【31】サンプルの追加</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/31%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%81%AE%E8%BF%BD%E5%8A%A0/</link><pubDate>Wed, 23 Aug 2023 01:55:02 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/31%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%81%AE%E8%BF%BD%E5%8A%A0/</guid><description>内容 File &amp;gt; Open user support directory download-quarksフォルダ内のDirt-Samplesフォルダにサンプルを追加すればいい サンプル周波数も現在使用している周波数に再サンプルされるので合わせる必要はない ツッコミ・考察 疑問点 リンク</description></item><item><title>【2.29.4】ユニバーサルスケーラビリティ法則</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.29.4%E3%83%A6%E3%83%8B%E3%83%90%E3%83%BC%E3%82%B5%E3%83%AB%E3%82%B9%E3%82%B1%E3%83%BC%E3%83%A9%E3%83%93%E3%83%AA%E3%83%86%E3%82%A3%E6%B3%95%E5%89%87/</link><pubDate>Wed, 23 Aug 2023 00:05:21 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.29.4%E3%83%A6%E3%83%8B%E3%83%90%E3%83%BC%E3%82%B5%E3%83%AB%E3%82%B9%E3%82%B1%E3%83%BC%E3%83%A9%E3%83%93%E3%83%AA%E3%83%86%E3%82%A3%E6%B3%95%E5%89%87/</guid><description>内容 スーパーシリアルモデルとも呼ばれる コヒーレンスによる遅れのためのパラメータを追加して編み出したもの C(N)=N/(1+α(N-1)+βN(N-1)) βがコヒーレンスパラメータ ここが0ならアムダールの法則になる ツッコミ・考察 疑問点 リンク</description></item><item><title>【2.29.3】スケーラビリティに関するアムダールの法則</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.29.3%E3%82%B9%E3%82%B1%E3%83%BC%E3%83%A9%E3%83%93%E3%83%AA%E3%83%86%E3%82%A3%E3%81%AB%E9%96%A2%E3%81%99%E3%82%8B%E3%82%A2%E3%83%A0%E3%83%80%E3%83%BC%E3%83%AB%E3%81%AE%E6%B3%95%E5%89%87/</link><pubDate>Wed, 23 Aug 2023 00:01:47 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.29.3%E3%82%B9%E3%82%B1%E3%83%BC%E3%83%A9%E3%83%93%E3%83%AA%E3%83%86%E3%82%A3%E3%81%AB%E9%96%A2%E3%81%99%E3%82%8B%E3%82%A2%E3%83%A0%E3%83%80%E3%83%BC%E3%83%AB%E3%81%AE%E6%B3%95%E5%89%87/</guid><description>内容 アムダールの法則は、並列化によってスケーリングしないシリアルコンポーネントをモデリングする計算式 先ほどの視覚的な究明でいう「競合」 C(N) = N/(1+α(N-1)) 既存のシステムの観察や実験から、範囲Ｎのデータを集める 回帰分析を使って、アムダールパラメータ（α）を明らかにする 分析結果を図でプロットする ツッコミ・考察 疑問点 リンク</description></item><item><title>【2.29.2】視覚的な究明</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.29.2%E8%A6%96%E8%A6%9A%E7%9A%84%E3%81%AA%E7%A9%B6%E6%98%8E/</link><pubDate>Tue, 22 Aug 2023 23:56:59 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.29.2%E8%A6%96%E8%A6%9A%E7%9A%84%E3%81%AA%E7%A9%B6%E6%98%8E/</guid><description>内容 スケーリングパラメータと対応するパフォーマンスをプロットしていくと、パターンが現れることがある 線形スケーラビリティ リソースがスケーリングすると、それに比例してパフォーマンスが上がる 競合 アーキテクチャの中の一部コンポーネントが共有されており、同時に使えない場合、共有リソースに対する競合がスケーリングの効果を目減りさせてしまう コヒーレンス 変更のプロパゲーションなどのデータのコヒーレンシ（一貫性）を維持するためのオーバーヘッドは、スケーリングの効果を上回ることがある ニーポイント 特定の位置にスケーラビリティプロファイルを変える要因がある スケーラビリティシーリング バスやインターコネクトがスループットに達するとか、ソフトウェアが設定した限界に達するといった限界 ツッコミ・考察 疑問点 リンク</description></item><item><title>【2.29.1】エンタープライズシステムかクラウドシステムか</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.29.1%E3%82%A8%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%97%E3%83%A9%E3%82%A4%E3%82%BA%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%81%8B%E3%82%AF%E3%83%A9%E3%82%A6%E3%83%89%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%81%8B/</link><pubDate>Tue, 22 Aug 2023 23:55:04 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.29.1%E3%82%A8%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%97%E3%83%A9%E3%82%A4%E3%82%BA%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%81%8B%E3%82%AF%E3%83%A9%E3%82%A6%E3%83%89%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%81%8B/</guid><description>内容 モデリングによって、大規模なエンタープライズシステムが無くてもパフォーマンスをシミュレートできる クラウド上だと、パフォーマンスを予測するための、ワークロードの特性の把握や、シミュレーション、テストなどが行える ツッコミ・考察 疑問点 リンク</description></item><item><title>【2.29】モデリング</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.29%E3%83%A2%E3%83%87%E3%83%AA%E3%83%B3%E3%82%B0/</link><pubDate>Tue, 22 Aug 2023 23:52:45 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.29%E3%83%A2%E3%83%87%E3%83%AA%E3%83%B3%E3%82%B0/</guid><description>内容 アナリティカルモデリング 計測やシミュレーションの結果から、パフォーマンスの予測を行う ツッコミ・考察 疑問点 リンク</description></item><item><title>【2.28.20】パフォーマンスマントラ</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.28.20%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9%E3%83%9E%E3%83%B3%E3%83%88%E3%83%A9/</link><pubDate>Tue, 22 Aug 2023 23:51:41 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.28.20%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9%E3%83%9E%E3%83%B3%E3%83%88%E3%83%A9/</guid><description>内容 パフォーマンスマントラ するな してもいいが二度するな 減らせ 先に延ばせ 見られていない時にせよ 同時並行でせよ 安上がりにせよ ツッコミ・考察 疑問点 リンク</description></item><item><title>【2.28.19】マイクロベンチマーキング</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.28.19%E3%83%9E%E3%82%A4%E3%82%AF%E3%83%AD%E3%83%99%E3%83%B3%E3%83%81%E3%83%9E%E3%83%BC%E3%82%AD%E3%83%B3%E3%82%B0/</link><pubDate>Tue, 22 Aug 2023 23:49:32 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.28.19%E3%83%9E%E3%82%A4%E3%82%AF%E3%83%AD%E3%83%99%E3%83%B3%E3%83%81%E3%83%9E%E3%83%BC%E3%82%AD%E3%83%B3%E3%82%B0/</guid><description>内容 単純で人工的なワークロードのパフォーマンスを検査する マイクロベンチマーキングのターゲットの例 システムコールにかかる時間 ファイルシステムからの読みだし ネットワークのスループット ツッコミ・考察 疑問点 リンク</description></item><item><title>【2.28.18】キャッシュのチューニング</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.28.18%E3%82%AD%E3%83%A3%E3%83%83%E3%82%B7%E3%83%A5%E3%81%AE%E3%83%81%E3%83%A5%E3%83%BC%E3%83%8B%E3%83%B3%E3%82%B0/</link><pubDate>Tue, 22 Aug 2023 23:23:17 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.28.18%E3%82%AD%E3%83%A3%E3%83%83%E3%82%B7%E3%83%A5%E3%81%AE%E3%83%81%E3%83%A5%E3%83%BC%E3%83%8B%E3%83%B3%E3%82%B0/</guid><description>内容 キャッシングをチューニングするための戦略 出来る限り処理が実行される場所に近い位置でキャッシングする キャッシングの位置は、メタデータが多く、それを使ってキャッシュ保持ポリシーを良いものにできる場所がいい キャッシュが有効にされており、動作していることをチェックする キャッシュヒット率とキャッシュミス率をチェックする キャッシュサイズが動的に変わる場合は、現在のサイズをチェックする ワークロードに合わせてキャッシュをチューニングする ツッコミ・考察 疑問点 リンク</description></item><item><title>【2.28.17】静的パフォーマンスチューニング</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.28.17%E9%9D%99%E7%9A%84%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9%E3%83%81%E3%83%A5%E3%83%BC%E3%83%8B%E3%83%B3%E3%82%B0/</link><pubDate>Tue, 22 Aug 2023 23:20:57 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.28.17%E9%9D%99%E7%9A%84%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9%E3%83%81%E3%83%A5%E3%83%BC%E3%83%8B%E3%83%B3%E3%82%B0/</guid><description>内容 構成されたアーキテクチャの問題点をチューニングすることを、静的パフォーマンスチューニングという このコンポーネントに意味はあるか 構成は、想定されるワークロードにとって意味のあるものになっているか コンポーネントは、想定されるワークロードにとって意味のあるものになっているか コンポーネントがエラーを起こし、今は最適ではない状態で動作していないか 負荷を与えられた時のパフォーマンスチューニングを動的パフォーマンスチューニングという ツッコミ・考察 疑問点 リンク</description></item><item><title>【2.28.16】ベースライン統計</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.28.16%E3%83%99%E3%83%BC%E3%82%B9%E3%83%A9%E3%82%A4%E3%83%B3%E7%B5%B1%E8%A8%88/</link><pubDate>Tue, 22 Aug 2023 23:18:53 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.28.16%E3%83%99%E3%83%BC%E3%82%B9%E3%83%A9%E3%82%A4%E3%83%B3%E7%B5%B1%E8%A8%88/</guid><description>内容 システムが「正常」に稼働している時のすべてのシステム指標を収集し、それをテキストファイルやデータベースに記録してあとで参照できるようにしておく ツッコミ・考察 疑問点 リンク</description></item><item><title>【2.28.15】イベントトレーシング</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.28.15%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E3%83%88%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%B3%E3%82%B0/</link><pubDate>Tue, 22 Aug 2023 23:14:05 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.28.15%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E3%83%88%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%B3%E3%82%B0/</guid><description>内容 前提：システムはバラバラなイベントを処理して動作している パフォーマンス分析では、これらのイベントの値を集計する 集計することで、重要な細部が失われる可能性がある 個別にイベントを検討することで、理解を深めることができる システムコールのトレーシング strace(1) perf(1) トレーシングツールで見る場所 入力 時間 結果 異常にレイテンシの高いイベント レイテンシ外れ値 ツッコミ・考察 疑問点 リンク</description></item><item><title>【2.28.14】メソッドR</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.28.14%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89r/</link><pubDate>Tue, 22 Aug 2023 23:12:08 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.28.14%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89r/</guid><description>内容 Oracleデータベースのために開発されたパフォーマンス分析メソドロジ クエリーの実行中にどこで時間が使われているのかを突き止め、定量化することに集中する ツッコミ・考察 疑問点 クエリー実行中のレイテンシ時間を求めるのってどうやるんだっけ リンク</description></item><item><title>【評論1.2】練習問題</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E7%8F%BE%E4%BB%A3%E6%96%87%E8%A7%A3%E9%87%88%E3%81%AE%E5%9F%BA%E7%A4%8E/%E8%A9%95%E8%AB%961.2%E7%B7%B4%E7%BF%92%E5%95%8F%E9%A1%8C/</link><pubDate>Tue, 22 Aug 2023 22:30:08 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E7%8F%BE%E4%BB%A3%E6%96%87%E8%A7%A3%E9%87%88%E3%81%AE%E5%9F%BA%E7%A4%8E/%E8%A9%95%E8%AB%961.2%E7%B7%B4%E7%BF%92%E5%95%8F%E9%A1%8C/</guid><description>内容 参考
①ア ②ア 松尾 演習
日本人が写真好きだということ 単純化された現実 現実という ア ツッコミ・考察 参考
②ウ ウと迷った 演習
エらしい アは文章としておかしいのではないかと思ったが&amp;hellip; 確かに本文に合致してないのはエのほうか 疑問点 リンク</description></item><item><title>【評論1.1】例題</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E7%8F%BE%E4%BB%A3%E6%96%87%E8%A7%A3%E9%87%88%E3%81%AE%E5%9F%BA%E7%A4%8E/%E8%A9%95%E8%AB%961.1%E4%BE%8B%E9%A1%8C/</link><pubDate>Tue, 22 Aug 2023 22:21:07 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E7%8F%BE%E4%BB%A3%E6%96%87%E8%A7%A3%E9%87%88%E3%81%AE%E5%9F%BA%E7%A4%8E/%E8%A9%95%E8%AB%961.1%E4%BE%8B%E9%A1%8C/</guid><description>内容 これ 人間の生涯には4つの誕生日があること 自我 人間としての独立性 自発的にものを考えるということ この初心 人生に対するさまざまの疑問をいだき、自分の生き方を自発的に問うこと これが言い換えなのに気が付かなかった ツッコミ・考察 疑問点 リンク</description></item><item><title>【評論1.0】一語一語の内容</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E7%8F%BE%E4%BB%A3%E6%96%87%E8%A7%A3%E9%87%88%E3%81%AE%E5%9F%BA%E7%A4%8E/%E8%A9%95%E8%AB%961.0%E4%B8%80%E8%AA%9E%E4%B8%80%E8%AA%9E%E3%81%AE%E5%86%85%E5%AE%B9/</link><pubDate>Tue, 22 Aug 2023 22:14:06 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E7%8F%BE%E4%BB%A3%E6%96%87%E8%A7%A3%E9%87%88%E3%81%AE%E5%9F%BA%E7%A4%8E/%E8%A9%95%E8%AB%961.0%E4%B8%80%E8%AA%9E%E4%B8%80%E8%AA%9E%E3%81%AE%E5%86%85%E5%AE%B9/</guid><description>要約 指示語の指示対象を正確につかむ 論者自身が下す説明の言葉を探す 言い換え語句に気が付く 対義語に気が付く 内容 評論が難しく見える理由 表論文の中には難しい用語が現れる 意味がわからないと読めないのか？そういう訳ではない 指示語の数が多い 指示語の指示対象を正確につかむ必要がある 先行する表現を指示対象とするもの 後継する表現である場合もある 難しい用語 筆者がその内容をやさしく言い換えている場合がある そうした説明を探す 古典つまり国民の精神のより所は... つまり、すなわち、言い換えればなどの表現を探す 説明とよく似たものに言い換えがある 言い換え語句に気付くことは一語一語の内容を正しく理解するためにきわめて大切 対義語 重要な語句とは正反対のものを表していることに気付くことが大事 ツッコミ・考察 あんまりこういうの気にしてなかったことを反省 難しい言葉が出てきた時、語句だけに囚われてはいけない 前後の内容をチェック、言い換えや説明を探す 対義語も 疑問点 リンク</description></item><item><title>【14.5.3】HTMLエンティティ</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/14.5.3html%E3%82%A8%E3%83%B3%E3%83%86%E3%82%A3%E3%83%86%E3%82%A3/</link><pubDate>Tue, 22 Aug 2023 00:48:35 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/14.5.3html%E3%82%A8%E3%83%B3%E3%83%86%E3%82%A3%E3%83%86%E3%82%A3/</guid><description>内容 文字エンティティをデコードの方法として使える &amp;gt;&amp;gt;&amp;gt; import html &amp;gt;&amp;gt;&amp;gt; html.unescape(&amp;#34;&amp;amp;#233;&amp;#34;) &amp;#39;é&amp;#39; &amp;gt;&amp;gt;&amp;gt; html.unescape(&amp;#34;&amp;amp;#xe9;&amp;#34;) &amp;#39;é&amp;#39; 名前エンティティの変換表を辞書としてインポートして自分で変換できる エンティティの先頭の&amp;amp;を省略したものを辞書のキーとして使うことができる &amp;gt;&amp;gt;&amp;gt; from html.entities import html5 &amp;gt;&amp;gt;&amp;gt; html5[&amp;#34;egrave&amp;#34;] &amp;#39;è&amp;#39; &amp;gt;&amp;gt;&amp;gt; html5[&amp;#34;egrave;&amp;#34;] &amp;#39;è&amp;#39; 反対方向の変換では、ord()で10進数の値を調べる &amp;gt;&amp;gt;&amp;gt; import html &amp;gt;&amp;gt;&amp;gt; char = &amp;#39;\u00e9&amp;#39; &amp;gt;&amp;gt;&amp;gt; dec_value = ord(char) &amp;gt;&amp;gt;&amp;gt; html.entities.codepoint2name[dec_value] &amp;#39;eacute&amp;#39; &amp;gt;&amp;gt;&amp;gt; place = &amp;#39;caf\u00e9&amp;#39; &amp;gt;&amp;gt;&amp;gt; byte_value = place.encode(&amp;#39;ascii&amp;#39;, &amp;#39;xmlcharrefreplace&amp;#39;) &amp;gt;&amp;gt;&amp;gt; byte_value b&amp;#39;caf&amp;amp;#233;&amp;#39; &amp;gt;&amp;gt;&amp;gt; byte_value.decode() &amp;#39;caf&amp;amp;#233;&amp;#39; ツッコミ・考察 疑問点 リンク</description></item><item><title>【14.5.2】文字列のデコード</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/14.5.2%E6%96%87%E5%AD%97%E5%88%97%E3%81%AE%E3%83%87%E3%82%B3%E3%83%BC%E3%83%89/</link><pubDate>Tue, 22 Aug 2023 00:39:47 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/14.5.2%E6%96%87%E5%AD%97%E5%88%97%E3%81%AE%E3%83%87%E3%82%B3%E3%83%BC%E3%83%89/</guid><description>内容 バイト列をUnicode文字列にする操作 &amp;gt;&amp;gt;&amp;gt; place = &amp;#39;caf\u00e9&amp;#39; &amp;gt;&amp;gt;&amp;gt; place &amp;#39;café&amp;#39; &amp;gt;&amp;gt;&amp;gt; type(place) &amp;lt;class &amp;#39;str&amp;#39;&amp;gt; &amp;gt;&amp;gt;&amp;gt; place_bytes = place.encode(&amp;#39;utf-8&amp;#39;) &amp;gt;&amp;gt;&amp;gt; place_bytes b&amp;#39;caf\xc3\xa9&amp;#39; &amp;gt;&amp;gt;&amp;gt; type(place_bytes) &amp;lt;class &amp;#39;bytes&amp;#39;&amp;gt; &amp;gt;&amp;gt;&amp;gt; place2 = place_bytes.decode(&amp;#39;utf-8&amp;#39;) &amp;gt;&amp;gt;&amp;gt; place2 &amp;#39;café&amp;#39; &amp;gt;&amp;gt;&amp;gt; place4 = place_bytes.decode(&amp;#39;latin-1&amp;#39;) &amp;gt;&amp;gt;&amp;gt; place4 &amp;#39;cafÃ©&amp;#39; &amp;gt;&amp;gt;&amp;gt; place5 = place_bytes.decode(&amp;#39;windows-1252&amp;#39;) &amp;gt;&amp;gt;&amp;gt; place5 &amp;#39;cafÃ©&amp;#39; UTF-8の最初の3バイトはASCII文字と同じになる プログラムでは任意のUnicode文字を使えるが、表示できるかどうかはフォントで決まっている ツッコミ・考察 疑問点 リンク</description></item><item><title>【14.5.1】文字列のエンコード</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/14.5.1%E6%96%87%E5%AD%97%E5%88%97%E3%81%AE%E3%82%A8%E3%83%B3%E3%82%B3%E3%83%BC%E3%83%89/</link><pubDate>Tue, 22 Aug 2023 00:29:43 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/14.5.1%E6%96%87%E5%AD%97%E5%88%97%E3%81%AE%E3%82%A8%E3%83%B3%E3%82%B3%E3%83%BC%E3%83%89/</guid><description>内容 encode()関数で文字列をエンコードしてバイト列にする 第一引数として選べるもの ascii utf-8 latin-1 cp-1252 unicode-escape &amp;gt;&amp;gt;&amp;gt; snowman = &amp;#39;\u2603&amp;#39; &amp;gt;&amp;gt;&amp;gt; len(snowman) 1 &amp;gt;&amp;gt;&amp;gt; ds = snowman.encode(&amp;#39;utf-8&amp;#39;) &amp;gt;&amp;gt;&amp;gt; len(ds) 3 &amp;gt;&amp;gt;&amp;gt; ds b&amp;#39;\xe2\x98\x83&amp;#39; 第2引数でignoreを指定することで、エンコードできないものを捨てることができる backslashreplaceでunicode-escape形式のPython Unicode文字列を生成する HTMLで使う場合は、xmlcharrefreplaceを使う ツッコミ・考察 疑問点 リンク</description></item><item><title>【14.5】UTF8</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/14.5utf-8/</link><pubDate>Tue, 22 Aug 2023 00:23:35 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/14.5utf-8/</guid><description>内容 Pythonと外の世界でデータをやりとりする時には次の2つのものが必要になる
文字列をバイト列にエンコードする手段 バイト列を文字列にデコードする手段 UTF-8
Ken ThompsonとRob Pikeがニュージャージーの食堂で設計したらしい 怪物かよ 個々のUnicode文字のために1バイトから4バイトを使う ASCIIは1バイト ほとんどのラテン字系言語は2バイト 基本多言語面のその他については3バイト 一部のアジアの言語、記号を含むその他については4バイト ほかのソースからコピペしてPython文字列を作るときは、UTF-8でエンコードされているか確かめる ツッコミ・考察 疑問点 リンク</description></item><item><title>【14.4】unicodedataモジュール</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/14.4unicodedata%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB/</link><pubDate>Tue, 22 Aug 2023 00:14:45 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/14.4unicodedata%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB/</guid><description>内容 lookup() 名前（大文字と小文字を区別しない）を与えると、Unicode文字が返される name() Unicode文字を与えると、大文字の名前を返す &amp;gt;&amp;gt;&amp;gt; import unicodedata &amp;gt;&amp;gt;&amp;gt; def unicode_test(value): ... name = unicodedata.name(value) ... value2 = unicodedata.lookup(name) ... print(f&amp;#39;value=&amp;#34;{value}&amp;#34;, name=&amp;#34;{name}&amp;#34;, value2=&amp;#34;{value2}&amp;#34;&amp;#39;) ... &amp;gt;&amp;gt;&amp;gt; unicode_test(&amp;#39;A&amp;#39;) value=&amp;#34;A&amp;#34;, name=&amp;#34;LATIN CAPITAL LETTER A&amp;#34;, value2=&amp;#34;A&amp;#34; &amp;gt;&amp;gt;&amp;gt; unicode_test(&amp;#39;$&amp;#39;) value=&amp;#34;$&amp;#34;, name=&amp;#34;DOLLAR SIGN&amp;#34;, value2=&amp;#34;$&amp;#34; &amp;gt;&amp;gt;&amp;gt; unicode_test(&amp;#39;\u00a2&amp;#39;) value=&amp;#34;¢&amp;#34;, name=&amp;#34;CENT SIGN&amp;#34;, value2=&amp;#34;¢&amp;#34; &amp;gt;&amp;gt;&amp;gt; unicode_test(&amp;#39;\u20ac&amp;#39;) value=&amp;#34;€&amp;#34;, name=&amp;#34;EURO SIGN&amp;#34;, value2=&amp;#34;€&amp;#34; 問題点
全てのUnicode文字を持つフォントはないに等しい イメージの無い文字に対してはそのことを表す代替記号を表示する len()関数に文字列を渡すと、バイト数ではなく、Unicodeの文字数を数える
Unicode文字の数値IDがわかっていれば、標準のord()とchr()関数を使って整数IDとUnicode文字の1字を簡単に相互変換できる
ツッコミ・考察 疑問点 代替記号ってどうやって決めてるんだろう len()でUnicodeの文字列を数えてるのは色々ありそう ord()とchr()ってなんやっけ リンク</description></item><item><title>【14.3】Python3のUnicode文字列</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/14.3python3%E3%81%AEunicode%E6%96%87%E5%AD%97%E5%88%97/</link><pubDate>Tue, 22 Aug 2023 00:09:13 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/14.3python3%E3%81%AEunicode%E6%96%87%E5%AD%97%E5%88%97/</guid><description>内容 \uの後ろに4個の16進数字を続けたものは、256の基本多言語面のどれかに含まれる文字に対応する 最初の2桁は面文字（00からFFまで） 後半の2桁はその面の中での文字列のインデックスを表す 面00はASCIIらしい 上位面の文字は、基本多言語面の文字よりも多くのビットを必要とする \Uの後ろに8個の16進数文字を続ける 左端の数字はゼロでなければならない すべての文字について、\N{name}を使えば、標準の名前で1つの文字を指定できる ツッコミ・考察 疑問点 リンク</description></item><item><title>【14.2】ASCII</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/14.2ascii/</link><pubDate>Tue, 22 Aug 2023 00:05:38 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/14.2ascii/</guid><description>内容 ASCII 1960年代に定義された コンピュータの基本単位はバイト 8個のビットを使って256種類の一意な値を表現 ASCIIは7ビットを使用 ツッコミ・考察 疑問点 なんでASCIIは7ビットなの？ リンク</description></item><item><title>【14.1】Unicode</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/14.1unicode/</link><pubDate>Tue, 22 Aug 2023 00:02:35 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/14.1unicode/</guid><description>内容 Python3の文字列はバイトの配列ではなく、Unicodeのシーケンス
Unicode
世界中の言語の全ての文字、数学、その他の分野の記号を定義使用という国際標準 13万7000文字を超える 面と呼ばれる8ビットセットに分割される 最初の256面は基本多言語面らしい ツッコミ・考察 疑問点 基本多言語面って何や UnicodeのWikipediaを読む必要あり リンク</description></item><item><title>【14】データマンジング</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/14%E3%83%87%E3%83%BC%E3%82%BF%E3%83%9E%E3%83%B3%E3%82%B8%E3%83%B3%E3%82%B0/</link><pubDate>Tue, 22 Aug 2023 00:00:41 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/14%E3%83%87%E3%83%BC%E3%82%BF%E3%83%9E%E3%83%B3%E3%82%B8%E3%83%B3%E3%82%B0/</guid><description>内容 データを操作する作業をデータマンジングという ビジネスではETLと呼ばれる (extract, transform, load) データの形式 テキスト 文字列を使用する Unicode 正規表現 バイナリ ツッコミ・考察 文字列にはもっと色々あるよね 他の形式を学ぶことがあったらリンクでつなごう 疑問点 リンク</description></item><item><title>【文学1.2】練習問題</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E7%8F%BE%E4%BB%A3%E6%96%87%E8%A7%A3%E9%87%88%E3%81%AE%E5%9F%BA%E7%A4%8E/%E6%96%87%E5%AD%A61.2%E7%B7%B4%E7%BF%92%E5%95%8F%E9%A1%8C/</link><pubDate>Mon, 21 Aug 2023 22:48:28 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E7%8F%BE%E4%BB%A3%E6%96%87%E8%A7%A3%E9%87%88%E3%81%AE%E5%9F%BA%E7%A4%8E/%E6%96%87%E5%AD%A61.2%E7%B7%B4%E7%BF%92%E5%95%8F%E9%A1%8C/</guid><description>内容 主人公の輪郭が表現されている内容 こんな深うて流れもはやいとこ...としり込みする洋 水の中にはいるのがうれしくてたまらない→洋二郎 いつもに似ず洋は大胆になったようであった ア
エ
洋のパンツが流れて全裸になっていたから。
洋が泳げるようになったから。
イ
ウ
ツッコミ・考察 疑問点 リンク</description></item><item><title>【文学1.1】例題</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E7%8F%BE%E4%BB%A3%E6%96%87%E8%A7%A3%E9%87%88%E3%81%AE%E5%9F%BA%E7%A4%8E/%E6%96%87%E5%AD%A61.1%E4%BE%8B%E9%A1%8C/</link><pubDate>Mon, 21 Aug 2023 22:14:34 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E7%8F%BE%E4%BB%A3%E6%96%87%E8%A7%A3%E9%87%88%E3%81%AE%E5%9F%BA%E7%A4%8E/%E6%96%87%E5%AD%A61.1%E4%BE%8B%E9%A1%8C/</guid><description>内容 主人公の輪郭を表す表現
どうにもならないことをどうにかするためには、手段を選んでいるいとまはない 選ばないとすれば、――下人の考えは、何度も同じ道を低廻したあげくに、やっとこの局所へ逢着した しかしこの「すれば」は、いつまでたっても、けっきょく「すれば」であった。 当然、その後に来るべき「盗人になるよりほかにしかたがない」ということを、積極的に肯定するだけの、勇気が出ずにいたのである 主人公はどんな人物？
生きていくためには盗人になるしかないと思いながらも、それを決行できずにいる優柔不断さと善性を持った人物 この小説の主人公は、誰だと思いますか？
下人 4~5日前に雇い主より暇を出された 明日の暮らしをどうにかしなければならない状況にある ではどうして作者は、そのような人物を登場させるのでしょうか？
主人公の名前は出てこない、身分のみ 名無し → 一般化 身分は低い この人物の外面は重要でない 内面を描くため 食いぶちに困り、悪事を働くより他にない下人の内面を描くため 平安時代は貴族社会であり、身分の低いものは別段の注意を払われない。名前で呼ばれず、ただ「下人」ということによって、社会的に特別の注意を払われない、どこの街角でもいそうなごく平凡な人物、という性質を与えようとしている。たまたま平安京の一角で、作者の目に止まった男、という扱いで始めようとしている。
したがって、作者の関心は、早速に主人公の内面に向かいます
明日の暮らしをどうにかしなければならないと途方に暮れていた 作者は、平安時代の名もなき男を借りて、こうした状況下における人間の心の動き一つのあり方を、追求しようとしている
その心の動きが以下に展開するはずですが、この例題の範囲でどれだけのことが理解されるでしょうか
下人の考えは堂々巡り 盗人になるしかないとわかっていながらも、盗人になる決心がつかない 善性を持つ そこまで来ていながら、「盗人になるよりほかにしかたがない」という結論を下すことができない、という状態がそれを良く示している
手段を選んでいる暇がないという表現にはすでに決心が含まれている
「盗み」をしようという決心をすでにしているにも関わらず、認識から決心への一跨ぎができない。「勇気」がない。
良心的で、小心な人物。
ツッコミ・考察 久しぶりに国語の問題とかやってるけど結構難しい 言われたらわかるけど&amp;hellip; 優柔不断と小心ってちょっと違うよね 小心の方が今回の話にピッタリの表現 悪事を働こうとしているため たしかに、下人はすでに盗みをする決心を固めているよね 別に盗み以外もありそうなのに 疑問点 リンク</description></item><item><title>【文学1.0】主人公の輪郭を捉える</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E7%8F%BE%E4%BB%A3%E6%96%87%E8%A7%A3%E9%87%88%E3%81%AE%E5%9F%BA%E7%A4%8E/%E6%96%87%E5%AD%A61.0%E4%B8%BB%E4%BA%BA%E5%85%AC%E3%81%AE%E8%BC%AA%E9%83%AD%E3%82%92%E6%8D%89%E3%81%88%E3%82%8B/</link><pubDate>Mon, 21 Aug 2023 21:59:34 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E7%8F%BE%E4%BB%A3%E6%96%87%E8%A7%A3%E9%87%88%E3%81%AE%E5%9F%BA%E7%A4%8E/%E6%96%87%E5%AD%A61.0%E4%B8%BB%E4%BA%BA%E5%85%AC%E3%81%AE%E8%BC%AA%E9%83%AD%E3%82%92%E6%8D%89%E3%81%88%E3%82%8B/</guid><description>要点 主人公の輪郭のとらえ方 主人公の内面を直接に語る言葉を見出す 主人公の平素の様子を述べた部分を整理し、それが主人公の内面にどう関係するかを考える 主人公の年齢・身分・容貌・財産などの外面的条件を整理し、それから推して主人公の内面のあらましを考える 主人公のひとつひとつの発言や行動をとらえ、そこに現われている内面的性格を捉える。 内容 主人公がどのような人物であるかを掴む 年齢や容姿は取り立てて重要ではない 内面を捉えることが重要 性格・生き方・考え方など 外面的な条件が内面に深い関係を持つことがあるので、外面に注意を払わなくてよい訳ではない 主人公の内面が直接語られている言葉を見つける 例: 彼はだらしない人間であった。 こういった直接的な表現がない場合、外面から内面をとらえるしかない 主人公の平素の様子について述べた言葉を見つける 例: 彼はいつも汚れたハンカチを持っていた 平素のことであるがゆえに、彼がだらしのない人物であることがわかる だらしなさを具体的に描いている 年齢・容姿・身分などの外面は、内面の次ぐらいに重要 例: 彼は四十の坂をこえて、ようやく係長に昇進した こういった表現から、「要領の悪い、才能に恵まれない、そして多分気の弱い性格である」と考えてよい 年齢や地位、容姿や財産といった外面的条件が、人の内面とどのような関係を持ち、どのような影響を与えるものなのかを常に考えながら、主人公の外面的条件を整理する 主人公の1つ1つの発言や行動が、主人公の内面の具体的肉付けとなる 例: 課長から握手を求められた時、彼は思わず汚れたハンカチで顔の汗を拭った この表現は、気の弱い人を描いたものにほかならない こうした1つ1つの発言や行動は、小説の話の筋を構成するもの 話の筋をたどりながら、主人公の内面や主人公の人間像をつかむ ツッコミ・考察 係長のやつ&amp;hellip;俺やん&amp;hellip; 認知の歪み 疑問点 リンク</description></item><item><title>【書誌】現代文解釈の基礎.md</title><link>https://dddsuz2.github.io/suzmemo/%E6%9B%B8%E8%AA%8C%E7%8F%BE%E4%BB%A3%E6%96%87%E8%A7%A3%E9%87%88%E3%81%AE%E5%9F%BA%E7%A4%8E.md/</link><pubDate>Mon, 21 Aug 2023 21:54:11 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/%E6%9B%B8%E8%AA%8C%E7%8F%BE%E4%BB%A3%E6%96%87%E8%A7%A3%E9%87%88%E3%81%AE%E5%9F%BA%E7%A4%8E.md/</guid><description>目次 ■文学的な文章 Ⅰ 解釈の基本 １ 主人公の輪郭 ―主人公はどのような人物であるか―　解釈上のポイント〈主人公の輪郭のとらえ方〉　２ 主人公をめぐる人間関係 ―お互いに相手をどのように意識しているか―　解釈上のポイント〈主人公をめぐる人間関係のとらえ方〉　３　構成を調べる―事件の中で最も大きく変化したものは何か― 解釈上のポイント〈構成の調べ方〉 ４ 全体の主題 ―全体から訴えてくるもの― 解釈上のポイント〈全体の主題のとらえ方〉 Ⅱ 登場人物について １ 人物の性格 ―登場人物の発言や行動から性格を読む― 解釈上のポイント〈人物の性格のとらえ方〉 ２ 人物の心理 ―登場人物の心理の起伏を追求する― 解釈上のポイント〈人物の心理のとらえ方〉 ３ 人物の思想 ―登場人物の思想を知る― 解釈上のポイント〈人物の思想のとらえ方〉 Ⅲ 構成・表現について １ 主題をつかむ ―「どんなことが」書かれているか― 解釈上のポイント〈主題のとらえ方〉 ２ 意図を解釈する ―「どのようなものとして」書かれているか― 解釈上のポイント〈意図のとらえ方〉 ３ 文体を解釈する ―「どのように」表現されているか― 解釈上のポイント〈文体のとらえ方〉 Ⅳ 作者について １ 発 想 ―作者が書くときにとった根本的な態度― 解釈上のポイント〈作者の発想のとらえ方〉 ２ 想像力 ―作者の想像力のはたらき― 解釈上のポイント〈作者の想像力のとらえ方〉 ３ 感 覚 ―作者の感覚のはたらき― 解釈上のポイント〈作者の感覚のとらえ方〉 〈付〉 近代・現代の詩について 解釈上のポイント〈詩の読み方 〉 ■論理的な文章 Ⅰ 解釈の基本 １ 一語一語の内容 ―難解な語を理解する― 解釈上のポイント〈一語一語の内容のとらえ方〉 ２ 一文一文の内容 ―一文一文の内容をおさえていく― 解釈上のポイント〈一文一文の内容のとらえ方〉 ３ 段落の要旨 ―段落の要旨を一つ一つおさえていく― 解釈上のポイント〈段落の要旨のとらえ方〉 ４ 全体の論旨 ―全体としてどういうことが論じられているか― 解釈上のポイント〈全体の論旨のつかみ方〉 Ⅱ 論の重点について １ 指示詞の実質内容 ―コソアドの指し示すものの内容を正しくつかむ― 解釈上のポイント〈コソアド（指示詞）の実質内容のとらえ方〉 ２ 具体的事例と抽象的見解 ―引き合いに出された実例― 解釈上のポイント〈具体的な事例と抽象的な見解のとらえ方〉 ３ 語句の照応 ―繰り返されているもの・対比されているもの― 解釈上のポイント〈語句の照応のとらえ方〉 Ⅲ 論の構成について １ 段落の設定 ―接続詞をつかまえるだけでは不十分― 解釈上のポイント〈段落の句切り方〉 ２ 判断の論拠㈠帰納を中心に ―わかりきったこととして書かれていない判断に注意― 解釈上のポイント〈判断の論拠㈠―帰納―のとらえ方〉 ３ 判断の論拠㈡演繹を中心に ―前提から結論が導き出されるときの法則を知る― 解釈上のポイント〈判断の論拠㈡―演繹―のとらえ方〉 Ⅳ 論者について １ 価値の置き方 ―論者がどういうものに価値を置こうとしているか― 解釈上のポイント〈論者の価値の置き方のとらえ方〉 ２ 考え方 ―論者の根本的な考え方を理解する― 解釈上のポイント〈論者の考え方のとらえ方〉 ３ 物の見方 ―論者の世界観・人生観を探る― 解釈上のポイント〈論者の物の見方のつかみ方〉 索 引 練習問題〈考え方〉解答 解説（読書猿）</description></item><item><title>TOEFL英単語</title><link>https://dddsuz2.github.io/suzmemo/toefl%E8%8B%B1%E5%8D%98%E8%AA%9E/</link><pubDate>Mon, 21 Aug 2023 19:24:37 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/toefl%E8%8B%B1%E5%8D%98%E8%AA%9E/</guid><description> provide v n: provision merchant n needle n fasten v mental adj object n, v produce v, n progress n, v finished adj oxygen n alive adj own v recommend v diplomacy n rainfall n rise v admirable adj v: admire structure n upstairs n, adv observatory n herbivore n exercise n lava n territory n imagine v usage n grain n syn: cereal adopt v n: adoption investment n proposal n v: propose tool n vibration n previous adj treatment n scissors n fireplace n folk n involve v poet n passenger n wage n ancestor n ant: descendant interrupt v n: interruption bank n*2 recover v n: recovery carve v exclaim v n: exclamation herb n hesitate v n: hesitancy X-ray n grass n undertake v recognize v n: recognition accomplish v fond adj tend v discussion n humid adj island n permanent adj scholar n later adj, adv fine adj carbon n decision n v: decide broad adj freeze v creative adj futhermore adv sufficient adj n: sufficiency affluent adj increase v, n cheerfully adv nearly adv water v skill n illness n vote n, v saw n indeed adv require v n: requirement describe v n: description parcel n apparent adj official adj navy n (the ~) sign v signature odor n scent n suppose v brochure n calm adj tuition n trial n countryside n (the ~) clerk n independence n past n, adj sculpture n habitat n unable adj tissue n package n aroma n resemble v n: resemblance generate v complain v compete v n: competition landscape painting n blow n, v religion n adj: religious act n instantly adv syn: immediately resist v n: resistance typical adj formal adj anti: informal equipment n excuse n, v fever n restrict v n: restriction available adj divide v n: division economic adj discover v n: discovery priest n basic adj resume v edition n v: edit traffic n distant adj prevent v occupy v n: occupation maize n syn: corn channel n victim n BCE n syn: BC voyage n honor n adj: honorable wonder v, n halt v corner n politician n democracy n brave adj gene n register v boring adj feature n major n, adj anti: minor wrap v airflow n modest adj syn: humble dangerous adj n: danger poetry n strict adj succeed v n: succession elect v ashamed adj role n insist v n: insistance declare v declaration achieve v consider v n: consideration warn v quite adv annoy v mathematics n forecast n, v publish v carnivore n adj: carnivorous useless adj anti: useful feed v summit n fortunate adj waterproof adj orbit n, v demand v, n shallow adj secure adj garment n governor n pursue v n: pursuit trap revolution n experience n, v raw adj shortly adv offend v present v, n aggressive adj tribe n faithful adj donate v n: donation sociable adj bay n realize v load n, v trust n, v secret adj, n rhythm n settle v continue v atlas n complaint n reply v, n count v real adj electronic adj fragment n, v marsh n trend n right n vary v adj: variable author n nebula n routine adj annual adj courage n algae n sin: alga emphasize v n: emphasis civic adj bright adj actual adj escape v, n growth n v: grow tragedy n anti: comedy permit v n: permission believe v n: belief union n fellow n disaster n task n coast n difference n adj: different numerous adj guess v, n biodiversity n convenient adj n: convenience safety n adj: safe efficient adj n: efficiency agriculture n grab v patient n, adj force n, v primitive adj final adj trash n awful adj division n modern adj repeat v n: repetition plant n meanwhile adv opinion n thirsty adj crime n adj: criminal stable adj, n occur v n: occurrence actress n dust n throw v connect v n: connection crop n toe n flag v, n hostage n fee committee n blood n motif n elderly adj, n store n ceremony n beehive n attitude n election n doubt n, v internal adj anti: external compare v n: comparison harbor n media n sin: medium invest v plate n Atlantic Ocean n stock n wrinkle n raise v shave v surface n spectacle n playing field n rate n commerce n adj: commercial exception n blossom n suprise n, v elementary adj performance n selfish adj</description></item><item><title>【2.28.13】レイテンシ分析</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.28.13%E3%83%AC%E3%82%A4%E3%83%86%E3%83%B3%E3%82%B7%E5%88%86%E6%9E%90/</link><pubDate>Mon, 21 Aug 2023 16:08:51 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.28.13%E3%83%AC%E3%82%A4%E3%83%86%E3%83%B3%E3%82%B7%E5%88%86%E6%9E%90/</guid><description> オペレーションが完了するまでにかかる時間を解析する 細かいコンポーネントに分解し、根本原因をつきとめ、定量化する 例えば、クエリー時間は主としてon-CPU時間かoff-CPU時間かというような感じで2分探索する</description></item><item><title>【2.28.12.1】なぜなぜ分析</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.28.12.1%E3%81%AA%E3%81%9C%E3%81%AA%E3%81%9C%E5%88%86%E6%9E%90/</link><pubDate>Mon, 21 Aug 2023 16:07:43 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.28.12.1%E3%81%AA%E3%81%9C%E3%81%AA%E3%81%9C%E5%88%86%E6%9E%90/</guid><description> なぜなぜ分析は、ドリルダウン分析の補助メソドロジ なぜを5回自問自答する</description></item><item><title>【2.28.12】ドリルダウン分析</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.28.12%E3%83%89%E3%83%AA%E3%83%AB%E3%83%80%E3%82%A6%E3%83%B3%E5%88%86%E6%9E%90/</link><pubDate>Mon, 21 Aug 2023 16:04:26 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.28.12%E3%83%89%E3%83%AA%E3%83%AB%E3%83%80%E3%82%A6%E3%83%B3%E5%88%86%E6%9E%90/</guid><description> 高いレベルで問題を解析するところから始まる
関係ない領域を捨てて焦点を絞る ドリルダウン分析の3段階
モニタリング 特定 分析</description></item><item><title>【2.28.11】ワークロード特性の把握</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.28.11%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%89%E7%89%B9%E6%80%A7%E3%81%AE%E6%8A%8A%E6%8F%A1/</link><pubDate>Mon, 21 Aug 2023 16:00:00 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.28.11%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%89%E7%89%B9%E6%80%A7%E3%81%AE%E6%8A%8A%E6%8F%A1/</guid><description> システムに対する入力に注目する ワークロード特性を把握するための問い 誰が負荷をかけているのか なぜ負荷がかかっているのか 負荷の特徴は何か。IOPS、スループット、方向（読み/書き）、タイプは何か。適切なら分散も含める 負荷は時系列的にどのように変化しているか</description></item><item><title>【2.28.10】REDメソッド</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.28.10red%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89/</link><pubDate>Mon, 21 Aug 2023 15:57:36 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.28.10red%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89/</guid><description>一般的にマイクロサービスアーキテクチャで使われている
全てのサービスで、以下の指標をチェックする 要求率 エラー 処理時間 USEメソッドはマシンの健全性、REDメソッドはユーザーから見た健全性をチェックする</description></item><item><title>【2.28.9.5】機能ブロックダイアグラム</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.28.9.5%E6%A9%9F%E8%83%BD%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF%E3%83%80%E3%82%A4%E3%82%A2%E3%82%B0%E3%83%A9%E3%83%A0/</link><pubDate>Mon, 21 Aug 2023 15:50:46 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.28.9.5%E6%A9%9F%E8%83%BD%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF%E3%83%80%E3%82%A4%E3%82%A2%E3%82%B0%E3%83%A9%E3%83%A0/</guid><description> リソースは、システムの機能ブロックダイアグラムを探したり、描いたりしてリストアップすると便利 CPU、メモリ、I/Oのインターコネクトやバスは見落としがち スループットに余裕を持たせるように設計されているのが普通 ここがボトルネックになると問題の解決は難しい</description></item><item><title>【2.28.9.4】リソースリスト</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.28.9.4%E3%83%AA%E3%82%BD%E3%83%BC%E3%82%B9%E3%83%AA%E3%82%B9%E3%83%88/</link><pubDate>Mon, 21 Aug 2023 15:45:17 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.28.9.4%E3%83%AA%E3%82%BD%E3%83%BC%E3%82%B9%E3%83%AA%E3%82%B9%E3%83%88/</guid><description>リソースリストの例 - CPU: ソケット、コア、ハードウェアスレッド（仮想CPU） - メインメモリ: DRAM - ネットワークインターフェース: イーサネットポート、インフィニバンド - ストレージデバイス: ディスク、ストレージアダプタ - アクセラレータ: GPU、TPU、FPGAなど - コントローラ: ストレージ、ネットワーク - インターコネクト: CPU、メモリ、I/O 個々のコンポーネントは、単一のリソースタイプとして機能する
容量リソース、I/Oリソースなど 複数のリソースタイプとして機能するコンポーネントもある ハードウェアキャッシュなどの一部の物理コンポーネントはチェックリストに載せなくてよい
リソースのリストが完成したら、個々のリソースについて使用率、飽和、エラー指標のタイプのうち適切なものがどれかを考える</description></item><item><title>【2.28.9.3】指標の表現</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.28.9.3%E6%8C%87%E6%A8%99%E3%81%AE%E8%A1%A8%E7%8F%BE/</link><pubDate>Mon, 21 Aug 2023 15:41:02 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.28.9.3%E6%8C%87%E6%A8%99%E3%81%AE%E8%A1%A8%E7%8F%BE/</guid><description> 長いインターバルで見ると全体的な使用率が低いように見えても、使用率が短時間に極端に高くなると、飽和やパフォーマンス障害を引き起こすことがある</description></item><item><title>【2.28.9.2】USEメソッドの手順</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.28.9.2use%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%AE%E6%89%8B%E9%A0%86/</link><pubDate>Mon, 21 Aug 2023 15:34:45 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.28.9.2use%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%AE%E6%89%8B%E9%A0%86/</guid><description>開始 ↓ リソースのリストアップ ↓ 1つのリソースの選択 ↓ N エラーがあるか　---------------- Y ↓ N | 飽和があるか ------------------- Y ↓ N | 使用率が高いか ----------------- Y --&amp;gt; 検出されたことを精査する ↓ N 全てのリソースを完全にチェックしたか ↓ Y 終了 図は割と適当なので、本文のp.51を参照して
システムは複数のパフォーマンス障害を抱えている場合がある
最初に見つけた者は問題の一つであって、決定的なものではない可能性がある 見つかった問題はさらにほかのメソドロジで調査してよい</description></item><item><title>【2.28.9.1】USEメソッドの用語</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.28.9.1use%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%AE%E7%94%A8%E8%AA%9E/</link><pubDate>Mon, 21 Aug 2023 15:31:59 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.28.9.1use%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%AE%E7%94%A8%E8%AA%9E/</guid><description> リソース 物理サーバーの全ての機能的なコンポーネント 使用率 決められたインターバルの中で、リソースが要求を処理するためにビジー状態だった時間の割合 飽和度 処理できない要求を抱えている度合 エラー エラーイベントの回数</description></item><item><title>【2.28.9】USEメソッド</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.28.9use%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89/</link><pubDate>Mon, 21 Aug 2023 15:29:16 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.28.9use%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89/</guid><description> USEメソッド（使用率、飽和度、エラー） パフォーマンス調査の初期の段階で使うべきメソドロジ 全てのリソースについて、使用率、飽和度、エラーをチェックする</description></item><item><title>【2.28.8】ツールメソッド</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.28.8%E3%83%84%E3%83%BC%E3%83%AB%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89/</link><pubDate>Mon, 21 Aug 2023 15:19:30 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.28.8%E3%83%84%E3%83%BC%E3%83%AB%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89/</guid><description> ツール重視のアプローチ
利用できるパフォーマンスツールをリストアップする 個々のツールについて、得られる役に立つ指標をリストアップする 個々の指標について、考えられる解釈の方法をリストアップする 利用できるツールに依存している
街灯のアンチメソッドのような不完全な像を作り出してしまいかねない 効率的でないことが多い 大量のツールと指標が存在する 1つしか必要でないケースも多い</description></item><item><title>【2.28.7】診断サイクル</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.28.7%E8%A8%BA%E6%96%AD%E3%82%B5%E3%82%A4%E3%82%AF%E3%83%AB/</link><pubDate>Mon, 21 Aug 2023 15:17:19 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.28.7%E8%A8%BA%E6%96%AD%E3%82%B5%E3%82%A4%E3%82%AF%E3%83%AB/</guid><description> 科学的メソッドとよく似ている 仮説 → インストルメンテーション → データ → 仮説 データがすぐに新しい仮説を導いてくることを強調する サイクルさせていくことが科学的メソッドとの違いかな</description></item><item><title>【2.28.6】科学的メソッド</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.28.6%E7%A7%91%E5%AD%A6%E7%9A%84%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89/</link><pubDate>Mon, 21 Aug 2023 15:07:23 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.28.6%E7%A7%91%E5%AD%A6%E7%9A%84%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89/</guid><description> 仮説を立て、それを検証する
問題 仮説 予測 検証 分析 問題はパフォーマンス障害の記述
例 問題：データベースクエリーが遅い原因は何か？ 仮説：騒がしい隣人（クラウドの他のテナント）がディスクI/Oを実行しており、データベースとディスクI/Oを奪い合っている（ファイルシステムを介して） 予測：クエリーの過程でファイルシステムにおけるI/Oレイテンシが計測されるなら、クエリーの遅さの原因はファイルシステムにある 検証：クエリーレイテンシとの比率という形でデータベースファイルシステムレイテンシをトレースすると、ファイルシステム待ちでは5％未満の時間しか使っていないことがわかった 分析：このファイルシステムとディスクはクエリーの速度低下の原因ではない 例 問題：ホストＢからホストＣの時と比べ、ホストAからホストCにHTTP要求を送った時の方法が処理に時間がかかるのはなぜか 仮説：ホストAとBは別のデータセンターにある 予測：ホストAをホストBと同じデータセンターに移すと問題は解決する 検証：ホストAを移してパフォーマンスを計測する 分析：パフォーマンス障害は解決した。仮説に整合する 問題：ファイルシステムキャッシュのサイズを大きくしたらファイルシステムパフォーマンスが低下したのはなぜか 仮説：おおきなキャッシュは格納するレコードの数が多くなっており、小さなキャッシュよりも大きなキャッシュを管理するときの方が計算能力が必要になる 予測：レコードサイズを段階的に小さくしていき、同じ量のデータを格納するために使うレコードの数を増やすと、パフォーマンスが次第に低下する 検証：同じワークロードで段階的にレコードサイズを小さくして検証する 分析：結果をグラフにまとめると、予想と符合した結果になっている これはネガティブテストとよばれる</description></item><item><title>【2.28.5】問題の記述</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.28.5%E5%95%8F%E9%A1%8C%E3%81%AE%E8%A8%98%E8%BF%B0/</link><pubDate>Mon, 21 Aug 2023 15:04:08 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.28.5%E5%95%8F%E9%A1%8C%E3%81%AE%E8%A8%98%E8%BF%B0/</guid><description>サポートスタッフが問題に対処するときのルーチン作業
パフォーマンスに問題があると思ったのはなぜか？ このシステムは、良好なパフォーマンスで動いていたことはあるか？ 最近の変化は何か？ソフトウェアか、ハードウェアか、負荷か その問題はレイテンシか実行時間で表現できるか その問題は他の人やアプリケーションに影響を及ぼしているか 環境はどうなっているのか。どのソフトウェア、ハードウェアを使っているのか。バージョン、構成はどうか 新しい問題に立ち向かう時には、最初のアプローチとしてこれを使うべき</description></item><item><title>【2.28.4】アドホックチェックリストメソッド</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.28.4%E3%82%A2%E3%83%89%E3%83%9B%E3%83%83%E3%82%AF%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF%E3%83%AA%E3%82%B9%E3%83%88%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89/</link><pubDate>Mon, 21 Aug 2023 15:02:09 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.28.4%E3%82%A2%E3%83%89%E3%83%9B%E3%83%83%E3%82%AF%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF%E3%83%AA%E3%82%B9%E3%83%88%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89/</guid><description> あらかじめ用意されたチェックリストをステップ実行する システム管理者がよくやっている 頻繁に改訂して新鮮さを保つ必要がある 場当たり的とはいえ、チーム全員にチェック方法を周知するという点では有効 絶えずにリストを更新しなければならない</description></item><item><title>【2.28.3】誰か他人のせいにするアンチメソッド</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.28.3%E8%AA%B0%E3%81%8B%E4%BB%96%E4%BA%BA%E3%81%AE%E3%81%9B%E3%81%84%E3%81%AB%E3%81%99%E3%82%8B%E3%82%A2%E3%83%B3%E3%83%81%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89/</link><pubDate>Mon, 21 Aug 2023 15:00:04 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.28.3%E8%AA%B0%E3%81%8B%E4%BB%96%E4%BA%BA%E3%81%AE%E3%81%9B%E3%81%84%E3%81%AB%E3%81%99%E3%82%8B%E3%82%A2%E3%83%B3%E3%83%81%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89/</guid><description> 自分に責任のないシステムまたは環境のコンポーネントを見つけてくる そのコンポーネントに問題があるという仮説を立てる そのコンポーネントに対して責任を負うチームに問題を丸投げする 仮説の誤りが証明されたら、ステップ1に戻る このメソッドの犠牲者にならないために どのツールを実行し、結果をどのように解釈したかを示すスクリーンショットを要求する</description></item><item><title>【2.28.2】ランダム変更アンチメソッド</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.28.2%E3%83%A9%E3%83%B3%E3%83%80%E3%83%A0%E5%A4%89%E6%9B%B4%E3%82%A2%E3%83%B3%E3%83%81%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89/</link><pubDate>Mon, 21 Aug 2023 14:58:35 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.28.2%E3%83%A9%E3%83%B3%E3%83%80%E3%83%A0%E5%A4%89%E6%9B%B4%E3%82%A2%E3%83%B3%E3%83%81%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89/</guid><description> どこに問題があるかを適当に推測し、その問題が消えるまで適当に変更を加える で、適当に指標を見る 時間がかかり、無意味なチューニングを抱えてしまうリスクがある</description></item><item><title>【2.28.1】街灯のアンチメソッド</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.28.1%E8%A1%97%E7%81%AF%E3%81%AE%E3%82%A2%E3%83%B3%E3%83%81%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89/</link><pubDate>Mon, 21 Aug 2023 14:56:05 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.28.1%E8%A1%97%E7%81%AF%E3%81%AE%E3%82%A2%E3%83%B3%E3%83%81%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89/</guid><description> まともなメソドロジが欠如している状態のこと 適当な可観測性ツールを使って、手当たり次第にチェックすること パラメータをランダムに変更してチューニングすること 街灯効果というバイアスより命名</description></item><item><title>【2.28】メソドロジ</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.28%E3%83%A1%E3%82%BD%E3%83%89%E3%83%AD%E3%82%B8/</link><pubDate>Mon, 21 Aug 2023 14:54:09 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.28%E3%83%A1%E3%82%BD%E3%83%89%E3%83%AD%E3%82%B8/</guid><description> どこから分析を始め、どのように分析を進めていくか 問題へのアプローチの手順のことをメソドロジという アンチパターンのメソドロジも存在する</description></item><item><title>【2.27.2】ワークロード分析</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.27.2%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%89%E5%88%86%E6%9E%90/</link><pubDate>Mon, 21 Aug 2023 14:51:10 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.27.2%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%89%E5%88%86%E6%9E%90/</guid><description> アプリケーションのパフォーマンスを調べる
実施者
アプリケーションとその構成に責任を負う人 対象
要求：与えられたワークロード レイテンシ：アプリケーションの応答時間 完了：エラー探し ワークロードの特性の調査も対象に含まれる
指標
レイテンシ このコンテキストでは応答時間と同じ意味でつかわれる スループット 秒あたりのトランザクション数など</description></item><item><title>【2.27.1】リソース分析</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.27.1%E3%83%AA%E3%82%BD%E3%83%BC%E3%82%B9%E5%88%86%E6%9E%90/</link><pubDate>Mon, 21 Aug 2023 14:47:25 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.27.1%E3%83%AA%E3%82%BD%E3%83%BC%E3%82%B9%E5%88%86%E6%9E%90/</guid><description> システムリソースの分析から始める
実施者
物理環境のリソースに対して責任を負うシステム管理者 作業内容
パフォーマンス障害の調査 キャパシティプランニング リソース分析に適した指標
IOPS スループット 使用率 飽和度 ツール
vmstat(8) iostat(1) mpstat(1)</description></item><item><title>【2.27】視点</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.27%E8%A6%96%E7%82%B9/</link><pubDate>Mon, 21 Aug 2023 14:44:36 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.27%E8%A6%96%E7%82%B9/</guid><description> パフォーマンス分析の視点
ワークロード分析 リソース分析 ワークロード分析
アプリケーションにワークロードを与え、下のレイヤーに順番に降りて行って分析を行う トップダウン リソース分析
デバイスから順番にリソースを分析していく ボトムアップ</description></item><item><title>【2.26】Known Unknowns</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.26known-unknowns/</link><pubDate>Mon, 21 Aug 2023 14:42:29 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.26known-unknowns/</guid><description> Known-Knowns 知っていること パフォーマンス指標がわかっていて、現在の値も知っている場合 Known-Unknowns 知らないことがわかっていること Unknowns-Unknowns 知らないことを知らないこと</description></item><item><title>【30】実践的な構造を作る</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/30%E5%AE%9F%E8%B7%B5%E7%9A%84%E3%81%AA%E6%A7%8B%E9%80%A0%E3%82%92%E4%BD%9C%E3%82%8B/</link><pubDate>Mon, 21 Aug 2023 03:33:58 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/30%E5%AE%9F%E8%B7%B5%E7%9A%84%E3%81%AA%E6%A7%8B%E9%80%A0%E3%82%92%E4%BD%9C%E3%82%8B/</guid><description>do let pat = &amp;#34;{1 0/2 1 0 1 0 1/2 1 0 0 1/3}%8&amp;#34; inverse 1 = 0 inverse 0 = 1 d1 $ whenmod 16 15 (rev) $ sometimesBy 0.4 (jux (0.125 ~&amp;gt;)) $ sometimesBy 0.1 (1.25 &amp;lt;~) $ stack [ sound &amp;#34;bd:3*2&amp;#34; # gain &amp;#34;1.7&amp;#34;, sound &amp;#34;~ [cp hc] ~ bass&amp;#34;, gain pat # sound &amp;#34;glitch&amp;#34; # n (irand 20), gain (inverse &amp;lt;$&amp;gt; pat) # sound &amp;#34;super808&amp;#34; # n (irand 12), sound &amp;#34;superzow(3, 8, {0, 3})&amp;#34; # n (&amp;#34;{0, &amp;lt;4 5&amp;gt;/4, &amp;lt;7 9&amp;gt;/8}&amp;#34; - &amp;#34;{19, 12, 5, 0}&amp;#34; + &amp;#34;&amp;lt;0 4 7 9&amp;gt;/16&amp;#34;) # sustain &amp;#34;{0.</description></item><item><title>【29】複数のパターンの作成</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/29%E8%A4%87%E6%95%B0%E3%81%AE%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E3%81%AE%E4%BD%9C%E6%88%90/</link><pubDate>Mon, 21 Aug 2023 03:27:23 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/29%E8%A4%87%E6%95%B0%E3%81%AE%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E3%81%AE%E4%BD%9C%E6%88%90/</guid><description> パターン自体をリストにすることで、複数のパターンを同時に演奏したり順番を切り替えたりすることができる catを使用する d1 $ cat [ sound &amp;#34;ifdrum(5, 8)&amp;#34; # n &amp;#34;(0 1 2 3)%8&amp;#34;, sound &amp;#34;bd*2 [cp hc] ~ glitch&amp;#34; ] d1 $ cat [ sound &amp;#34;ifdrums(5, 8)&amp;#34; # n &amp;#34;{0 1 2 3}%8&amp;#34;, sound &amp;#34;bd*2 [cp hc] ~ glitch&amp;#34;, sound &amp;#34;[~ casio*2] [~ hc*4]&amp;#34; ] stackで同時に演奏できる</description></item><item><title>【28】バイナリパターンの作成</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/28%E3%83%90%E3%82%A4%E3%83%8A%E3%83%AA%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E3%81%AE%E4%BD%9C%E6%88%90/</link><pubDate>Mon, 21 Aug 2023 03:21:43 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/28%E3%83%90%E3%82%A4%E3%83%8A%E3%83%AA%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E3%81%AE%E4%BD%9C%E6%88%90/</guid><description>パターンAの0と1が反転したパターンをバイナリパターンという let inverse 1 = 0 inverse 0 = 1 do let inverse 1 = 0 inverse 0 = 1 pat1 = &amp;#34;{1 0 0 1 0 1 0 1/2 1 0 0 1/3}%8&amp;#34; d1 $ gain pat1 # sound &amp;#34;bd&amp;#34; d2 $ gain (inverse &amp;lt;$&amp;gt; pat1) # sound &amp;#34;cp&amp;#34; do let inverse 1 = 0 inverse 0 = 1 pat1 = &amp;#34;{1 0 0 1 0 1 0 1/2 1 0 0 1/3}%8&amp;#34; d1 $ sometimesBy 0.</description></item><item><title>【27】パターンを変数として格納</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/27%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E3%82%92%E5%A4%89%E6%95%B0%E3%81%A8%E3%81%97%E3%81%A6%E6%A0%BC%E7%B4%8D/</link><pubDate>Mon, 21 Aug 2023 02:42:42 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/27%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E3%82%92%E5%A4%89%E6%95%B0%E3%81%A8%E3%81%97%E3%81%A6%E6%A0%BC%E7%B4%8D/</guid><description>let pat1 = &amp;#34;[1 0 1 0 1 1 0 0]&amp;#34; d1 $ gain pat1 # sound &amp;#34;bd&amp;#34; 変数の代入とその演奏は、doを使用して1つのブロックにすることが可能 do let pat1 = &amp;#34;[1 0 1 0 1 1 0 0]&amp;#34; d1 $ gain pat1 # sound &amp;#34;bd&amp;#34; do let pat1 = &amp;#34;[1 0 1*2 0 1/2 1 0 0]&amp;#34; d1 $ gain pat1 # sound &amp;#34;bd&amp;#34; do let pat1 = &amp;#34;{1 0 1 0 1/2 0 0 1}%8&amp;#34; pat2 = &amp;#34;{1 0 0 1 0 1 0 1/2 1 0 0 1/3}%8&amp;#34; d1 $ gain pat1 # sound &amp;#34;bd&amp;#34; d2 $ gain pat2 # sound &amp;#34;cp&amp;#34;</description></item><item><title>【26】乱数</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/26%E4%B9%B1%E6%95%B0/</link><pubDate>Mon, 21 Aug 2023 02:32:25 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/26%E4%B9%B1%E6%95%B0/</guid><description>irandで乱数を発生させることができる d1 $ sound &amp;#34;[bd(3, 8), cp(3, 8, 3), tabla2(5, 8, 4)]&amp;#34; # n (irand 12) # pan (rand) サンプルの種類を乱数で変化させている 左右の低位をランダムで変化させている d1 $ sound &amp;#34;[bd(3, 8), cp(3, 8, 3), tabla2(5, 8, 4)]&amp;#34; # n (irand 12) # pan (rand) # lpf (scale 100 8000 $rand) カットオフ周波数の値を100~8000でランダムに変化させている 今はscaleじゃなくてrangeを使うらしい scalaからrange使ったら変わったわ 指定した数値の中から1つをランダムで選択する場合は、chooseを使う d1 $ sound &amp;#34;[bd(3, 8), cp(3, 8, 3), tabla2(5, 8, 4)]&amp;#34; # pan (rand) # n (irand 12) # up (choose [0, 4, 5, 7]) d1 $ jux ((choose[0.</description></item><item><title>【25】ユークリッドシーケンス</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/25%E3%83%A6%E3%83%BC%E3%82%AF%E3%83%AA%E3%83%83%E3%83%89%E3%82%B7%E3%83%BC%E3%82%B1%E3%83%B3%E3%82%B9/</link><pubDate>Mon, 21 Aug 2023 02:25:34 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/25%E3%83%A6%E3%83%BC%E3%82%AF%E3%83%AA%E3%83%83%E3%83%89%E3%82%B7%E3%83%BC%E3%82%B1%E3%83%B3%E3%82%B9/</guid><description> ユークリッドの互除法をパターンの生成に応用したもの
bd(3, 8)
[1 0 0 1 0 0 1 0]になる bd(5, 8)
[1 0 1 1 0 1 1 0]になる 中身のロジック
bd(3, 8)のとき [1 1 1 0 0 0 0 0] [1 0] [1 0] [1 0] [0] [0] [1 0 0] [1 0 0] [1 0] [1 0 0 1 0 0 1 0]になる 3つ目の引数をつけると、その数値だけパターンを右方向にシフトできる</description></item><item><title>【24.5】vowelで指定した母音の音で共鳴させる</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/24.5vowel%E3%81%A7%E6%8C%87%E5%AE%9A%E3%81%97%E3%81%9F%E6%AF%8D%E9%9F%B3%E3%81%AE%E9%9F%B3%E3%81%A7%E5%85%B1%E9%B3%B4%E3%81%95%E3%81%9B%E3%82%8B/</link><pubDate>Mon, 21 Aug 2023 02:14:03 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/24.5vowel%E3%81%A7%E6%8C%87%E5%AE%9A%E3%81%97%E3%81%9F%E6%AF%8D%E9%9F%B3%E3%81%AE%E9%9F%B3%E3%81%A7%E5%85%B1%E9%B3%B4%E3%81%95%E3%81%9B%E3%82%8B/</guid><description>d1 $ sound &amp;#34;bd*2 [cp*2 hc*3]&amp;#34; # gain &amp;#34;1.5 [1.0 0.8]&amp;#34; # pan &amp;#34;0.5 [0.1 0.9]&amp;#34; # delay &amp;#34;0.5&amp;#34; # delaytime &amp;#34;0.125&amp;#34; # delayfeedback &amp;#34;0.7&amp;#34; # lpf &amp;#34;800 8000 800 15000&amp;#34; # resonance &amp;#34;0.1 0.3 0.2 0.4&amp;#34; # shape &amp;#34;0.7&amp;#34; # vowel &amp;#34;u a i e&amp;#34; 若干の人の声感が出てる すげーおどろおどろしい どうやってんだこれ！！おもしろ</description></item><item><title>【24.4】shapeで音色をゆがませる</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/24.4shape%E3%81%A7%E9%9F%B3%E8%89%B2%E3%82%92%E3%82%86%E3%81%8C%E3%81%BE%E3%81%9B%E3%82%8B/</link><pubDate>Mon, 21 Aug 2023 02:11:38 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/24.4shape%E3%81%A7%E9%9F%B3%E8%89%B2%E3%82%92%E3%82%86%E3%81%8C%E3%81%BE%E3%81%9B%E3%82%8B/</guid><description> shapeを使うことで音色をゆがませる 全体の音量を上げながら圧縮を書けることで、迫力のある音質を生み出せる d1 $ sound &amp;#34;bd*2 [cp*2 hc*3]&amp;#34; # gain &amp;#34;1.5 [1.0 0.8]&amp;#34; # pan &amp;#34;0.5 [0.1 0.9]&amp;#34; # delay &amp;#34;0.5&amp;#34; # delaytime &amp;#34;0.125&amp;#34; # delayfeedback &amp;#34;0.7&amp;#34; # lpf &amp;#34;800 8000 800 15000&amp;#34; # resonance &amp;#34;0.1 0.3 0.2 0.4&amp;#34; # shape &amp;#34;0.7&amp;#34; 確かに音量が上がった 音質悪くなったな 迫力は出てる</description></item><item><title>【24.3.1】レゾナンスの指定</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/24.3.1%E3%83%AC%E3%82%BE%E3%83%8A%E3%83%B3%E3%82%B9%E3%81%AE%E6%8C%87%E5%AE%9A/</link><pubDate>Mon, 21 Aug 2023 02:08:54 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/24.3.1%E3%83%AC%E3%82%BE%E3%83%8A%E3%83%B3%E3%82%B9%E3%81%AE%E6%8C%87%E5%AE%9A/</guid><description> lfpにresonanceを組み合わせると、フィルターのレゾナンスを指定できる レゾナンスって何？ フィルターが周波数をカットする部分にピークをつける度合 d1 $ sound &amp;#34;bd*2 [cp*2 hc*3]&amp;#34; # gain &amp;#34;1.5 [1.0 0.8]&amp;#34; # pan &amp;#34;0.5 [0.1 0.9]&amp;#34; # delay &amp;#34;0.5&amp;#34; # delaytime &amp;#34;0.125&amp;#34; # delayfeedback &amp;#34;0.7&amp;#34; # lpf &amp;#34;800 8000 800 15000&amp;#34; # resonance &amp;#34;0.1 0.3 0.2 0.4&amp;#34; もっと籠るというか、トンネルの中の音みたいになった これもよく聞く奴 エッジの聞いた鋭角な印象の音になるらしい あまりおおきな数値にするとハウリングを起こすみたいだよ</description></item><item><title>【24.3】ローパスフィルターの適用</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/24.3%E3%83%AD%E3%83%BC%E3%83%91%E3%82%B9%E3%83%95%E3%82%A3%E3%83%AB%E3%82%BF%E3%83%BC%E3%81%AE%E9%81%A9%E7%94%A8/</link><pubDate>Mon, 21 Aug 2023 02:07:02 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/24.3%E3%83%AD%E3%83%BC%E3%83%91%E3%82%B9%E3%83%95%E3%82%A3%E3%83%AB%E3%82%BF%E3%83%BC%E3%81%AE%E9%81%A9%E7%94%A8/</guid><description> ローパスフィルターってなに？ 生成した音の低い周波数成分のみ通過させるもの d1 $ sound &amp;#34;bd*2 [cp*2 hc*3]&amp;#34; # gain &amp;#34;1.5 [1.0 0.8]&amp;#34; # pan &amp;#34;0.5 [0.1 0.9]&amp;#34; # delay &amp;#34;0.5&amp;#34; # delaytime &amp;#34;0.125&amp;#34; # delayfeedback &amp;#34;0.7&amp;#34; # lpf &amp;#34;800 8000 800 15000&amp;#34; 音がめっちゃ籠ってていい！！！！！ カッコいい音楽でよく使われてるやつだ！！！</description></item><item><title>【24.2】delayでディレイエフェクトを追加する</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/24.2delay%E3%81%A7%E3%83%87%E3%82%A3%E3%83%AC%E3%82%A4%E3%82%A8%E3%83%95%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B/</link><pubDate>Mon, 21 Aug 2023 02:03:11 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/24.2delay%E3%81%A7%E3%83%87%E3%82%A3%E3%83%AC%E3%82%A4%E3%82%A8%E3%83%95%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B/</guid><description> delayとdelaytimeでディレイの遅延時間を指定できる delayfeedbuckでディレイの続く長さを変化させられる d1 $ sound &amp;#34;bd*2 [cp*2 hc*3]&amp;#34; # gain &amp;#34;1.5 [1.0 0.8]&amp;#34; # pan &amp;#34;0.5 [0.1 0.9]&amp;#34; # delay &amp;#34;0.5&amp;#34; # delaytime &amp;#34;0.125&amp;#34; # delayfeedback &amp;#34;0.7&amp;#34;</description></item><item><title>【24.1】音量を増やす</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/24.1%E9%9F%B3%E9%87%8F%E3%82%92%E5%A2%97%E3%82%84%E3%81%99/</link><pubDate>Mon, 21 Aug 2023 02:00:28 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/24.1%E9%9F%B3%E9%87%8F%E3%82%92%E5%A2%97%E3%82%84%E3%81%99/</guid><description> gainで音量を増やせる 左右の定位をpanで指定できる 定位ってなんやろうな、音の高さ？ gain &amp;quot;1.5 [1.0 0.8]&amp;quot; これbdだけ大音量になってよい</description></item><item><title>【24】リズムパターンにエフェクトをかける</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/24%E3%83%AA%E3%82%BA%E3%83%A0%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E3%81%AB%E3%82%A8%E3%83%95%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E3%81%8B%E3%81%91%E3%82%8B/</link><pubDate>Mon, 21 Aug 2023 01:58:42 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/24%E3%83%AA%E3%82%BA%E3%83%A0%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E3%81%AB%E3%82%A8%E3%83%95%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E3%81%8B%E3%81%91%E3%82%8B/</guid><description> 生成したパターンの後に、#をつけることでエフェクトをかけることができる</description></item><item><title>【23】複数の変形を適用する</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/23%E8%A4%87%E6%95%B0%E3%81%AE%E5%A4%89%E5%BD%A2%E3%82%92%E9%81%A9%E7%94%A8%E3%81%99%E3%82%8B/</link><pubDate>Mon, 21 Aug 2023 01:56:06 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/23%E8%A4%87%E6%95%B0%E3%81%AE%E5%A4%89%E5%BD%A2%E3%82%92%E9%81%A9%E7%94%A8%E3%81%99%E3%82%8B/</guid><description> tidalcyclesでは行間を空けない限りは改行しても1つのコードブロックとみなされる d1 $ sometimesBy 0.4 (rev) $ whenmod 8 6 (slow 2) $ sound &amp;#34;bd*2 [cp*2 hc*3]</description></item><item><title>【22】変形させる確率を指定する</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/22%E5%A4%89%E5%BD%A2%E3%81%95%E3%81%9B%E3%82%8B%E7%A2%BA%E7%8E%87%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%99%E3%82%8B/</link><pubDate>Mon, 21 Aug 2023 01:54:09 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/22%E5%A4%89%E5%BD%A2%E3%81%95%E3%81%9B%E3%82%8B%E7%A2%BA%E7%8E%87%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%99%E3%82%8B/</guid><description> sometimesBy関数で変化を適用させる関数を定義できる sometimes: 0.5 often : 0.75 rarely: 0.25 almostNever: 0.1 almostAlways: 0.9</description></item><item><title>【21.1】whenmod関数でもう少し複雑にパターンを変形させる</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/21.1whenmod%E9%96%A2%E6%95%B0%E3%81%A7%E3%82%82%E3%81%86%E5%B0%91%E3%81%97%E8%A4%87%E9%9B%91%E3%81%AB%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E3%82%92%E5%A4%89%E5%BD%A2%E3%81%95%E3%81%9B%E3%82%8B/</link><pubDate>Mon, 21 Aug 2023 01:51:43 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/21.1whenmod%E9%96%A2%E6%95%B0%E3%81%A7%E3%82%82%E3%81%86%E5%B0%91%E3%81%97%E8%A4%87%E9%9B%91%E3%81%AB%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E3%82%92%E5%A4%89%E5%BD%A2%E3%81%95%E3%81%9B%E3%82%8B/</guid><description> whenmod関数は、2つの引数を使用する d1 $ whenmod 8 6 (fast 2) $ sound &amp;quot;bd*2 [cp*2 hc*3]&amp;quot; 最初に指定した引数の数だけループを繰り返し、そのループ回数が2つ目の引数を超えたら変化を適用する</description></item><item><title>【21】パターンを変形させるタイミングを指定する</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/21%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E3%82%92%E5%A4%89%E5%BD%A2%E3%81%95%E3%81%9B%E3%82%8B%E3%82%BF%E3%82%A4%E3%83%9F%E3%83%B3%E3%82%B0%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%99%E3%82%8B/</link><pubDate>Mon, 21 Aug 2023 01:36:08 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/21%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E3%82%92%E5%A4%89%E5%BD%A2%E3%81%95%E3%81%9B%E3%82%8B%E3%82%BF%E3%82%A4%E3%83%9F%E3%83%B3%E3%82%B0%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%99%E3%82%8B/</guid><description> slowやrevなどを指定すると、変化が継続する 単調な印象になる d1 $ every 4 (rev) $ sound &amp;quot;bd*2 [cp*2 hc*3] everyをの2つ目の引数に関数をしていすることで、パターンを変化させるタイミングを指定できる</description></item><item><title>【20】左右別々に変化させる</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/20%E5%B7%A6%E5%8F%B3%E5%88%A5%E3%80%85%E3%81%AB%E5%A4%89%E5%8C%96%E3%81%95%E3%81%9B%E3%82%8B/</link><pubDate>Mon, 21 Aug 2023 01:33:33 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/20%E5%B7%A6%E5%8F%B3%E5%88%A5%E3%80%85%E3%81%AB%E5%A4%89%E5%8C%96%E3%81%95%E3%81%9B%E3%82%8B/</guid><description> juxで、変化を右チャンネルだけに適用できる jux (iter 8) $ sound &amp;quot;bd*2 [cp*2 hc*3] これカッコいいな</description></item><item><title>【19】パターンを少しずつずらしていく</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/19%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E3%82%92%E5%B0%91%E3%81%97%E3%81%9A%E3%81%A4%E3%81%9A%E3%82%89%E3%81%97%E3%81%A6%E3%81%84%E3%81%8F/</link><pubDate>Mon, 21 Aug 2023 01:29:41 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/19%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E3%82%92%E5%B0%91%E3%81%97%E3%81%9A%E3%81%A4%E3%81%9A%E3%82%89%E3%81%97%E3%81%A6%E3%81%84%E3%81%8F/</guid><description> iterを使うことで、時間のずれを少しずつずらしていく iterは、引数で指定した分割数でパターンを分割して演奏する サイクルが再生するたび、パターンの開始地点を1つ後ろにシフトしていく d1 $ iter 4 $ sound &amp;quot;bd cp bass hc&amp;quot; bd cp bass hc cp bass hc bd bass hc bd cp hc bd cp bass</description></item><item><title>【18】時間をずらす</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/18%E6%99%82%E9%96%93%E3%82%92%E3%81%9A%E3%82%89%E3%81%99/</link><pubDate>Mon, 21 Aug 2023 01:25:50 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/18%E6%99%82%E9%96%93%E3%82%92%E3%81%9A%E3%82%89%E3%81%99/</guid><description> ~&amp;gt;, &amp;lt;~はタイムシフトができる 再生のタイミングを指定した数値で進めたり遅らせたりできる d1 $ every 4 (0.25 ~&amp;gt;) $ sound &amp;quot;bd*2 [cp*2 hc*3]&amp;quot; 4回に1度、演奏を1/4サイクル進めて再生される</description></item><item><title>【17】パターンの反転</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/17%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E3%81%AE%E5%8F%8D%E8%BB%A2/</link><pubDate>Mon, 21 Aug 2023 01:23:55 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/17%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E3%81%AE%E5%8F%8D%E8%BB%A2/</guid><description> revでパターンを反転できる d1 $ rev $ sound &amp;quot;bd*2 [cp*2 hc*3] 以下のパターンと同じになる d1 $ sound &amp;quot;[hc*3 cp*2] bd*2</description></item><item><title>【16】パターンの再生スピードの変更</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/16%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E3%81%AE%E5%86%8D%E7%94%9F%E3%82%B9%E3%83%94%E3%83%BC%E3%83%89%E3%81%AE%E5%A4%89%E6%9B%B4/</link><pubDate>Mon, 21 Aug 2023 01:21:04 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/16%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E3%81%AE%E5%86%8D%E7%94%9F%E3%82%B9%E3%83%94%E3%83%BC%E3%83%89%E3%81%AE%E5%A4%89%E6%9B%B4/</guid><description> パターンの先頭にslowを追加することで再生スピードをスローダウンできる 逆にfastを追加すると再生スピードを速くできる d1 $ slow 2 $ sound &amp;quot;bd*2 [cp*2, hc*3]&amp;quot;</description></item><item><title>【15】パターンの再生スピードの変更</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/15%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E3%81%AE%E5%86%8D%E7%94%9F%E3%82%B9%E3%83%94%E3%83%BC%E3%83%89%E3%81%AE%E5%A4%89%E6%9B%B4/</link><pubDate>Mon, 21 Aug 2023 01:05:40 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/15%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E3%81%AE%E5%86%8D%E7%94%9F%E3%82%B9%E3%83%94%E3%83%BC%E3%83%89%E3%81%AE%E5%A4%89%E6%9B%B4/</guid><description/></item><item><title>【14】リズムを揃えたパターンの並列（ポリメーター）</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/14%E3%83%AA%E3%82%BA%E3%83%A0%E3%82%92%E6%8F%83%E3%81%88%E3%81%9F%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E3%81%AE%E4%B8%A6%E5%88%97%E3%83%9D%E3%83%AA%E3%83%A1%E3%83%BC%E3%82%BF%E3%83%BC/</link><pubDate>Mon, 21 Aug 2023 00:57:32 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/14%E3%83%AA%E3%82%BA%E3%83%A0%E3%82%92%E6%8F%83%E3%81%88%E3%81%9F%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E3%81%AE%E4%B8%A6%E5%88%97%E3%83%9D%E3%83%AA%E3%83%A1%E3%83%BC%E3%82%BF%E3%83%BC/</guid><description> {}で囲むことで、2つのリズムパターンをそろえて演奏できる
&amp;ldquo;[bc cp, bass glitch hc]&amp;rdquo;
2拍子に合わされるため、bass glitch, hcが1つ余る スライドしながら演奏される [bd, bass] [cp, glitch] [bd, hc] [cp, bass] [bd, glitch] [cp, hc]... このようなリズムをポリメーターという</description></item><item><title>【13】パターンを並列させる（ポリリズム）</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/13%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E3%82%92%E4%B8%A6%E5%88%97%E3%81%95%E3%81%9B%E3%82%8B%E3%83%9D%E3%83%AA%E3%83%AA%E3%82%BA%E3%83%A0/</link><pubDate>Mon, 21 Aug 2023 00:52:40 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/13%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E3%82%92%E4%B8%A6%E5%88%97%E3%81%95%E3%81%9B%E3%82%8B%E3%83%9D%E3%83%AA%E3%83%AA%E3%82%BA%E3%83%A0/</guid><description> []の中で「,」で区切ると、[]の中で並列で演奏される d1 $ sound &amp;quot;[bd*2, cp hc cp hc*2]</description></item><item><title>【12】リズムのスローダウン</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/12%E3%83%AA%E3%82%BA%E3%83%A0%E3%81%AE%E3%82%B9%E3%83%AD%E3%83%BC%E3%83%80%E3%82%A6%E3%83%B3/</link><pubDate>Mon, 21 Aug 2023 00:47:35 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/12%E3%83%AA%E3%82%BA%E3%83%A0%E3%81%AE%E3%82%B9%E3%83%AD%E3%83%BC%E3%83%80%E3%82%A6%E3%83%B3/</guid><description> /で分割することでリズムがスローダウンする</description></item><item><title>【11】リズムの繰り返し</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/11%E3%83%AA%E3%82%BA%E3%83%A0%E3%81%AE%E7%B9%B0%E3%82%8A%E8%BF%94%E3%81%97/</link><pubDate>Mon, 21 Aug 2023 00:44:25 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/11%E3%83%AA%E3%82%BA%E3%83%A0%E3%81%AE%E7%B9%B0%E3%82%8A%E8%BF%94%E3%81%97/</guid><description> *を使うことで、繰り返しを一気に指定できる d1 $ sound &amp;quot;bd*2&amp;quot;</description></item><item><title>【10】裏拍を使う</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/10%E8%A3%8F%E6%8B%8D%E3%82%92%E4%BD%BF%E3%81%86/</link><pubDate>Mon, 21 Aug 2023 00:40:25 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/10%E8%A3%8F%E6%8B%8D%E3%82%92%E4%BD%BF%E3%81%86/</guid><description> []を使うことでリズムがさらに分割される d1 $ sound &amp;quot;bd [hc cp] [~ bd] hc d1 $ sound &amp;quot;bd [hc [cp cp] [~ bd] hc] みたいにリズムを入れ子状にできる</description></item><item><title>【9】休符</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/9%E4%BC%91%E7%AC%A6/</link><pubDate>Mon, 21 Aug 2023 00:37:43 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/9%E4%BC%91%E7%AC%A6/</guid><description> ~を使うと休符になる d1 $ sound &amp;quot;bd ~ ~ cp&amp;quot;</description></item><item><title>【8】演奏の停止</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/8%E6%BC%94%E5%A5%8F%E3%81%AE%E5%81%9C%E6%AD%A2/</link><pubDate>Mon, 21 Aug 2023 00:27:37 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/8%E6%BC%94%E5%A5%8F%E3%81%AE%E5%81%9C%E6%AD%A2/</guid><description> コネクションの後にsilenceをつけると、コネクションが停止する d3 silence 全体を停止させる場合はhushをつける　</description></item><item><title>【7】パターンのトラック</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/7%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E3%81%AE%E3%83%88%E3%83%A9%E3%83%83%E3%82%AF/</link><pubDate>Mon, 21 Aug 2023 00:23:45 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/7%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E3%81%AE%E3%83%88%E3%83%A9%E3%83%83%E3%82%AF/</guid><description>d1 $ sound &amp;#34;bd cp bd cp&amp;#34; d2 $ sound &amp;#34;hc hc&amp;#34; d3 $ sound &amp;#34;arpy&amp;#34; d1とd2の間には空行を入れる トラックを並行して演奏できる</description></item><item><title>【6】Synth（楽器）を演奏する</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/6synth%E6%A5%BD%E5%99%A8%E3%82%92%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B/</link><pubDate>Mon, 21 Aug 2023 00:00:47 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/6synth%E6%A5%BD%E5%99%A8%E3%82%92%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B/</guid><description> bd, cp, glitch などはサンプラーを再生している 波形をリアルタイムに生成する楽器をシンセサイザーという sc3-pluginでインストールしたシンセを鳴らしてみる d1 $ n &amp;#34;&amp;lt;f&amp;#39;maj g&amp;#39;maj e&amp;#39;min a&amp;#39;min&amp;gt;&amp;#34; # sound &amp;#34;supermandolin&amp;#34; # room 0.5 # size 0.9 d1 $ sound &amp;quot;supersaw&amp;quot;では鳴らなかった なんで？環境問題かな</description></item><item><title>【5】サンプル音源はどこにあるの？</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/5%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E9%9F%B3%E6%BA%90%E3%81%AF%E3%81%A9%E3%81%93%E3%81%AB%E3%81%82%E3%82%8B%E3%81%AE/</link><pubDate>Sun, 20 Aug 2023 23:53:24 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/5%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E9%9F%B3%E6%BA%90%E3%81%AF%E3%81%A9%E3%81%93%E3%81%AB%E3%81%82%E3%82%8B%E3%81%AE/</guid><description> SuperColiderのメニューより File &amp;gt; Open user support directory downloaded-quarks &amp;gt; Dirt-Samples 格納されているフォルダ名が、TidalCycleから指定するパターンに対応している 順番は、名前順でソートして一番した順 :numで番号で指定できる パターンの後に# n &amp;quot;num&amp;quot;で指定できる # n &amp;quot;0 1 2 3&amp;quot;みたいな書き方も可能</description></item><item><title>【4】1小節の中のリズムを分割</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/41%E5%B0%8F%E7%AF%80%E3%81%AE%E4%B8%AD%E3%81%AE%E3%83%AA%E3%82%BA%E3%83%A0%E3%82%92%E5%88%86%E5%89%B2/</link><pubDate>Sun, 20 Aug 2023 23:51:38 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/41%E5%B0%8F%E7%AF%80%E3%81%AE%E4%B8%AD%E3%81%AE%E3%83%AA%E3%82%BA%E3%83%A0%E3%82%92%E5%88%86%E5%89%B2/</guid><description> &amp;quot;で囲まれた部分が1小節になる そこにサンプルを配置していくと、拍が均等に分割される d1 $ sound &amp;quot;bd&amp;quot; d1 $ sound &amp;quot;bd cp bd cp&amp;quot;</description></item><item><title>【3.1】クラップを鳴らす</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/3.1%E3%82%AF%E3%83%A9%E3%83%83%E3%83%97%E3%82%92%E9%B3%B4%E3%82%89%E3%81%99/</link><pubDate>Sun, 20 Aug 2023 23:48:44 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/3.1%E3%82%AF%E3%83%A9%E3%83%83%E3%83%97%E3%82%92%E9%B3%B4%E3%82%89%E3%81%99/</guid><description> d1 $ sound &amp;quot;bd cp&amp;quot; d1のような小節単位の区切りをコネクションという</description></item><item><title>【3】TidalCycleでサンプルのバスドラムを鳴らす</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/3tidalcycle%E3%81%A7%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%81%AE%E3%83%90%E3%82%B9%E3%83%89%E3%83%A9%E3%83%A0%E3%82%92%E9%B3%B4%E3%82%89%E3%81%99/</link><pubDate>Sun, 20 Aug 2023 23:45:58 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/3tidalcycle%E3%81%A7%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%81%AE%E3%83%90%E3%82%B9%E3%83%89%E3%83%A9%E3%83%A0%E3%82%92%E9%B3%B4%E3%82%89%E3%81%99/</guid><description> d1 $ sound &amp;quot;bd&amp;quot; d1は生成したパターンのSuperDirtへのコネクションを意味している d1 ~ d9まで存在している TidalCycleでは9個のトラックを並行して演奏できる soundが関数名で、bdが引数</description></item><item><title>【2】TidalCyclesの構成要素</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/2tidalcycles%E3%81%AE%E6%A7%8B%E6%88%90%E8%A6%81%E7%B4%A0/</link><pubDate>Sun, 20 Aug 2023 22:44:05 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/2tidalcycles%E3%81%AE%E6%A7%8B%E6%88%90%E8%A6%81%E7%B4%A0/</guid><description> Haskell: 関数型プログラミング言語 TidalCycles: ライブコーディングのためのHaskellライブラリ SuperColider: 音響生成のためのエンジン SuperDirt: サンプル音源と楽器のエンジン テキストエディタ テキストエディタ: コードを記述・編集 ↓ Haskell + TidalCycles: パターンを生成 ↓ SuperColider + SuperDirt: 音響生成 ``</description></item><item><title>【1】TidalCyclesとは</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/1tidalcycles%E3%81%A8%E3%81%AF/</link><pubDate>Sun, 20 Aug 2023 22:38:36 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/1tidalcycles%E3%81%A8%E3%81%AF/</guid><description> TidalCyclesとは？
パターンをライブコーディングするためのプログラミング言語 単純なパターンの相互作用によって複雑性の探索を可能とする Haskellのライブラリとして実装されている
TIsalCycle自体に音楽を生成する機能はない Super DirtというSuper Coliderの機能を使用して音を生成している</description></item><item><title>【書誌】演奏するプログラミング、ライブコーディングの思想と実践</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/%E6%9B%B8%E8%AA%8C%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E3%83%A9%E3%82%A4%E3%83%96%E3%82%B3%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E3%81%AE%E6%80%9D%E6%83%B3%E3%81%A8%E5%AE%9F%E8%B7%B5/</link><pubDate>Sun, 20 Aug 2023 22:36:29 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/%E6%9B%B8%E8%AA%8C%E6%BC%94%E5%A5%8F%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E3%83%A9%E3%82%A4%E3%83%96%E3%82%B3%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E3%81%AE%E6%80%9D%E6%83%B3%E3%81%A8%E5%AE%9F%E8%B7%B5/</guid><description>目次 Contents Chapter 1 ライブコーディングへようこそ 1-01　ライブコーディングとは 1-02　プログラミングの手法としてのライブコーディング 1-03　パフォーマンスとしてのライブコーディング 1-04　ライブコーディングの歴史と発展 1-05　ライブコーディングのための環境 1-06　なぜ今、ライブコーディングなのか インタビュー：アレックス・マクリーン Chapter 2 初級編　ライブコーディングに触れる ─ Sonic Pi 2-01　Sonic Piとは 2-02　ダウンロードとインストール 2-03　アプリケーションの起動 2-04　音を出してみる 2-05　同時に音を出す 2-06　時間構造を作る ─ 音符と休符 2-07　演奏を繰り返す ─ ループ 2-08　ライブコーディングへ！ ─ ライブループ 2-09　音色を変化させる 2-10　サンプルを使う 2-11　サンプルの再生スピード 2-12　音のオプション 2-13　エフェクトをかける 2-14　ランダム化 2-15　コイントスと条件文 2-16　反復とループ 2-17　リスト 2-18　コード（和音）とアルペジオ 2-19　スケール（音階） 2-20　マルチ・ライブループ 2-21　演奏の実践 ─ アルゴリズミック・テクノ Chapter 3 中級編　ライブコーディングをマスターする ─ TidalCycles 3-01　TidalCyclesとは 3-02　TidalCyclesのインストール概要 3-03　自動インストール ─ macOS 3-04　自動インストール ─ Windows 3-05　手動インストール ─ macOS＆Windows 3-06　TidalCyclesを動かしてみる 3-07　TidalCyclesはじめの一歩 3-08　リズムパターンを生み出す 3-09　リズムパターンを変形させる 3-10　リズムパターンにエフェクトをかける 3-11　アルゴリズミックにパターンを生成する 3-12　実践的な構造を作る TidalCycles 1.</description></item><item><title>【2.25.2】ホット、ウォーム、コールド</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.25.2%E3%83%9B%E3%83%83%E3%83%88%E3%82%A6%E3%82%A9%E3%83%BC%E3%83%A0%E3%82%B3%E3%83%BC%E3%83%AB%E3%83%89/</link><pubDate>Sat, 19 Aug 2023 04:10:18 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.25.2%E3%83%9B%E3%83%83%E3%83%88%E3%82%A6%E3%82%A9%E3%83%BC%E3%83%A0%E3%82%B3%E3%83%BC%E3%83%AB%E3%83%89/</guid><description> コールドキャッシュ 空、または不要なデータが格納されたキャッシュ ヒット率は0 ウォームキャッシュ ホットほどヒット率が高くない ホットキャッシュ よく要求されるデータ ウォーム度 キャッシュがどれくらい要求されているか</description></item><item><title>【2.25.1】アルゴリズム</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.25.1%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0/</link><pubDate>Sat, 19 Aug 2023 04:07:25 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.25.1%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0/</guid><description> キャッシュの限られた領域に何を格納するかは、キャッシュ管理アルゴリズムとポリシーで決まる キャッシュ管理ポリシー MRU LRU MFU LFU NFU</description></item><item><title>【2.25】キャッシング</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.25%E3%82%AD%E3%83%A3%E3%83%83%E3%82%B7%E3%83%B3%E3%82%B0/</link><pubDate>Sat, 19 Aug 2023 04:04:24 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.25%E3%82%AD%E3%83%A3%E3%83%83%E3%82%B7%E3%83%B3%E3%82%B0/</guid><description> 低速なストレージティアの処理結果を高速なストレージティアに格納して、すぐに参照できるようにすることをキャッシングという CPUはメインメモリのために、複数のティアのキャッシュを用意している キャッシュのパフォーマンスを知るための方法としては、ヒット率がある ヒット率 = ヒット / 全アクセス</description></item><item><title>【2.24】プロファイリング</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.24%E3%83%97%E3%83%AD%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AA%E3%83%B3%E3%82%B0/</link><pubDate>Sat, 19 Aug 2023 04:02:36 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.24%E3%83%97%E3%83%AD%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AA%E3%83%B3%E3%82%B0/</guid><description> 一定のインターバルでシステムをサンプリングし、それらのサンプルの集合を研究することをプロファイリングとよぶ</description></item><item><title>【2.23】飽和度</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.23%E9%A3%BD%E5%92%8C%E5%BA%A6/</link><pubDate>Sat, 19 Aug 2023 04:01:37 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.23%E9%A3%BD%E5%92%8C%E5%BA%A6/</guid><description> リソースが処理できる要求と比べてリソースに対する要求がどれくらい多いかを飽和度と呼ぶ</description></item><item><title>【2.22】使用率</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.22%E4%BD%BF%E7%94%A8%E7%8E%87/</link><pubDate>Sat, 19 Aug 2023 03:52:28 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.22%E4%BD%BF%E7%94%A8%E7%8E%87/</guid><description> 使用率とは、CPUやディスクがどれくらい使われているかをOSが示す時によく使われる 時間ベースの使用率は待ち行列理論が定義している
サーバーまたはリソースがビジー状態だった時間の平均的な割合
U = B / T Uが使用率、Tは観察を行った期間、BはＴの期間中システムがビジー状態だった時間の合計 iostat(1)でいうところの%b 能力ベースの使用率の定義
システムやコンポーネントは、ある水準のスループットを提供できる 持っている能力のうち、どのぐらいの割合を使っているかどうかを能力ベースの使用率という</description></item><item><title>【2.21.2】指標の問題点</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.21.2%E6%8C%87%E6%A8%99%E3%81%AE%E5%95%8F%E9%A1%8C%E7%82%B9/</link><pubDate>Sat, 19 Aug 2023 03:51:24 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.21.2%E6%8C%87%E6%A8%99%E3%81%AE%E5%95%8F%E9%A1%8C%E7%82%B9/</guid><description> ベンダーなどが提示してくる指標は完ぺきではない 誤解を招きやすく、信頼性も低い場合もある</description></item><item><title>【2.21.1】オーバーヘッド</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.21.1%E3%82%AA%E3%83%BC%E3%83%90%E3%83%BC%E3%83%98%E3%83%83%E3%83%89/</link><pubDate>Sat, 19 Aug 2023 03:49:31 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.21.1%E3%82%AA%E3%83%BC%E3%83%90%E3%83%BC%E3%83%98%E3%83%83%E3%83%89/</guid><description> パフォーマンス指標を獲得するためには、CPUサイクルを消費する必要がある これがオーバーヘッドの原因になることもある 観察者効果という</description></item><item><title>【2.21】パフォーマンス指標</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.21%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9%E6%8C%87%E6%A8%99/</link><pubDate>Sat, 19 Aug 2023 03:48:30 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.21%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9%E6%8C%87%E6%A8%99/</guid><description> パフォーマンス指標の例 スループット IOPS 使用率 レイテンシ</description></item><item><title>【2.20】スケーラビリティ</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.20%E3%82%B9%E3%82%B1%E3%83%BC%E3%83%A9%E3%83%93%E3%83%AA%E3%83%86%E3%82%A3/</link><pubDate>Sat, 19 Aug 2023 03:45:22 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.20%E3%82%B9%E3%82%B1%E3%83%BC%E3%83%A9%E3%83%93%E3%83%AA%E3%83%86%E3%82%A3/</guid><description> システムのパフォーマンスが負荷の増加にどの程度対応できるかをシステムのスケーラビリティという しばらくの間は線形増加 特定の位置まで達すると、リソースの競合が始まり、スループットが下がる ニーポイント 100％の使用率（飽和点）に達すると、ニーポイントになることがある</description></item><item><title>【2.19】負荷かアーキテクチャか</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.19%E8%B2%A0%E8%8D%B7%E3%81%8B%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3%E3%81%8B/</link><pubDate>Sat, 19 Aug 2023 03:43:22 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.19%E8%B2%A0%E8%8D%B7%E3%81%8B%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3%E3%81%8B/</guid><description> アプリケーションのパフォーマンスは、アーキテクチャと実装の問題でひどく悪化することがある アーキテクチャの問題か、実装の問題か、切り分けて考えないとパフォーマンス障害の原因は特定できない</description></item><item><title>【2.18】基準時の推奨値</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.18%E5%9F%BA%E6%BA%96%E6%99%82%E3%81%AE%E6%8E%A8%E5%A5%A8%E5%80%A4/</link><pubDate>Sat, 19 Aug 2023 03:40:43 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.18%E5%9F%BA%E6%BA%96%E6%99%82%E3%81%AE%E6%8E%A8%E5%A5%A8%E5%80%A4/</guid><description> 環境のパフォーマンス特性は時間と共に変化していく 特定の基準時でしかパラメーターの基準は有効ではない そのような推奨値を一覧で見られるようにすることで、チューニングすべきか調べるだけで話を済ませられるようになる パラメータを変更するときは、バージョン管理システムで履歴情報を残すと便利</description></item><item><title>【2.17】いつ分析を止めるか</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.17%E3%81%84%E3%81%A4%E5%88%86%E6%9E%90%E3%82%92%E6%AD%A2%E3%82%81%E3%82%8B%E3%81%8B/</link><pubDate>Sat, 19 Aug 2023 03:38:50 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.17%E3%81%84%E3%81%A4%E5%88%86%E6%9E%90%E3%82%92%E6%AD%A2%E3%82%81%E3%82%8B%E3%81%8B/</guid><description> いつ分析を止めるべきか？判断は難しい 筆者の考え パフォーマンス障害の大部分を説明できた時 見込まれるROIがコストよりも低い時 ほかにもっとROIが得られるものがあるとき</description></item><item><title>【2.16】適切性のレベル</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.16%E9%81%A9%E5%88%87%E6%80%A7%E3%81%AE%E3%83%AC%E3%83%99%E3%83%AB/</link><pubDate>Sat, 19 Aug 2023 02:07:31 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.16%E9%81%A9%E5%88%87%E6%80%A7%E3%81%AE%E3%83%AC%E3%83%99%E3%83%AB/</guid><description> パフォーマンスに対する要件は、組織や環境によって変わる パフォーマンスの専門的な能力のROIによって決まる パフォーマンスはエンドユーザーのエクスペリエンスの問題でもある パフォーマンスへの投資は必要</description></item><item><title>【2.15】チューニング</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.15%E3%83%81%E3%83%A5%E3%83%BC%E3%83%8B%E3%83%B3%E3%82%B0/</link><pubDate>Sat, 19 Aug 2023 02:01:27 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.15%E3%83%81%E3%83%A5%E3%83%BC%E3%83%8B%E3%83%B3%E3%82%B0/</guid><description> パフォーマンスのチューニングは、仕事が行われる場所から最も近いところでしたときに最も効果的になる アプリケーション層でのチューニングが効果的 デプロイ間隔が短い場合、正しさに重点が置かれ、パフォーマンスの問題は後回しになる可能性が高い 観察の場所として最も効果的とは言えない 遅いクエリーは、on-CPU時間やファイルシステム、ディスクI/Oから分かる場合が多い</description></item><item><title>【9】状態の追跡</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9%E3%81%8C%E3%81%8A%E3%82%82%E3%81%97%E3%82%8D%E3%81%84%E3%81%BB%E3%81%A9%E8%BA%AB%E3%81%AB%E3%81%A4%E3%81%8F%E6%9C%AC/9%E7%8A%B6%E6%85%8B%E3%81%AE%E8%BF%BD%E8%B7%A1/</link><pubDate>Sat, 19 Aug 2023 01:51:17 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9%E3%81%8C%E3%81%8A%E3%82%82%E3%81%97%E3%82%8D%E3%81%84%E3%81%BB%E3%81%A9%E8%BA%AB%E3%81%AB%E3%81%A4%E3%81%8F%E6%9C%AC/9%E7%8A%B6%E6%85%8B%E3%81%AE%E8%BF%BD%E8%B7%A1/</guid><description> メッセージの復号 あるメッセージがテキストストリームとして符号化されており、それを 1 文字ずつ読み込む。ストリー ムの中身はカンマで区切られた整数値の羅列で、個々の数値は C++の int 型で扱える範囲の正の数であ る。しかし、その数値がどの文字を表しているのかは、現在の復号モードによって変わる。モードは 3 種類あり、大文字・小文字・記号のいずれかになる。 大文字モードでは、個々の数値がアルファベットの大文字を表す。数値を 27 で割った余りがアルファ ベットの文字に対応する（1 を A とする）。たとえば、入力が 143 なら出力は H になる。143 を 27 で割った余りは 8 で、アルファベットの 8 番目の文字は H だからである。 小文字モードの場合も同じだが、アルファベットの小文字を表している。数値を 27 で割った余りが アルファベットの文字に対応する（1 を a とする）。たとえば、入力が 56 なら出力は b になる。57 を 27 で割った余りは 2 で、アルファベットの 2 番目の文字は b だからである。 記号モードの場合は、数値を 9 で割った余りを使う。この余りを表 2-3 にしたがって変換する。た とえば、19 は感嘆符になる。19 を 9 で割った余りは 1 だからである。 メッセージが始まった時点の復号モードは、大文字モードである。剰余演算（モードによって、27 あ るいは 9 のいずれかを使う）の結果が 0 になるたびに、復号モードが切り替わる。現在のモードが大文 字の場合は小文字モードへ、現在のモードが小文字の場合は記号モードへ、記号モードの場合は再び大文 字モードに戻る。 さっきの問題とめっちゃ似ている なんか競技プログラミングの初級問題みたい 月間競技プログラミングは役に立つ</description></item><item><title>【8】入力の処理</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9%E3%81%8C%E3%81%8A%E3%82%82%E3%81%97%E3%82%8D%E3%81%84%E3%81%BB%E3%81%A9%E8%BA%AB%E3%81%AB%E3%81%A4%E3%81%8F%E6%9C%AC/8%E5%85%A5%E5%8A%9B%E3%81%AE%E5%87%A6%E7%90%86/</link><pubDate>Sat, 19 Aug 2023 00:50:11 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9%E3%81%8C%E3%81%8A%E3%82%82%E3%81%97%E3%82%8D%E3%81%84%E3%81%BB%E3%81%A9%E8%BA%AB%E3%81%AB%E3%81%A4%E3%81%8F%E6%9C%AC/8%E5%85%A5%E5%8A%9B%E3%81%AE%E5%87%A6%E7%90%86/</guid><description>ルーンチェックサムの検証 ルーン式は、識別番号の検証によく使われる方式だ。元の数字の各桁に対して、1 桁おきにその数字を 2 倍する。そのあとで、各桁の数字を足していく（2 倍した結果が 2 桁になる数字があれば、十の位と 一の位をそれぞれ個別に足していく）。その合計が 10 で割り切れる場合に、識別番号は妥当なものであ ると見なす。 任意の長さの識別番号を受け取り、その値がルーン式で妥当かどうかを調べるプログラムを書こう。こ のプログラムでは、1 つの桁を読み込んだら次の桁に進む前に、その桁の処理を済ませなければいけない 偶数桁を2倍
2桁になるときは10の位と1の位を足す 難しいポイント
読み込む時は左から 処理するときは右から 2倍したら2桁になってしまったときの対応からやってみる
int doubleDigitValue(int digit) { int doubledDigit = digit * 2; int sum; if (doubledDigit &amp;gt;= 10) sum = 1 + doubledDigit % 10; else sum = doubledDigit; return sum; } 次に、識別番号の各桁を読み込む // 読み込み char digit; digit = cin.get() int sum = digit; // 7の場合、55が出力される cout &amp;lt;&amp;lt; sum; 数値 - &amp;lsquo;0&amp;rsquo;を使えばいい</description></item><item><title>【2.14】トレードオフ</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.14%E3%83%88%E3%83%AC%E3%83%BC%E3%83%89%E3%82%AA%E3%83%95/</link><pubDate>Fri, 18 Aug 2023 02:25:55 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.14%E3%83%88%E3%83%AC%E3%83%BC%E3%83%89%E3%82%AA%E3%83%95/</guid><description> パフォーマンスはITプロジェクトのトレードオフでは後回しになりがち CPUかメモリかを選ぶトレードオフが多い 主なトレードオフ ファイルシステムのレコードサイズ レコードサイズを小さくしてI/Oサイズに近づけると、ランダムI/Oのワークロードのパフォーマンスが上がる アプリケーション実行中のファイルシステムキャッシュをより効率的に使える レコードサイズを大きくすると、ファイルシステムのバックアップなど、ストリーミングのワークロードのパフォーマンスが上がる ネットワーク バッファサイズを小さくすると、接続ごとにメモリにかかるオーバーヘッドを削減できる バッファサイズを大きくすると、ネットワークのスループットが上がる</description></item><item><title>【2.13】タイムスケール</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.13%E3%82%BF%E3%82%A4%E3%83%A0%E3%82%B9%E3%82%B1%E3%83%BC%E3%83%AB/</link><pubDate>Fri, 18 Aug 2023 02:17:07 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.13%E3%82%BF%E3%82%A4%E3%83%A0%E3%82%B9%E3%82%B1%E3%83%BC%E3%83%AB/</guid><description> 発生源ごとのレイテンシの目安があれば、差の大きさがどの程度か比較して検討できる オペレーション レイテンシ 対比 1CPUサイクル 0.3n秒 1秒 レベル1キャッシュアクセス 0.9n秒 3秒 レベル2キャッシュアクセス 3n秒 10秒 レベル3キャッシュアクセス 10n秒 33秒 メインメモリアクセス 100n秒 6分 SSD I/O（フラッシュメモリ） 10 ~ 100μ秒 9 ~ 90時間 回転ディスクI/O 40m秒 4年 インターネット:サンフランシスコ - ニューヨーク 81m秒 8年 軽いハードウェア仮想化システムのブート 100m秒 11年 インターネット:サンフランシスコ - オーストラリア 183m秒 19年 OS仮想化システムのブート 1秒未満 105年 タイマーベースTCPパケット再送 1 ~ 3秒 105 ~ 317年 SCSIコマンドのタイムアウト 30秒 3000年 ハードウェア（HW）仮想化システムのブート 40秒 4000年 物理システムのリブート 5分 3,2000年</description></item><item><title>【2.12】時間の単位</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.12%E6%99%82%E9%96%93%E3%81%AE%E5%8D%98%E4%BD%8D/</link><pubDate>Fri, 18 Aug 2023 02:12:52 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.12%E6%99%82%E9%96%93%E3%81%AE%E5%8D%98%E4%BD%8D/</guid><description> 時間の単位 単位 略記法 1秒の何倍か 分 分 60 秒 秒 1 ミリ秒 m秒 1 * 10^-3 マイクロ秒 μ秒 1 * 10 ^ -6 ナノ秒 n秒 1 * 10 ^ -9 ピコ秒 p秒 1 * 10 ^ -12 ほかの指標をレイテンシか時間に変換すれば、それらは比較できるようになる</description></item><item><title>【2.11】キューイングシステム</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.11%E3%82%AD%E3%83%A5%E3%83%BC%E3%82%A4%E3%83%B3%E3%82%B0%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0/</link><pubDate>Fri, 18 Aug 2023 02:06:29 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.11%E3%82%AD%E3%83%A5%E3%83%BC%E3%82%A4%E3%83%B3%E3%82%B0%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0/</guid><description> コンポーネントやリソースの中には、キューイングシステムとしてモデリングできるものがある 待ち行列理論の分野で研究されている</description></item><item><title>【2.10】テスト対象システム</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.10%E3%83%86%E3%82%B9%E3%83%88%E5%AF%BE%E8%B1%A1%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0/</link><pubDate>Fri, 18 Aug 2023 02:02:33 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.10%E3%83%86%E3%82%B9%E3%83%88%E5%AF%BE%E8%B1%A1%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0/</guid><description> 入力 → テスト対象システム → 得られるパフォーマンス 摂動（干渉）が結果に影響を及ぼし得る 複数のシステムやサーバーが入力ワークロードを提供しているため、摂動の原因を特定するのは難しい</description></item><item><title>【2.9】キャッシュ</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.9%E3%82%AD%E3%83%A3%E3%83%83%E3%82%B7%E3%83%A5/</link><pubDate>Fri, 18 Aug 2023 01:59:56 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.9%E3%82%AD%E3%83%A3%E3%83%83%E3%82%B7%E3%83%A5/</guid><description> キャッシュ 限られた量のデータを重複して格納したりバッファリングしたりできる高速記憶領域 より低速なストレージティアと直接通信することを避けて、パフォーマンスを上げることを目的としている 経済的な理由から、キャッシュは低速ティアよりも小さい</description></item><item><title>【2.8】ワークロード</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.8%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%89/</link><pubDate>Fri, 18 Aug 2023 01:58:27 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.8%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%89/</guid><description> ワークロード システムに対する入力、またはシステムにかけられる負荷のこと データベースの場合 ワークロードはデータベースクエリーとクライアントから送られたコマンドから構成される</description></item><item><title>【2.7】ボトルネック</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.7%E3%83%9C%E3%83%88%E3%83%AB%E3%83%8D%E3%83%83%E3%82%AF/</link><pubDate>Fri, 18 Aug 2023 01:57:36 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.7%E3%83%9C%E3%83%88%E3%83%AB%E3%83%8D%E3%83%83%E3%82%AF/</guid><description> ボトルネック システムパフォーマンスに限界を与えているリソースのこと</description></item><item><title>【2.6】飽和度</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.6%E9%A3%BD%E5%92%8C%E5%BA%A6/</link><pubDate>Fri, 18 Aug 2023 01:56:53 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.6%E9%A3%BD%E5%92%8C%E5%BA%A6/</guid><description> 飽和度 リソースがキューイングした作業のうち、サービスを提供できていないものの割合</description></item><item><title>【2.5】使用率</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.5%E4%BD%BF%E7%94%A8%E7%8E%87/</link><pubDate>Fri, 18 Aug 2023 01:54:38 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.5%E4%BD%BF%E7%94%A8%E7%8E%87/</guid><description> 使用率 サービスが要求するリソースの場合 与えられたインターバルのうちアクティブに作業していた時間がどれだけかに基づいてリソースがどの程度ビジーかを計測した値 ストレージの場合 消費された容量を指す</description></item><item><title>【2.4】レイテンシ</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.4%E3%83%AC%E3%82%A4%E3%83%86%E3%83%B3%E3%82%B7/</link><pubDate>Fri, 18 Aug 2023 01:43:24 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.4%E3%83%AC%E3%82%A4%E3%83%86%E3%83%B3%E3%82%B7/</guid><description> オペレーションがサービスの提供を待つために使った時間を計測したもの
コンテキストによっては、オペレーションにかかった時間全体、すなわち応答時間と同じ意味になる レイテンシは計測場所が異なっていてよいので、計測対象と共に表現されることがよくなる
名前解決レイテンシ DNSオペレーション全体を表す TCP接続レイテンシ 初期化（TCPハンドシェイク）だけを指す 何を計測しているのかを説明する修飾語を入れるようにするべき</description></item><item><title>【2.3】応答時間</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.3%E5%BF%9C%E7%AD%94%E6%99%82%E9%96%93/</link><pubDate>Fri, 18 Aug 2023 01:39:49 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.3%E5%BF%9C%E7%AD%94%E6%99%82%E9%96%93/</guid><description> 応答時間 オペレーションが完了するまでの時間 待ちのために使った時間や、サービスを提供するために使った時間 結果の転送にかかった時間を含む</description></item><item><title>【2.2】スループット</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.2%E3%82%B9%E3%83%AB%E3%83%BC%E3%83%97%E3%83%83%E3%83%88/</link><pubDate>Fri, 18 Aug 2023 01:38:26 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.2%E3%82%B9%E3%83%AB%E3%83%BC%E3%83%97%E3%83%83%E3%83%88/</guid><description> スループット 仕事が実行されるスピード 通信ではデータ転送速度 コンテキストによってはスループットは処理速度になる</description></item><item><title>【2.1】IOPS</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.1iops/</link><pubDate>Fri, 18 Aug 2023 01:37:09 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2.1iops/</guid><description> IOPS 1秒当たりのI/Oオペレーション データ転送オペレーションのスピードの指標 ディスクI/Oでは、IOPSは1秒当たりの読み書きの回数</description></item><item><title>【2】メソドロジ</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2%E3%83%A1%E3%82%BD%E3%83%89%E3%83%AD%E3%82%B8/</link><pubDate>Fri, 18 Aug 2023 01:24:52 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/2%E3%83%A1%E3%82%BD%E3%83%89%E3%83%AD%E3%82%B8/</guid><description> ベテランシステムの管理者 ツールと指標だけではない 根本原因にたどりつく手順が頭の中に入っている manページにないのがそういったノウハウ</description></item><item><title>【1.3】自作の例外を定義する</title><link>https://dddsuz2.github.io/suzmemo/1.3%E8%87%AA%E4%BD%9C%E3%81%AE%E4%BE%8B%E5%A4%96%E3%82%92%E5%AE%9A%E7%BE%A9%E3%81%99%E3%82%8B/</link><pubDate>Thu, 17 Aug 2023 22:31:11 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/1.3%E8%87%AA%E4%BD%9C%E3%81%AE%E4%BE%8B%E5%A4%96%E3%82%92%E5%AE%9A%E7%BE%A9%E3%81%99%E3%82%8B/</guid><description> Exceptionから継承させた自作の例外を定義できる class MyBaseError(Exception) def __init__(self, code, msg) -&amp;gt; None: self.code = code self.msg = msg def __str__(self) -&amp;gt; str: return f&amp;#34;{self.code} {self.msg}&amp;#34; class ParameterError(MyBaseError) def __init__(self, msg: str) -&amp;gt; None: super().__init__(&amp;#34;errorCode&amp;#34;, msg) try: ... except ValueError as e: raise ParameterError(&amp;#34;ValueErrorによってエラーが出ました&amp;#34;) from e</description></item><item><title>【1.2】raise文で特定の例外を発生させる</title><link>https://dddsuz2.github.io/suzmemo/1.2raise%E6%96%87%E3%81%A7%E7%89%B9%E5%AE%9A%E3%81%AE%E4%BE%8B%E5%A4%96%E3%82%92%E7%99%BA%E7%94%9F%E3%81%95%E3%81%9B%E3%82%8B/</link><pubDate>Thu, 17 Aug 2023 22:24:22 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/1.2raise%E6%96%87%E3%81%A7%E7%89%B9%E5%AE%9A%E3%81%AE%E4%BE%8B%E5%A4%96%E3%82%92%E7%99%BA%E7%94%9F%E3%81%95%E3%81%9B%E3%82%8B/</guid><description> raiseで特定の例外を発生させることができる raise ValueError(&amp;#34;Hello&amp;#34;) ---------------------------------------- &amp;gt;&amp;gt;&amp;gt; raise ValueError(&amp;#34;Hello&amp;#34;) Traceback (most recent call last): File &amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;, line 1, in &amp;lt;module&amp;gt; ValueError: Hello BaseExceptionあるいは、Exceptionを継承した例外クラスでなければならない
例外を自作する場合は注意する 例外を再送出することもできる
try: raise NameError(&amp;#39;HiThere&amp;#39;) except NameError: print(&amp;#39;An exception flew by!&amp;#39;) raise An exception flew by! Traceback (most recent call last): File &amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;, line 2, in &amp;lt;module&amp;gt; NameError: HiThere ある例外がほかの例外から連鎖していることを示す場合には、fromを使う from Noneでこれを無効化できる def func(): raise ConnectionError try: func() except ConnectionError as exc: raise RuntimeError(&amp;#39;Failed to open database&amp;#39;) from exc Traceback (most recent call last): File &amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;, line 2, in &amp;lt;module&amp;gt; File &amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;, line 2, in func ConnectionError The above exception was the direct cause of the following exception: Traceback (most recent call last): File &amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;, line 4, in &amp;lt;module&amp;gt; RuntimeError: Failed to open database</description></item><item><title>【1.1】try~exceptで終了させたい時</title><link>https://dddsuz2.github.io/suzmemo/1.1try~except%E3%81%A7%E7%B5%82%E4%BA%86%E3%81%95%E3%81%9B%E3%81%9F%E3%81%84%E6%99%82/</link><pubDate>Thu, 17 Aug 2023 22:10:00 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/1.1try~except%E3%81%A7%E7%B5%82%E4%BA%86%E3%81%95%E3%81%9B%E3%81%9F%E3%81%84%E6%99%82/</guid><description> try ... except ...で終了させたい時はsys.exit()を使う import logging import sys try: 1/0 except (ValueError,ZeroDivisionError): logging.warning(&amp;#34;test&amp;#34;) sys.exit(1) print(1+1) ------------------------------------------- WARNING:root:test 注意点として、try句の中ではexitできない exitは例外を発生させて終了するため そのため、関数呼び出しの時などは注意する # これは終了しない def test(): try: 1/0 except ZeroDivisionError: logging.warning(&amp;#34;testの中&amp;#34;) sys.exit(1) try: test() except (ValueError,ZeroDivisionError): logging.warning(&amp;#34;test&amp;#34;) # これは終了する def test(): try: 1/0 except ZeroDivisionError: logging.warning(&amp;#34;testの中&amp;#34;) try: test() except (ValueError,ZeroDivisionError): logging.warning(&amp;#34;test&amp;#34;) sys.exit(1)</description></item><item><title>【1】Pythonにおける例外処理の基本</title><link>https://dddsuz2.github.io/suzmemo/1python%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E4%BE%8B%E5%A4%96%E5%87%A6%E7%90%86%E3%81%AE%E5%9F%BA%E6%9C%AC/</link><pubDate>Thu, 17 Aug 2023 21:35:50 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/1python%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E4%BE%8B%E5%A4%96%E5%87%A6%E7%90%86%E3%81%AE%E5%9F%BA%E6%9C%AC/</guid><description> 基本中の基本は、try ... except ... import logging try: 1/0 except ZeroDivisionError: logging.warning(&amp;#34;test&amp;#34;) 何も例外が発生しない時、exceptの実行は飛ばされる tryで例外が発生すると、exceptキーワードの後に指定されている例外かどうか判定される 指定されている例外の場合、except句が実行された後、実行が継続される 指定されていない例外の場合、unhandled exceptionとなり、エラーが出力され、実行が止まる import logging try: 1/0 except ZeroDivisionError: logging.warning(&amp;#34;test&amp;#34;) print(1+1) try: 1/0 except ValueError: logging.warning(&amp;#34;test&amp;#34;) print(3+3) -------------------------------------- 2 WARNING:root:test Traceback (most recent call last): File &amp;#34;z:\home\dada\test\Python\Exception\test.py&amp;#34;, line 11, in &amp;lt;module&amp;gt; 1/0 ZeroDivisionError: division by zero exceptで例外をキャッチできた場合、そのまま実行が続くのがミソですな
じゃないとこの世のプログラム異常終了しまくるでな exceptでは複数のエラーを指定できる
import logging try: 1/0 except (ValueError,ZeroDivisionError): logging.warning(&amp;#34;test&amp;#34;) print(1+1) ----------------------------------- 2 WARNING:root:test</description></item><item><title>【1】コードがわからない時の対処法</title><link>https://dddsuz2.github.io/suzmemo/1%E3%82%B3%E3%83%BC%E3%83%89%E3%81%8C%E3%82%8F%E3%81%8B%E3%82%89%E3%81%AA%E3%81%84%E6%99%82%E3%81%AE%E5%AF%BE%E5%87%A6%E6%B3%95/</link><pubDate>Thu, 17 Aug 2023 21:28:50 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/1%E3%82%B3%E3%83%BC%E3%83%89%E3%81%8C%E3%82%8F%E3%81%8B%E3%82%89%E3%81%AA%E3%81%84%E6%99%82%E3%81%AE%E5%AF%BE%E5%87%A6%E6%B3%95/</guid><description> 仕事をしていて、わからないコードがあったときの対処法ができたのでメモ
初見のコードは一気に読んでも、まずわかることはない VSCodeを開いて、めちゃくちゃ小さい単位に分解して、それを実際のコードに近づけていく作業をすると理解できることがわかった 実験してみることが大事 これと本を読んで知識をつけることを並行すればよい そもそも小さい範囲に分解できない場合
そんな場合あるのか？ 専用の環境でしか動かないようなコードだと難しいのか そういう場合は、開発環境で実験する方法を有識者に聞く つまりDockerとかを利用してない環境はGarbage その場合はあきらめて寝る</description></item><item><title>【7】C++の出力</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9%E3%81%8C%E3%81%8A%E3%82%82%E3%81%97%E3%82%8D%E3%81%84%E3%81%BB%E3%81%A9%E8%BA%AB%E3%81%AB%E3%81%A4%E3%81%8F%E6%9C%AC/7c++%E3%81%AE%E5%87%BA%E5%8A%9B/</link><pubDate>Thu, 17 Aug 2023 01:34:53 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9%E3%81%8C%E3%81%8A%E3%82%82%E3%81%97%E3%82%8D%E3%81%84%E3%81%BB%E3%81%A9%E8%BA%AB%E3%81%AB%E3%81%A4%E3%81%8F%E6%9C%AC/7c++%E3%81%AE%E5%87%BA%E5%8A%9B/</guid><description> ヘッダファイルiostreamをインストールする必要がある #include &amp;lt;iostream&amp;gt; using std::cin; using std::cout; パターンの出力
問題：正方形の半分
cout &amp;lt;&amp;lt; &amp;#34;#&amp;#34;と cout &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;の 2 つの出力文だけを使い、ハッシュ記号（#）で 5 × 5 の正方形を半 分にした形（直角三角形）を作るプログラムを書いてみよう。 問題を簡略化してみる cout &amp;lt;&amp;lt; &amp;#34;#&amp;#34;と cout &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;の 2 つの出力文だけを使い、ハッシュ記号（#）で 5 × 5 の正方形を作 るプログラムを書いてみよう。 ##### ##### ##### ##### ##### もっと簡略化してみる cout &amp;lt;&amp;lt; &amp;#34;#&amp;#34;と cout &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;の 2 つの出力文だけを使い、ハッシュ記号（#）を 5 つ並べるプログラ ムを書いてみよう。 ##### for (int hashNum = 1; hashNum &amp;lt;= 5; hasNum++) { cout &amp;lt;&amp;lt; &amp;#34;#&amp;#34;; } cout &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;; for (int row = 1; row &amp;lt;= 5; row++) { for (int hashNum = 1; hashNum &amp;lt;= 5; hashNum++) { cout &amp;lt;&amp;lt; &amp;#34;#&amp;#34;; } cout &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;; } 最初の問題を解くためには、hasNum &amp;lt;= 5の部分を変えればいいことはわかる 最初の行には5つ、次は4つというように、数を減らしていく 問題：カウントダウンとカウントアップ 以下のコードのループ内に書く式（expression）を考えてみよう。このプログラムは、5 から 1 まで の数を一行に 1 つずつ順番に表示するものである。 for (int row = 1; row &amp;lt;= 5; row++) { cout &amp;lt;&amp;lt; 1 expression &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;; } expressionにどのような値が入ればよいか？ rowに-1をかけた値はどうだろう？ 数は減るが、欲しい値ではない 欲しい値と、行番号-1 との差は常に6 6-rowにすればよくね？ for (int row = 1; row &amp;lt;= 5; row++) { for (int hashNum = 1; hashNum &amp;lt;= 6 - row; hashNum++) { cout &amp;lt;&amp;lt; &amp;#34;#&amp;#34;; } cout &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;; } cout &amp;lt;&amp;lt; &amp;#34;#&amp;#34;と cout &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;の 2 つの出力文だけを使い、ハッシュ記号（#）で横倒しの三角形を作る プログラムを書いてみよう。 # ## ### #### ### ## # iを書いてみる i 欲しい値 1 1 2 2 3 3 4 4 5 3 6 2 7 1 最大値が4なので 4 - xxx そのまま入れると？ i 欲しい値 4 - i の値 1 1 3 2 2 2 3 3 1 4 4 0 5 3 -1 6 2 -2 7 1 -3 4 - abs(4 - i)を入れればいいことがわかる #include &amp;lt;iostream&amp;gt; using namespace std; int main() { for (int i = 1; i &amp;lt; 8; i++) { for (int j = 1; j &amp;lt;= 4 - abs(4 - i); j++ ) { cout &amp;lt;&amp;lt; &amp;#34;#&amp;#34;; } cout &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;; } }</description></item><item><title>【1.16.1】60秒で終わるLinuxパフォーマンス分析</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/1.16.160%E7%A7%92%E3%81%A7%E7%B5%82%E3%82%8F%E3%82%8Blinux%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9%E5%88%86%E6%9E%90/</link><pubDate>Wed, 16 Aug 2023 23:29:14 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/1.16.160%E7%A7%92%E3%81%A7%E7%B5%82%E3%82%8F%E3%82%8Blinux%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9%E5%88%86%E6%9E%90/</guid><description> uptime 負荷の平均をチェック dmesg -T | tail OOM(メモリ不足)エラーなどのカーネルエラー vmstat -SM 1 ランキューの長さ、スワップ、システム全体のCPU使用率などのシステムレベルでの統計量 mpstat -P ALL 1 CPU間のバランス、ひとつのCPUだけがビジー状態ならスレッドのスケーリングに問題がある pidstat 1 プロセスごとのCPUの使用状況 予想外にCPUを消費しているプロセスを明らかにする iostat -sxz 1 ディスクのI/O統計：IOPS、スループット、平均待ち時間、ビジー状態 free -m ファイルシステムキャッシュを含むメモリの使用状況 sar -n DEV 1 ネットワークデバイスI/O, パケットとスループット sar -n TCP, ETCP 1 TCP統計 top 全体的なチェック</description></item><item><title>【1.16】メソドロジ</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/1.16%E3%83%A1%E3%82%BD%E3%83%89%E3%83%AD%E3%82%B8/</link><pubDate>Wed, 16 Aug 2023 23:27:51 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/1.16%E3%83%A1%E3%82%BD%E3%83%89%E3%83%AD%E3%82%B8/</guid><description> システムパフォーマンスに関連するさまざまな作業を実行するための手順を文書化したもの</description></item><item><title>【1.15】クラウドコンピューティング</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/1.15%E3%82%AF%E3%83%A9%E3%82%A6%E3%83%89%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0/</link><pubDate>Wed, 16 Aug 2023 23:24:47 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/1.15%E3%82%AF%E3%83%A9%E3%82%A6%E3%83%89%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0/</guid><description> オンデマンドで計算資源をデプロイする手段 インスタンスと呼ばれる小さな仮想システムを建て、その上にアプリケーションをデプロイすることで、短時間でスケーリングできるようにした 問題点 ほかのテナントからの影響でパフォーマンスが下がらないようにしなければならない パフォーマンス隔離</description></item><item><title>【1.14.1】本番環境で可観測性ツールのみを使ってはいけないワケ</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/1.14.1%E6%9C%AC%E7%95%AA%E7%92%B0%E5%A2%83%E3%81%A7%E5%8F%AF%E8%A6%B3%E6%B8%AC%E6%80%A7%E3%83%84%E3%83%BC%E3%83%AB%E3%81%AE%E3%81%BF%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%AF%E3%81%84%E3%81%91%E3%81%AA%E3%81%84%E3%83%AF%E3%82%B1/</link><pubDate>Wed, 16 Aug 2023 23:22:19 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/1.14.1%E6%9C%AC%E7%95%AA%E7%92%B0%E5%A2%83%E3%81%A7%E5%8F%AF%E8%A6%B3%E6%B8%AC%E6%80%A7%E3%83%84%E3%83%BC%E3%83%AB%E3%81%AE%E3%81%BF%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%AF%E3%81%84%E3%81%91%E3%81%AA%E3%81%84%E3%83%AF%E3%82%B1/</guid><description> 可観測性ツールのみでは、ワークロードの自然なばらつきのため、問題が明らかにならない可能性がある マイクロベンチマークでワークロードを固定してばらつきを取り除いてやることで、問題が明らかになる可能性がある</description></item><item><title>【1.14】実験</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/1.14%E5%AE%9F%E9%A8%93/</link><pubDate>Wed, 16 Aug 2023 23:14:31 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/1.14%E5%AE%9F%E9%A8%93/</guid><description>実験ツール 大半はベンチマーキングツール リアルなワークロードを行うマクロベンチマークツール CPU, ディスク, ネットワークなどの特定のコンポーネントをテストするマイクロベンチマークツール マイクロベンチマークツールの方がデバッグがしやすい dada@DESKTOP-LKBFGV7:~$ iperf3 -s ----------------------------------------------------------- Server listening on 5201 ----------------------------------------------------------- Accepted connection from 127.0.0.1, port 59058 [ 5] local 127.0.0.1 port 5201 connected to 127.0.0.1 port 59072 [ ID] Interval Transfer Bitrate [ 5] 0.00-1.00 sec 9.44 GBytes 81.1 Gbits/sec [ 5] 1.00-2.00 sec 9.72 GBytes 83.5 Gbits/sec [ 5] 2.00-3.00 sec 10.2 GBytes 87.7 Gbits/sec [ 5] 3.00-4.00 sec 9.95 GBytes 85.4 Gbits/sec [ 5] 4.</description></item><item><title>【1.13】BPF</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/1.13bpf/</link><pubDate>Wed, 16 Aug 2023 23:11:47 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/1.13bpf/</guid><description> BPFは、もともとtcpdump(8)のフィルタ式を高速実行するためのカーネル内ミニ仮想マシンとして作られた BCCとbpftraceフロントエンドのプログラミング機能を提供している execsnoop(8)もその一部</description></item><item><title>【1.14】動的インストルメンテーション</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/1.12.2%E5%8B%95%E7%9A%84%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%AB%E3%83%A1%E3%83%B3%E3%83%86%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3/</link><pubDate>Wed, 16 Aug 2023 23:04:01 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/1.12.2%E5%8B%95%E7%9A%84%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%AB%E3%83%A1%E3%83%B3%E3%83%86%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3/</guid><description> 動的インストルメンテーション ソフトウェア起動後、メモリ内の命令を書き換えてインストルメンテーションルーチンを挿入する デバッガのブレークポイントと同じ感じ 挿入したルーチンにヒットした場合、ランタイムを実行してからターゲットソフトウェアの実行を続ける Linuxでは2004年から動的トレーサーがカーネルにマージされた(kprobe)</description></item><item><title>【1.12.1】静的トレーシング</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/1.12.1%E9%9D%99%E7%9A%84%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%AB%E3%83%A1%E3%83%B3%E3%83%86%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3/</link><pubDate>Wed, 16 Aug 2023 23:02:51 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/1.12.1%E9%9D%99%E7%9A%84%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%AB%E3%83%A1%E3%83%B3%E3%83%86%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3/</guid><description> 静的インストルメンテーション ソースコードにハードコードされたソフトウェアインストルメンテーションポイントのこと Linuxでは、カーネルの静的インストルメンテーションポイントのことをトレースポイントという ユーザー空間のための静的インストルメンテーションテクノロジをUSDTという libcなどのライブラリがライブラリ呼び出しのインストルメンテーションのために使っている execsnoop(8) トレーシング中にexecve(2)システムコールのためのトレースポイントを設定している</description></item><item><title>【1.12】トレーシング</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/1.12%E3%83%88%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%B3%E3%82%B0/</link><pubDate>Wed, 16 Aug 2023 22:43:25 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/1.12%E3%83%88%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%B3%E3%82%B0/</guid><description> トレーシングとはイベントベースの記録 システムコール用のトレーシングツール strace(1) ネットワークパケット用のトレーシングツール tcpdump(8)</description></item><item><title>【1.11】フレームグラフ</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/1.11%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E3%82%B0%E3%83%A9%E3%83%95/</link><pubDate>Wed, 16 Aug 2023 22:38:32 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/1.11%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E3%82%B0%E3%83%A9%E3%83%95/</guid><description>CPUプロファイルに使うのが効果的
ロック競合などでスピンパスに費やされたCPU時間がわかる メモリ問題は、過度にCPUを消費しているメモリアロケーション関数とそこまでのコードパスを見ればわかる 横幅は消費されたCPU時間に比例し、多と方向はコードパスを示す</description></item><item><title>【1.10】プロファイリング</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/1.10%E3%83%97%E3%83%AD%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AA%E3%83%B3%E3%82%B0/</link><pubDate>Wed, 16 Aug 2023 22:37:14 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/1.10%E3%83%97%E3%83%AD%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AA%E3%83%B3%E3%82%B0/</guid><description> プロファイリングとは？ サンプリングツールの仕様という意味 計測器のサブセット（サンプル）を取り、対象のおおよその姿を描く</description></item><item><title>【5】繰り返しのfor文</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/beyond_interaction/5%E7%B9%B0%E3%82%8A%E8%BF%94%E3%81%97%E3%81%AEfor%E6%96%87/</link><pubDate>Tue, 15 Aug 2023 23:54:19 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/beyond_interaction/5%E7%B9%B0%E3%82%8A%E8%BF%94%E3%81%97%E3%81%AEfor%E6%96%87/</guid><description/></item><item><title>【4.1】画面の幅と高さを取得</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/beyond_interaction/4.1%E7%94%BB%E9%9D%A2%E3%81%AE%E5%B9%85%E3%81%A8%E9%AB%98%E3%81%95%E3%82%92%E5%8F%96%E5%BE%97/</link><pubDate>Tue, 15 Aug 2023 23:52:57 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/beyond_interaction/4.1%E7%94%BB%E9%9D%A2%E3%81%AE%E5%B9%85%E3%81%A8%E9%AB%98%E3%81%95%E3%82%92%E5%8F%96%E5%BE%97/</guid><description> 画面の幅を返す
ofGetWidth() 画面の高さを返す
ofGetHeight()</description></item><item><title>【4】数値の記憶と計算</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/beyond_interaction/4%E6%95%B0%E5%80%A4%E3%81%AE%E8%A8%98%E6%86%B6%E3%81%A8%E8%A8%88%E7%AE%97/</link><pubDate>Tue, 15 Aug 2023 23:51:14 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/beyond_interaction/4%E6%95%B0%E5%80%A4%E3%81%AE%E8%A8%98%E6%86%B6%E3%81%A8%E8%A8%88%E7%AE%97/</guid><description>四則演算が使える
C++なのでもちろん変数が使える</description></item><item><title>【3.1】背景色と描画色</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/beyond_interaction/3.1%E8%83%8C%E6%99%AF%E8%89%B2%E3%81%A8%E6%8F%8F%E7%94%BB%E8%89%B2/</link><pubDate>Tue, 15 Aug 2023 23:48:22 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/beyond_interaction/3.1%E8%83%8C%E6%99%AF%E8%89%B2%E3%81%A8%E6%8F%8F%E7%94%BB%E8%89%B2/</guid><description> 背景色を設定
ofBackground(R, G, B) 描画色を設定
ofSetColor(R, G, B) 図形が色で塗りつぶされる Draw関数内で指定することで色を塗分けることができる 4つ目の引数で透明度を付加できる アルファチャンネル 0 ~ 255</description></item><item><title>【3】色の設定</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/beyond_interaction/3%E8%89%B2%E3%81%AE%E8%A8%AD%E5%AE%9A/</link><pubDate>Tue, 15 Aug 2023 23:46:06 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/beyond_interaction/3%E8%89%B2%E3%81%AE%E8%A8%AD%E5%AE%9A/</guid><description> コンピュータ画面を構成するピクセルをさらに分解すると、赤・青・緑から成り立っている 光の三原色 RGBカラーモデルと呼ばれる 加法混色 混ぜ合わせると色が足し算になる ちなみに絵具とかは減法混色というらしい 元の光を遮ることで色を混色していく シアン、マゼンタ、イエローによって構成されている 色料の三原色</description></item><item><title>【2.3】三角形を描く</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/beyond_interaction/2.3%E4%B8%89%E8%A7%92%E5%BD%A2%E3%82%92%E6%8F%8F%E3%81%8F/</link><pubDate>Tue, 15 Aug 2023 23:45:15 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/beyond_interaction/2.3%E4%B8%89%E8%A7%92%E5%BD%A2%E3%82%92%E6%8F%8F%E3%81%8F/</guid><description> 三角形を描く ofDrawTriangle(点1x, y, 点2x, y, 点3x, y)</description></item><item><title>【2.2】円、楕円を描く</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/beyond_interaction/2.2%E5%86%86%E6%A5%95%E5%86%86%E3%82%92%E6%8F%8F%E3%81%8F/</link><pubDate>Tue, 15 Aug 2023 23:43:56 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/beyond_interaction/2.2%E5%86%86%E6%A5%95%E5%86%86%E3%82%92%E6%8F%8F%E3%81%8F/</guid><description> 円を描く
ofDrawCircle(中心x, y, 半径) 楕円を描く
ofDrawEllipse(中心x, y, 幅, 高さ)</description></item><item><title>【2.1】直線を描く</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/beyond_interaction/2.1%E7%9B%B4%E7%B7%9A%E3%82%92%E6%8F%8F%E3%81%8F/</link><pubDate>Tue, 15 Aug 2023 23:41:46 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/beyond_interaction/2.1%E7%9B%B4%E7%B7%9A%E3%82%92%E6%8F%8F%E3%81%8F/</guid><description> ofDrawLine(始点x, y, 終点x, y)
四角形を描く場合にも関数がある
ofDrawRectangle(左上x, 左上y, 幅, 高さ)</description></item><item><title>【2】図形を描く</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/beyond_interaction/2%E5%9B%B3%E5%BD%A2%E3%82%92%E6%8F%8F%E3%81%8F/</link><pubDate>Tue, 15 Aug 2023 23:39:01 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/beyond_interaction/2%E5%9B%B3%E5%BD%A2%E3%82%92%E6%8F%8F%E3%81%8F/</guid><description> 座標系
数値を指定して図形を描くためには、図形を描く場所とその大きさを指定する 点の位置を明確に指定するための数値の組のことを座標、座標を表現するシステムのことを座標系と呼ぶ コンピュータの画面はグリッド状に並んだピクセルの集まり
oFでは、左上の点を(0, 0)と考える</description></item><item><title>【1】oFの関数</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/beyond_interaction/1of%E3%81%AE%E9%96%A2%E6%95%B0/</link><pubDate>Tue, 15 Aug 2023 23:37:05 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/beyond_interaction/1of%E3%81%AE%E9%96%A2%E6%95%B0/</guid><description> ofApp::setup()
初期化関数 プログラムを実行した際に1度だけ実行される ofApp::update
メインループ関数 draw()関数の前に実行される ofApp::draw()
update()関数の後に実行される</description></item><item><title>【6】一般的問題解決テクニック</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9%E3%81%8C%E3%81%8A%E3%82%82%E3%81%97%E3%82%8D%E3%81%84%E3%81%BB%E3%81%A9%E8%BA%AB%E3%81%AB%E3%81%A4%E3%81%8F%E6%9C%AC/6%E4%B8%80%E8%88%AC%E7%9A%84%E5%95%8F%E9%A1%8C%E8%A7%A3%E6%B1%BA%E3%83%86%E3%82%AF%E3%83%8B%E3%83%83%E3%82%AF/</link><pubDate>Tue, 15 Aug 2023 21:52:45 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9%E3%81%8C%E3%81%8A%E3%82%82%E3%81%97%E3%82%8D%E3%81%84%E3%81%BB%E3%81%A9%E8%BA%AB%E3%81%AB%E3%81%A4%E3%81%8F%E6%9C%AC/6%E4%B8%80%E8%88%AC%E7%9A%84%E5%95%8F%E9%A1%8C%E8%A7%A3%E6%B1%BA%E3%83%86%E3%82%AF%E3%83%8B%E3%83%83%E3%82%AF/</guid><description> 常に計画を持つ
最も重要なルール 途中で計画を変更することになるかもしれないが、それでもこのルールは重要 計画自体が重要なのではなく、計画作りが重要 中間目標を定める 問題を言い換える
「狐・ガチョウ・トウモロコシ」問題で示したように、問題を翻訳すればよいことがある 計画を作り、最初に「問題を言い換える」ステップを行う 問題の理解の確認にも役に立つ 上司に仕事を振られたときなど 問題を分割する
問題を2つに分解できれば、問題全体の半分の難しさにはなる 知っていることから始める
プログラミングでも、知っていることから初めて、そこから外側に広げていくべき 問題を簡略化する
制約を増やしたり減らしたりする 3次元空間の距離を考える時に2次元で考えてみるなど 一時的なコバヤシマルを作る 問題を簡略化することで、難しい部分がどこにあるかを正確に把握できる 類似点を探す
問題解決のスピードやスキルを伸ばすためには最も重要だが、習得が難しいスキル 参照できる解決方法が貯まるまで類似点を探せないから 似たようなコードを探して、それを修正するというのは間違い 自分で解決方法を完成させていないから 理解できていないプログラムを正しく修正するのは難しい 現在の問題解決は、未来の問題を解決する類似点を持つ可能性があるから 他のプログラムを頼っていては、未来でも頼ることになってしまう 実験する
APIや売らすライブラリを扱う時に実験は役に立つ イライラしない
イライラするとうまく考えられなくなる、効率的に働けなくなる 自分自身のイライラを許可しない 失敗を継続する言い訳を与えたことになる 難しい問題に取り組むよりも、怒りに負けた方が簡単だと思っている 計画を作る</description></item><item><title>【5】Quarrasiブロック</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9%E3%81%8C%E3%81%8A%E3%82%82%E3%81%97%E3%82%8D%E3%81%84%E3%81%BB%E3%81%A9%E8%BA%AB%E3%81%AB%E3%81%A4%E3%81%8F%E6%9C%AC/5quarrasi%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF/</link><pubDate>Tue, 15 Aug 2023 21:40:17 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9%E3%81%8C%E3%81%8A%E3%82%82%E3%81%97%E3%82%8D%E3%81%84%E3%81%BB%E3%81%A9%E8%BA%AB%E3%81%AB%E3%81%A4%E3%81%8F%E6%9C%AC/5quarrasi%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF/</guid><description> 問題：エイリアンのロックを解錠せよ 敵対的なエイリアン「Quarrasi」が地球に着陸し、あなたは囚われの身となってしまった。彼らの身体 は巨大で触手までついている。それでもあなたはどうにか逃げ延びることができた。しかし、宇宙船（ま だ地上にいる）から脱出するには、重厚なドアを開く必要がある。ドアの説明書は（大変奇妙な話だが） 英語で書かれている。だが、これは決して簡単なことではない。ドアを開くには、右のレセプターから左 のレセプターに横たわった 3 つの棒状の「Kratzz」をスライドさせる必要がある。ドアの両端にあるレ セプターは、10 フィート（約 3 メートル）離れている。 これだけなら簡単なことかもしれないが、以下のようにしてアラームを鳴らさないようにする必要があ る。各 Kratzz には「Quinicrys」という星形の水晶のパワージェムがついている。各レセプターには 4 つのセンサーがついていて、Quinicrys が縦に偶数個並ぶとセンサーが点灯する。点灯したセンサーが 1 つになると、アラームが鳴る。2 つのレセプターのアラームは別系統であり、左右どちらのレセプターも 点灯したセンサーを 1 つだけ残すことはできない。なお、それぞれのアラームには抑制機がついている。 抑制機のボタンが押されている限りは、アラームは鳴らない。両方のボタンを同時に押すことができれば 簡単な話なのだが、人間の腕は Quarassi の触手よりも短い。 以上を踏まえた上で、アラームを鳴らさずに Kratzz をスライドさせて、ドアを開くことができるだろ うか？ 各Kratzz ★ ★★ ★★ ★ 良く考えれば、「狐・ガチョウ・トウモロコシ問題」であることに気が付く
抑制機が押されている間は、アラームはならない 学べる教訓
問題の類似性を発見する 解決策の翻訳だけでよくなる</description></item><item><title>【4】数独</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9%E3%81%8C%E3%81%8A%E3%82%82%E3%81%97%E3%82%8D%E3%81%84%E3%81%BB%E3%81%A9%E8%BA%AB%E3%81%AB%E3%81%A4%E3%81%8F%E6%9C%AC/4%E6%95%B0%E7%8B%AC/</link><pubDate>Tue, 15 Aug 2023 21:37:33 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9%E3%81%8C%E3%81%8A%E3%82%82%E3%81%97%E3%82%8D%E3%81%84%E3%81%BB%E3%81%A9%E8%BA%AB%E3%81%AB%E3%81%A4%E3%81%8F%E6%9C%AC/4%E6%95%B0%E7%8B%AC/</guid><description> 問題：数独を完成させよ 9 × 9 グリッドの一部が数字（1～9）で埋められている。プレーヤーは、空いているマスをある制約 にしたがって埋めなければいけない。その制約とは「数字は 1 つの行と列で一度しか登場してはいけな い」と「3 × 3 のエリアで数字は一度しか登場してはいけない」である。 どのマスから埋めるべきか？
可能性のある最小限の値（できれば1つだけ）を見つける 学べる事
問題の中から最も制約のある部分を見つける 制約によって、選択肢が減らされ、思考を単純化してくれることがある プログラミングにおいても、制約の大きな部分から手をつけるのがよい</description></item><item><title>【1.9】カウンタ、統計量、指標</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/1.9%E3%82%AB%E3%82%A6%E3%83%B3%E3%82%BF%E7%B5%B1%E8%A8%88%E9%87%8F%E6%8C%87%E6%A8%99/</link><pubDate>Tue, 15 Aug 2023 21:07:44 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/1.9%E3%82%AB%E3%82%A6%E3%83%B3%E3%82%BF%E7%B5%B1%E8%A8%88%E9%87%8F%E6%8C%87%E6%A8%99/</guid><description>アプリケーションやカーネルでは、アクティビティやリソースの使用状況がカウンタと呼ばれる整数変数に格納される カウンタは累計であり、増える一方となっている パフォーマンスツールはこれらをあるタイミングで呼び出し、変化率、割合や統計量を計算する dada@DESKTOP-LKBFGV7:~$ vmstat 1 5 procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu----- r b swpd free buff cache si so bi bo in cs us sy id wa st 0 0 0 11506744 250824 3292424 0 0 1 3 7 1 0 0 100 0 0 0 0 0 11506500 250824 3292476 0 0 0 0 124 547 0 0 100 0 0 0 0 0 11518040 250824 3292476 0 0 0 0 801 1876 0 0 100 0 0 0 0 0 11515504 250824 3292476 0 0 0 0 47 372 0 0 100 0 0 0 0 0 11515480 250824 3292476 0 0 0 0 841 1968 0 0 100 0 0 CPU使用率とれてなくね？</description></item><item><title>【1.8】可観測性レイテンシ</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/1.8%E5%8F%AF%E8%A6%B3%E6%B8%AC%E6%80%A7%E3%83%AC%E3%82%A4%E3%83%86%E3%83%B3%E3%82%B7/</link><pubDate>Tue, 15 Aug 2023 21:06:06 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/1.8%E5%8F%AF%E8%A6%B3%E6%B8%AC%E6%80%A7%E3%83%AC%E3%82%A4%E3%83%86%E3%83%B3%E3%82%B7/</guid><description> 可観測性とは？ 観察によってシステムを理解すること このためのツールを可観測性ツールと呼ぶ ベンチマークツールは含まれない ワークロード実験を行うことによりシステムの状態を変えてしまうため 本番環境では、可観測性ツールを使うべき</description></item><item><title>【1.7】レイテンシ</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/1.7%E3%83%AC%E3%82%A4%E3%83%86%E3%83%B3%E3%82%B7/</link><pubDate>Tue, 15 Aug 2023 21:00:55 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/1.7%E3%83%AC%E3%82%A4%E3%83%86%E3%83%B3%E3%82%B7/</guid><description> レイテンシとは、待つために使った時間を計測したもの
データベースクエリーのレイテンシが100msで、ディスク読み出しにかかる時間が80msの場合
5倍の速度上昇が見込める IOPSはI/Oのタイプに左右されるため、直接比較できないことが多い レイテンシも修飾語で条件を明確にしなければ曖昧になることがある
ネットワーキングでは、レイテンシは接続が開設されるまでの時間という意味と、データ転送を含む接続時間全体という意味になることがある</description></item><item><title>【1.6.1】複雑な原因の相互作用</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/1.6.1%E8%A4%87%E9%9B%91%E3%81%AA%E5%8E%9F%E5%9B%A0%E3%81%AE%E7%9B%B8%E4%BA%92%E4%BD%9C%E7%94%A8/</link><pubDate>Tue, 15 Aug 2023 20:57:31 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/1.6.1%E8%A4%87%E9%9B%91%E3%81%AA%E5%8E%9F%E5%9B%A0%E3%81%AE%E7%9B%B8%E4%BA%92%E4%BD%9C%E7%94%A8/</guid><description> 複数のパフォーマンス障害の同時発生 大規模なソフトウェアではよくある すでに知られているのに、解決されていないパフォーマンスのバグは多い 問題を見つけるのが重要ではなく、本当に解決するべき重大な問題を見つけることが重要 重要度を測るために、パフォーマンスエンジニアは定量的なものさしを持つ必要がある 例えばレイテンシ 【1.7】レイテンシ
レイテンシについて書いてある レイテンシとは、基本的に待ち時間のこと</description></item><item><title>【1.6】パフォーマンスエンジニアリングの難点</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/1.6%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E3%83%AA%E3%83%B3%E3%82%B0%E3%81%AE%E9%9B%A3%E7%82%B9/</link><pubDate>Tue, 15 Aug 2023 20:52:27 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/1.6%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E3%83%AA%E3%83%B3%E3%82%B0%E3%81%AE%E9%9B%A3%E7%82%B9/</guid><description> テクノロジの分野は主観的になりがち
それを防ぐために、エラーにメッセージなどを追加する パフォーマンスも主観的な問題になることが多い
ディスクの平均的な応答時間が1msだったとして、これは良いのか悪いのか？ システムが複雑だと自明な出発点が存在しない
仮説を立てても、その仮説が正しいかどうかから検証しなければならない 連鎖的に障害が起きている場合、解決はより難しくなる 複雑なパフォーマンス障害の解決には、ホリスティックなアプローチが必要になる ホリスティックとは、全体的っていう意味らしい 多様なスキルが必要になるため、難しい</description></item><item><title>【1.5】パフォーマンス分析の視点</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/1.5%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9%E5%88%86%E6%9E%90%E3%81%AE%E8%A6%96%E7%82%B9/</link><pubDate>Tue, 15 Aug 2023 20:50:32 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/1.5%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9%E5%88%86%E6%9E%90%E3%81%AE%E8%A6%96%E7%82%B9/</guid><description> ワークロード分析 リソース分析 一般的に、リソース分析はシステム管理者、ワークロード分析はワークロード処理に責任を負うアプリケーション開発者が使う 【1.4】キャパシティプランニング
ワークロード分析ではキャパシティプランニングが行われたりもするんだと思う</description></item><item><title>【1.4】キャパシティプランニング</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/1.4%E3%82%AD%E3%83%A3%E3%83%91%E3%82%B7%E3%83%86%E3%82%A3%E3%83%97%E3%83%A9%E3%83%B3%E3%83%8B%E3%83%B3%E3%82%B0/</link><pubDate>Tue, 15 Aug 2023 20:48:33 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/1.4%E3%82%AD%E3%83%A3%E3%83%91%E3%82%B7%E3%83%86%E3%82%A3%E3%83%97%E3%83%A9%E3%83%B3%E3%83%8B%E3%83%B3%E3%82%B0/</guid><description>キャパシティプランニングとは？
開発ソフトウェアのリソースフットプリントの検証や、設計がニーズにどれだけ応えられるか検証すること デプロイ後にモニタリングや、問題予測を行うことが望ましい</description></item><item><title>【1.2】カナリアテスト</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/1.3%E3%82%AB%E3%83%8A%E3%83%AA%E3%82%A2%E3%83%86%E3%82%B9%E3%83%88/</link><pubDate>Tue, 15 Aug 2023 20:43:46 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/1.3%E3%82%AB%E3%83%8A%E3%83%AA%E3%82%A2%E3%83%86%E3%82%B9%E3%83%88/</guid><description> クラウドコンピューティングの登場により、初期ステップ（1～5）を省略する新しいテクニックが生まれた
カナリアテスト 本番ワークロードの一部を1台のインスタンスで実行される新ソフトウェアで処理して新ソフトウェアをテストする カナリアテストをデプロイの一部として組み込むこともある
ブルーグリーンデプロイメントと呼ばれる バックアップとしてもとのプールをオンラインに残しながら、トラフィックを少しづつ新しいサーバーに移していく</description></item><item><title>【1.1】システムパフォーマンスの作業内容</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/1.1%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9%E3%81%AE%E4%BD%9C%E6%A5%AD%E5%86%85%E5%AE%B9/</link><pubDate>Tue, 15 Aug 2023 20:39:28 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/1.1%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9%E3%81%AE%E4%BD%9C%E6%A5%AD%E5%86%85%E5%AE%B9/</guid><description> パフォーマンス上の目標を設定し、パフォーマンスモデルを作る
プロトタイプソフトウェアとハードウェアからパフォーマンス特性をつかむ
テスト環境で開発中のプロダクトのパフォーマンス分析をする
プロダクトの新バージョンのために非回帰テストを行う
プロダクトリリースのためにベンチマークテストを行う
対象の本番環境でPoCテストを行う
本番環境でパフォーマンスをチューニングする
本番稼働しているソフトウェアをモニタリングする
本番環境でのパフォーマンス障害を分析する
本番環境でのパフォーマンス障害のインシデント評価を行う
本番環境の分析を強化するためのパフォーマンスツールを開発する
最初の手順は行うことが望ましいが、スキップされることがよくある
本番環境へのデプロイ後に問題が発覚するケースが多い プロセスがすすむほど、以前のアーキテクチャ上の決定に起因するバグは修正が難しくなる 【1.3】カナリアテスト
最初の5つを飛ばして6番目から始めることができるテクニック</description></item><item><title>【1.3】システムパフォーマンスの職種</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/1.2%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9%E3%81%AE%E8%81%B7%E7%A8%AE/</link><pubDate>Tue, 15 Aug 2023 20:36:43 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/1.2%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9%E3%81%AE%E8%81%B7%E7%A8%AE/</guid><description> システム管理者
SRE
アプリケーション開発者
ネットワークエンジニア
データベース管理者
ウェブ管理者
パフォーマンスエンジニアという職種を設けている企業もある
Netflixにはクラウドパフォーマンスチームがある 筆者が所属している</description></item><item><title>【1】システムパフォーマンスとは？</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/1%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9%E3%81%A8%E3%81%AF/</link><pubDate>Tue, 15 Aug 2023 20:33:35 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/1%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9%E3%81%A8%E3%81%AF/</guid><description> 主要なソフトウェア、ハードウェアコンポーネントを含む、コンピューターシステム全般のパフォーマンスを研究する
データパスに含まれるあらゆるものが研究の対象になる これをシステムパフォーマンスの分野ではフルスタックと呼ぶ システムパフォーマンス研究の目的
レイテンシと計算コストを下げてエンドユーザーのエクスペリエンスを向上させること 【1.1】システムパフォーマンスの作業内容
システムパフォーマンスで行う作業内容について書いてある 開発始めから本番環境までのデプロイまで 【1.2】システムパフォーマンスの職種 システムパフォーマンス分析を行うのがどのような人たちか書いてある</description></item><item><title>【書誌】詳解システムパフォーマンス</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/%E6%9B%B8%E8%AA%8C%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/</link><pubDate>Tue, 15 Aug 2023 20:31:58 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/%E6%9B%B8%E8%AA%8C%E8%A9%B3%E8%A7%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9/</guid><description>まえがき 1章　イントロダクション 1.1　システムパフォーマンス 1.2　職種 1.3　作業 1.4　分析の視点 1.5　パフォーマンスエンジニアリングの難しさと面白さ 1.5.1　主観的な性質 1.5.2　複雑さ 1.5.3　複数の原因の相互作用 1.5.4　複数のパフォーマンス障害の同時発生 1.6　レイテンシ 1.7　可観測性 1.7.1　カウンタ、統計量、指標 1.7.2　プロファイリング 1.7.3　トレーシング 1.8　実験 1.9　クラウドコンピューティング 1.10　メソドロジ 1.10.1　60秒で終わるLinuxパフォーマンス分析 1.11　ケーススタディ 1.11.1　ディスクの速度低下 1.11.2　ソフトウェア変更 1.11.3　より深く学ぶために 1.12　参考文献 2章　メソドロジ 2.1　用語 2.2　モデル 2.2.1　テスト対象システム（SUT） 2.2.2　キューイングシステム 2.3　コンセプト 2.3.1　レイテンシ 2.3.2　タイムスケール 2.3.3　トレードオフ 2.3.4　チューニング 2.3.5　適切性のレベル 2.</description></item><item><title>【3.1】スライド5</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9%E3%81%8C%E3%81%8A%E3%82%82%E3%81%97%E3%82%8D%E3%81%84%E3%81%BB%E3%81%A9%E8%BA%AB%E3%81%AB%E3%81%A4%E3%81%8F%E6%9C%AC/3.1%E3%82%B9%E3%83%A9%E3%82%A4%E3%83%895/</link><pubDate>Mon, 14 Aug 2023 01:02:39 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9%E3%81%8C%E3%81%8A%E3%82%82%E3%81%97%E3%82%8D%E3%81%84%E3%81%BB%E3%81%A9%E8%BA%AB%E3%81%AB%E3%81%A4%E3%81%8F%E6%9C%AC/3.1%E3%82%B9%E3%83%A9%E3%82%A4%E3%83%895/</guid><description> スライドパズルの戦略について考える為、正方形ではなく長方形の小さなグリッドでパズルを考えてみる
ちなみにグリッドとは格子のことです 問題：スライド5
2 × 3 のグリッドには、4～8 の数字が書かれた 5 つのタイルと空きスペースがある。最初はグリッ ドがぐちゃぐちゃになっている。タイルは隣接した空きスペースにスライドできる。スライド後は元の場 所が空きスペースになる。ゴールは左上から数字を 4 から順番にグリッドに並べることだ。 タイルの順番を維持したまま、空きマスを回す 電車と呼ばれるやり方 複数のタイルの関係を維持したまま移動できる まず、完成形では4が左上で、7が左下になっているので、6マスの電車を回す その後、4と7を除いた4マスで電車を回す</description></item><item><title>【3】スライドパズル</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9%E3%81%8C%E3%81%8A%E3%82%82%E3%81%97%E3%82%8D%E3%81%84%E3%81%BB%E3%81%A9%E8%BA%AB%E3%81%AB%E3%81%A4%E3%81%8F%E6%9C%AC/3%E3%82%B9%E3%83%A9%E3%82%A4%E3%83%89%E3%83%91%E3%82%BA%E3%83%AB/</link><pubDate>Mon, 14 Aug 2023 00:57:42 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9%E3%81%8C%E3%81%8A%E3%82%82%E3%81%97%E3%82%8D%E3%81%84%E3%81%BB%E3%81%A9%E8%BA%AB%E3%81%AB%E3%81%A4%E3%81%8F%E6%9C%AC/3%E3%82%B9%E3%83%A9%E3%82%A4%E3%83%89%E3%83%91%E3%82%BA%E3%83%AB/</guid><description> 問題：スライド8 3 × 3 のグリッドには、1～8 の数字が書かれた 8 つのタイルと空きスペースがある。最初はグリッ ドがぐちゃぐちゃになっている。タイルは隣接した空きスペースにスライドできる。スライド後は元の場 所が空きスペースになる。ゴールは左上から数字を 1 から順番にグリッドに並べることだ。 この問題の難しさは、解決策に必要な操作が連鎖しているところ 一連のスライド操作は、タイルを正しくない場所に移動しながら、最終的に正しい場所に移動する 1つの操作だけを見ても、最終的なゴールに向かっているかどうかはわからない 【3.1】スライド5
ここで学習した電車と呼ばれる手法を使えば解ける
まず、1-2-3を正しい位置に並べる ここで遊べるドン
何回かやったらコツ掴んだわ 1,2,3,4と5,6,7,8を並べるのは楽勝 9, 13を左下に並べたいときは、13を右下において、その隣に9を置いて、後は回せば終了 113秒まで短縮したところで寝ます スライドパズルから学べること
明確な道筋が見えない状況に直面したときでも、何らかの戦略を立てた方がいい 問題を簡略化して実験してみる 一見してわからない方法で問題を分割する方法は存在する</description></item><item><title>【2.1】狐・ガチョウ・トウモロコシから学ぶ問題解決の重要な原則</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9%E3%81%8C%E3%81%8A%E3%82%82%E3%81%97%E3%82%8D%E3%81%84%E3%81%BB%E3%81%A9%E8%BA%AB%E3%81%AB%E3%81%A4%E3%81%8F%E6%9C%AC/2.1%E7%8B%90%E3%82%AC%E3%83%81%E3%83%A7%E3%82%A6%E3%83%88%E3%82%A6%E3%83%A2%E3%83%AD%E3%82%B3%E3%82%B7%E3%81%8B%E3%82%89%E5%AD%A6%E3%81%B6%E5%95%8F%E9%A1%8C%E8%A7%A3%E6%B1%BA%E3%81%AE%E9%87%8D%E8%A6%81%E3%81%AA%E5%8E%9F%E5%89%87/</link><pubDate>Mon, 14 Aug 2023 00:49:49 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9%E3%81%8C%E3%81%8A%E3%82%82%E3%81%97%E3%82%8D%E3%81%84%E3%81%BB%E3%81%A9%E8%BA%AB%E3%81%AB%E3%81%A4%E3%81%8F%E6%9C%AC/2.1%E7%8B%90%E3%82%AC%E3%83%81%E3%83%A7%E3%82%A6%E3%83%88%E3%82%A6%E3%83%A2%E3%83%AD%E3%82%B3%E3%82%B7%E3%81%8B%E3%82%89%E5%AD%A6%E3%81%B6%E5%95%8F%E9%A1%8C%E8%A7%A3%E6%B1%BA%E3%81%AE%E9%87%8D%E8%A6%81%E3%81%AA%E5%8E%9F%E5%89%87/</guid><description> 「考え得る全ての行動を把握しなければ、問題解決できない可能性がある」
行動のことを、「操作」と呼ぶこともできる 可能性のある操作をすべて列挙するためには？
一般的な用語で問題を説明し直す まずは、制約を列挙してみる
農夫は一度に1つのアイテムを手漕ぎ船に乗せることができる キツネとガチョウだけを同じ岸に残すことはできない ガチョウとトウモロコシだけを同じ岸に残すことはできない これらの制約の1つでも無視すれば、問題は簡単になる しかし、これはコバヤシマルになってしまう 操作の列挙
操作：キツネを川の向こう岸に運ぶ 操作：ガチョウを川の向こう岸に運ぶ 操作：トウモロコシを川の向こう岸に運ぶ 操作を汎用化・パラメータ化してみる
操作：手漕ぎ船を岸から岸に移動する 操作：手漕ぎ船が空ならば、岸からアイテムを乗せる 操作：手漕ぎ船が空でなければ、岸にアイテムを卸す</description></item><item><title>【2】狐・ガチョウ・トウモロコシ</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9%E3%81%8C%E3%81%8A%E3%82%82%E3%81%97%E3%82%8D%E3%81%84%E3%81%BB%E3%81%A9%E8%BA%AB%E3%81%AB%E3%81%A4%E3%81%8F%E6%9C%AC/2%E7%8B%90%E3%82%AC%E3%83%81%E3%83%A7%E3%82%A6%E3%83%88%E3%82%A6%E3%83%A2%E3%83%AD%E3%82%B3%E3%82%B7/</link><pubDate>Mon, 14 Aug 2023 00:44:36 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9%E3%81%8C%E3%81%8A%E3%82%82%E3%81%97%E3%82%8D%E3%81%84%E3%81%BB%E3%81%A9%E8%BA%AB%E3%81%AB%E3%81%A4%E3%81%8F%E6%9C%AC/2%E7%8B%90%E3%82%AC%E3%83%81%E3%83%A7%E3%82%A6%E3%83%88%E3%82%A6%E3%83%A2%E3%83%AD%E3%82%B3%E3%82%B7/</guid><description> 問題：川を渡るにはどうすればいい？ 狐・ガチョウ・トウモロコシの袋を持った農夫が川を渡ろうとしている。農夫は手漕ぎ船を持っている が、3 つのうちどれか 1 つしか乗せられない。残念なことに、狐とガチョウはおなかがすいている。狐と ガチョウを残すことはできない。狐がガチョウを食べてしまうからだ。ガチョウとトウモロコシの袋を残 すこともできない。ガチョウがトウモロコシを食べてしまうからだ。農夫が川の向こう岸へすべてを持っ て渡るには、どうすればいいだろうか？ 初手で運ぶのはガチョウしかいない 次に運ぶのは？ キツネ：ガチョウが食われる トウモロコシ：トウモロコシが食われる キツネ、トウモロコシのいずれかを運んで、ガチョウを連れて帰ればよい このパズルの難しいポイント 向こう岸からアイテムを持ち帰るとはだれも思わない 持って帰ってはいけないという説明はどこにもない もしこの説明があれば、このパズルは難しくない つまり、制約と操作の形式的な言い換えを行っていないところにこのパズルの難しさがある</description></item><item><title>【1.1】コバヤシマル</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9%E3%81%8C%E3%81%8A%E3%82%82%E3%81%97%E3%82%8D%E3%81%84%E3%81%BB%E3%81%A9%E8%BA%AB%E3%81%AB%E3%81%A4%E3%81%8F%E6%9C%AC/1.1%E3%82%B3%E3%83%90%E3%83%A4%E3%82%B7%E3%83%9E%E3%83%AB/</link><pubDate>Mon, 14 Aug 2023 00:41:19 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9%E3%81%8C%E3%81%8A%E3%82%82%E3%81%97%E3%82%8D%E3%81%84%E3%81%BB%E3%81%A9%E8%BA%AB%E3%81%AB%E3%81%A4%E3%81%8F%E6%9C%AC/1.1%E3%82%B3%E3%83%90%E3%83%A4%E3%82%B7%E3%83%9E%E3%83%AB/</guid><description> 「スター・トレックⅡ カーンの逆襲」より 宇宙艦隊の候補生が、絶対達成不可能なミッションにチャレンジする 戦闘に勝利する方法がなく、バッドエンドにしかなりえないミッション 絶望的な状況における候補生の反応をテストするため カーク艦長が候補生だったとき、シュミレータを書き換えて勝利した 問題を解決したわけではなく、回避しただけ</description></item><item><title>【1】問題解決の戦略</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9%E3%81%8C%E3%81%8A%E3%82%82%E3%81%97%E3%82%8D%E3%81%84%E3%81%BB%E3%81%A9%E8%BA%AB%E3%81%AB%E3%81%A4%E3%81%8F%E6%9C%AC/1%E5%95%8F%E9%A1%8C%E8%A7%A3%E6%B1%BA%E3%81%AE%E6%88%A6%E7%95%A5/</link><pubDate>Mon, 14 Aug 2023 00:34:35 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9%E3%81%8C%E3%81%8A%E3%82%82%E3%81%97%E3%82%8D%E3%81%84%E3%81%BB%E3%81%A9%E8%BA%AB%E3%81%AB%E3%81%A4%E3%81%8F%E6%9C%AC/1%E5%95%8F%E9%A1%8C%E8%A7%A3%E6%B1%BA%E3%81%AE%E6%88%A6%E7%95%A5/</guid><description> 問題を解決することと回避することは違う
問題が起こったとき、問題が起こっている部分を切り離すことは、問題を回避することである 問題には制約がつきもの
プログラムにおけるよくある制約 言語 プラットフォーム パフォーマンス メモリ使用量 プログラマの問題解決とは？
定義 事前に決められた制約を満たすような、何らかのタスクを実行するプログラムを書くこと 定義に従うならば、「何らかのタスクを実行する」が満たせても、「事前に決められた制約を満たす」ことができていないならば、問題解決とは言えない 結果は正しいが、条件を満たしていないプログラムのことを「コバヤシマル」と呼ぶらしい スタートレックに由来する 筆者曰く、この言葉を知らないならば、ギークカルチャーの教養がないらしいです 知らんがな</description></item><item><title>【書誌】プログラマの考え方がおもしろいほど身につく本</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9%E3%81%8C%E3%81%8A%E3%82%82%E3%81%97%E3%82%8D%E3%81%84%E3%81%BB%E3%81%A9%E8%BA%AB%E3%81%AB%E3%81%A4%E3%81%8F%E6%9C%AC/%E6%9B%B8%E8%AA%8C%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9%E3%81%8C%E3%81%8A%E3%82%82%E3%81%97%E3%82%8D%E3%81%84%E3%81%BB%E3%81%A9%E8%BA%AB%E3%81%AB%E3%81%A4%E3%81%8F%E6%9C%AC/</link><pubDate>Mon, 14 Aug 2023 00:30:18 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9%E3%81%8C%E3%81%8A%E3%82%82%E3%81%97%E3%82%8D%E3%81%84%E3%81%BB%E3%81%A9%E8%BA%AB%E3%81%AB%E3%81%A4%E3%81%8F%E6%9C%AC/%E6%9B%B8%E8%AA%8C%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9%E3%81%8C%E3%81%8A%E3%82%82%E3%81%97%E3%82%8D%E3%81%84%E3%81%BB%E3%81%A9%E8%BA%AB%E3%81%AB%E3%81%A4%E3%81%8F%E6%9C%AC/</guid><description>謝辞 イントロダクション 本書について 第1章問題解決の戦略 1.1 古典的な問題 1.1.1 狐・ガチョウ・トウモロコシ 1.1.2 スライドパズル 1.1.3 数独 1.1.4 Quarrasi ロック 1.2 一般的問題解決テクニック 1.2.1 常に計画を持て 1.2.2 問題を言い換える 1.2.3 問題を分割する 1.2.4 知っていることから始める 1.2.5 問題を簡略化する 1.2.6 類似点を探す 1.2.7 実験する 1.2.8 イライラしない 1.3 演習 第2章パズル 2.1 本章で使うC++のおさらい 2.2 パターンの出力 2.3 入力の処理 2.3.1 問題をかみ砕く 2.3.2 パーツを取りまとめる 2.4 状態の追跡 2.5 結論 2.6 演習問題 第3章配列による問題解決 3.1 配列のおさらい 3.1.1 保存 3.1.2 コピー 3.1.3 取得と検索 3.1.4 ソート 3.1.5 統計処理 3.2 配列を使った問題解決 3.2.1 リファクタリング 3.3 固定データの配列 3.</description></item><item><title>【1】プラグインの導入</title><link>https://dddsuz2.github.io/suzmemo/1%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3%E3%81%AE%E5%B0%8E%E5%85%A5/</link><pubDate>Sat, 12 Aug 2023 21:09:11 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/1%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3%E3%81%AE%E5%B0%8E%E5%85%A5/</guid><description> 現在はvim-plugを使用している プラグインの導入方法 ~/.config/nvim/init.vimに以下の内容を追記する &amp;#34; vim-plugの初期化 call plug#begin(&amp;#39;~/.local/share/nvim/plugged&amp;#39;) &amp;#34; プラグインを指定してインストール Plug &amp;#39;ユーザー名/リポジトリ名&amp;#39; &amp;#34; GitHubのユーザー名とリポジトリ名を指定 &amp;#34; 他のプラグインをここに追加 &amp;#34; vim-plugの終了 call plug#end() Plug ...でプラグインを追加した後、vimを再起動 :PlugInstallでインストールされる</description></item><item><title>【13.3.8】ほかのPythonコードの入手方法</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/13.3.8%E3%81%BB%E3%81%8B%E3%81%AEpython%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AE%E5%85%A5%E6%89%8B%E6%96%B9%E6%B3%95/</link><pubDate>Wed, 09 Aug 2023 22:34:00 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/13.3.8%E3%81%BB%E3%81%8B%E3%81%AEpython%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AE%E5%85%A5%E6%89%8B%E6%96%B9%E6%B3%95/</guid><description> PyPI Github ActiveState</description></item><item><title>【13.3.7】ランダムな値</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/13.3.7%E3%83%A9%E3%83%B3%E3%83%80%E3%83%A0%E3%81%AA%E5%80%A4/</link><pubDate>Wed, 09 Aug 2023 22:24:22 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/13.3.7%E3%83%A9%E3%83%B3%E3%83%80%E3%83%A0%E3%81%AA%E5%80%A4/</guid><description>random.choiceで引数のシーケンス、（リスト、タプル、辞書、文字列）から値を1つランダムに選んで返すことができる &amp;gt;&amp;gt;&amp;gt; from random import choice &amp;gt;&amp;gt;&amp;gt; choice([23, 9, 46, &amp;#39;bacon&amp;#39;, 0x123abc]) 46 &amp;gt;&amp;gt;&amp;gt; choice(range(100)) 18 &amp;gt;&amp;gt;&amp;gt; choice(&amp;#39;alphabet&amp;#39;) &amp;#39;a&amp;#39; sample()を使えば、複数の値をまとめて返せる &amp;gt;&amp;gt;&amp;gt; from random import sample &amp;gt;&amp;gt;&amp;gt; sample([23, 9, 46, &amp;#39;bacon&amp;#39;, 0x123abc], 3) [1194684, 9, 23] &amp;gt;&amp;gt;&amp;gt; sample(range(100), 4) [9, 3, 17, 89] &amp;gt;&amp;gt;&amp;gt; sample(&amp;#39;alphabet&amp;#39;, 7) [&amp;#39;a&amp;#39;, &amp;#39;t&amp;#39;, &amp;#39;l&amp;#39;, &amp;#39;p&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;a&amp;#39;, &amp;#39;h&amp;#39;] 任意の範囲からランダムな整数を取り出したいとき、randint()やrandrange()を使えばいい &amp;gt;&amp;gt;&amp;gt; randint(38, 74) 73 &amp;gt;&amp;gt;&amp;gt; randint(38, 74) 73 &amp;gt;&amp;gt;&amp;gt; randint(38, 74) 62 &amp;gt;&amp;gt;&amp;gt; randrange(38, 74) 52 &amp;gt;&amp;gt;&amp;gt; randrange(38, 74, 10) 48 &amp;gt;&amp;gt;&amp;gt; randrange(38, 74, 10) 68 0.</description></item><item><title>【13.3.6】pprintによるきれいな表示</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/13.3.6pprint%E3%81%AB%E3%82%88%E3%82%8B%E3%81%8D%E3%82%8C%E3%81%84%E3%81%AA%E8%A1%A8%E7%A4%BA/</link><pubDate>Wed, 09 Aug 2023 22:21:58 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/13.3.6pprint%E3%81%AB%E3%82%88%E3%82%8B%E3%81%8D%E3%82%8C%E3%81%84%E3%81%AA%E8%A1%A8%E7%A4%BA/</guid><description> pprint()を使うと、整形して結果を出力してくれる &amp;gt;&amp;gt;&amp;gt; from pprint import pprint &amp;gt;&amp;gt;&amp;gt; quotes = OrderedDict([ ... (&amp;#39;Moe&amp;#39;, &amp;#39;A wise guy, huh?&amp;#39;), ... (&amp;#39;Larry&amp;#39;, &amp;#39;Ow!&amp;#39;), ... (&amp;#39;Curly&amp;#39;, &amp;#39;Nyuk, nyuk!&amp;#39;), ... ]) &amp;gt;&amp;gt;&amp;gt; print(quotes) OrderedDict([(&amp;#39;Moe&amp;#39;, &amp;#39;A wise guy, huh?&amp;#39;), (&amp;#39;Larry&amp;#39;, &amp;#39;Ow!&amp;#39;), (&amp;#39;Curly&amp;#39;, &amp;#39;Nyuk, nyuk!&amp;#39;)]) &amp;gt;&amp;gt;&amp;gt; pprint(quotes) OrderedDict([(&amp;#39;Moe&amp;#39;, &amp;#39;A wise guy, huh?&amp;#39;), (&amp;#39;Larry&amp;#39;, &amp;#39;Ow!&amp;#39;), (&amp;#39;Curly&amp;#39;, &amp;#39;Nyuk, nyuk!&amp;#39;)])</description></item><item><title>【13.3.5】itertoolsによるコード構造の反復処理</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/13.3.5itertools%E3%81%AB%E3%82%88%E3%82%8B%E3%82%B3%E3%83%BC%E3%83%89%E6%A7%8B%E9%80%A0%E3%81%AE%E5%8F%8D%E5%BE%A9%E5%87%A6%E7%90%86/</link><pubDate>Wed, 09 Aug 2023 22:11:45 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/13.3.5itertools%E3%81%AB%E3%82%88%E3%82%8B%E3%82%B3%E3%83%BC%E3%83%89%E6%A7%8B%E9%80%A0%E3%81%AE%E5%8F%8D%E5%BE%A9%E5%87%A6%E7%90%86/</guid><description> itertoolsには、特別な目的を持つイテレータ関数が含まれている
for &amp;hellip; in ループ内で呼び出されると、一度に1個の要素を返し、呼び出しの間も自分の状態を覚えている chain()は、引数全体が1つのイテラブルであるかのように扱い、その中の要素を反復処理する
&amp;gt;&amp;gt;&amp;gt; import itertools &amp;gt;&amp;gt;&amp;gt; for item in itertools.chain([1, 2], [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;]): ... print(item) ... 1 2 a cycle()は無限イテレータで、引数から循環的に要素を返す import itertools for item in itertools.cycle([1, 2]): print(item) accumulate()は、それまでの要素を1つにまとめた値を計算する デフォルトでは、和を計算する sicpのってたよな&amp;hellip; 第2引数として関数を受け付けることもできる import itertools for item in itertools.accumulate([1, 2, 3, 4]): print(item) 1 3 6 10 import itertools def multiply(a, b): return a * b for item in itertools.accumulate([1, 2, 3, 4], multiply): print(item) ... 1 2 6 24</description></item><item><title>【13.3.4】スタック+キュー==デック</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/13.3.4%E3%82%B9%E3%82%BF%E3%83%83%E3%82%AF+%E3%82%AD%E3%83%A5%E3%83%BC%E3%83%87%E3%83%83%E3%82%AF/</link><pubDate>Wed, 09 Aug 2023 22:06:20 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/13.3.4%E3%82%B9%E3%82%BF%E3%83%83%E3%82%AF+%E3%82%AD%E3%83%A5%E3%83%BC%E3%83%87%E3%83%83%E3%82%AF/</guid><description> deque デック、両端キューのこと シーケンスのどちらの端でも要素を追加、削除できるようにしたいときに使う &amp;gt;&amp;gt;&amp;gt; from collections import deque &amp;gt;&amp;gt;&amp;gt; def palindrome(word): ... dq = deque(word) ... while len(dq) &amp;gt; 1: ... if dq.popleft() != dq.pop(): ... return False ... return True ... &amp;gt;&amp;gt;&amp;gt; palindrome(&amp;#39;a&amp;#39;) True &amp;gt;&amp;gt;&amp;gt; palindrome(&amp;#39;racecar&amp;#39;) True &amp;gt;&amp;gt;&amp;gt; palindrome(&amp;#39;&amp;#39;) True &amp;gt;&amp;gt;&amp;gt; palindrome(&amp;#39;rader&amp;#39;) False 高速な回文チェッカーが本当に必要なら、文字列を逆順の文字列と比較した方がはるかに高速 &amp;gt;&amp;gt;&amp;gt; def another_palindrome(word): ... return word == word[::-1] ... &amp;gt;&amp;gt;&amp;gt; another_palindrome(&amp;#39;rader&amp;#39;) False &amp;gt;&amp;gt;&amp;gt; another_palindrome(&amp;#39;radar&amp;#39;) True &amp;gt;&amp;gt;&amp;gt; another_palindrome(&amp;#39;halibut&amp;#39;) False</description></item><item><title>【13.3.3】OrderedDictによるキー順のソート</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/13.3.3ordereddict%E3%81%AB%E3%82%88%E3%82%8B%E3%82%AD%E3%83%BC%E9%A0%86%E3%81%AE%E3%82%BD%E3%83%BC%E3%83%88/</link><pubDate>Wed, 09 Aug 2023 22:03:52 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/13.3.3ordereddict%E3%81%AB%E3%82%88%E3%82%8B%E3%82%AD%E3%83%BC%E9%A0%86%E3%81%AE%E3%82%BD%E3%83%BC%E3%83%88/</guid><description>&amp;gt;&amp;gt;&amp;gt; from collections import OrderedDict &amp;gt;&amp;gt;&amp;gt; quotes = OrderedDict([ ... (&amp;#39;Moe&amp;#39;, &amp;#39;A wise guy, huh?&amp;#39;), ... (&amp;#39;Larry&amp;#39;, &amp;#39;Ow!&amp;#39;), ... (&amp;#39;Curly&amp;#39;, &amp;#39;Nyuk nyuk!&amp;#39;), ... ]) &amp;gt;&amp;gt;&amp;gt; for stooge in quotes: ... print(stooge) ... Moe Larry Curly</description></item><item><title>【13.3.2】Counterによる要素数の計算</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/13.3.2counter%E3%81%AB%E3%82%88%E3%82%8B%E8%A6%81%E7%B4%A0%E6%95%B0%E3%81%AE%E8%A8%88%E7%AE%97/</link><pubDate>Wed, 09 Aug 2023 21:47:34 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/13.3.2counter%E3%81%AB%E3%82%88%E3%82%8B%E8%A6%81%E7%B4%A0%E6%95%B0%E3%81%AE%E8%A8%88%E7%AE%97/</guid><description>&amp;gt;&amp;gt;&amp;gt; from collections import Counter &amp;gt;&amp;gt;&amp;gt; breakfast = [&amp;#39;spam&amp;#39;, &amp;#39;spam&amp;#39;, &amp;#39;eggs&amp;#39;, &amp;#39;spam&amp;#39;] &amp;gt;&amp;gt;&amp;gt; breakfast_counter = Counter(breakfast) &amp;gt;&amp;gt;&amp;gt; breakfast_counter Counter({&amp;#39;spam&amp;#39;: 3, &amp;#39;eggs&amp;#39;: 1}) most_common()関数は、全ての要素を降順で返す &amp;gt;&amp;gt;&amp;gt; breakfast_counter.most_common() [(&amp;#39;spam&amp;#39;, 3), (&amp;#39;eggs&amp;#39;, 1)] &amp;gt;&amp;gt;&amp;gt; breakfast_counter.most_common(1) [(&amp;#39;spam&amp;#39;, 3)] カウンタを結合することもできる &amp;gt;&amp;gt;&amp;gt; breakfast_counter Counter({&amp;#39;spam&amp;#39;: 3, &amp;#39;eggs&amp;#39;: 1}) &amp;gt;&amp;gt;&amp;gt; lunch = [&amp;#39;eggs&amp;#39;, &amp;#39;eggs&amp;#39;, &amp;#39;bacon&amp;#39;] &amp;gt;&amp;gt;&amp;gt; lunch_counter = Counter(lunch) &amp;gt;&amp;gt;&amp;gt; lunch_counter Counter({&amp;#39;eggs&amp;#39;: 2, &amp;#39;bacon&amp;#39;: 1}) &amp;gt;&amp;gt;&amp;gt; breakfast_counter + lunch_counter Counter({&amp;#39;spam&amp;#39;: 3, &amp;#39;eggs&amp;#39;: 3, &amp;#39;bacon&amp;#39;: 1}) &amp;gt;&amp;gt;&amp;gt; breakfast_counter - lunch_counter Counter({&amp;#39;spam&amp;#39;: 3}) &amp;gt;&amp;gt;&amp;gt; lunch_counter - breakfast_counter Counter({&amp;#39;eggs&amp;#39;: 1, &amp;#39;bacon&amp;#39;: 1}) &amp;gt;&amp;gt;&amp;gt; breakfast_counter &amp;amp; lunch_counter Counter({&amp;#39;eggs&amp;#39;: 1}) &amp;gt;&amp;gt;&amp;gt; breakfast_counter | lunch_counter Counter({&amp;#39;spam&amp;#39;: 3, &amp;#39;eggs&amp;#39;: 2, &amp;#39;bacon&amp;#39;: 1})</description></item><item><title>【13.3.1】setdefaultとdefaultdictによる存在しないキーの処理</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/13.3.1setdefault%E3%81%A8defaultdict%E3%81%AB%E3%82%88%E3%82%8B%E5%AD%98%E5%9C%A8%E3%81%97%E3%81%AA%E3%81%84%E3%82%AD%E3%83%BC%E3%81%AE%E5%87%A6%E7%90%86/</link><pubDate>Wed, 09 Aug 2023 21:44:46 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/13.3.1setdefault%E3%81%A8defaultdict%E3%81%AB%E3%82%88%E3%82%8B%E5%AD%98%E5%9C%A8%E3%81%97%E3%81%AA%E3%81%84%E3%82%AD%E3%83%BC%E3%81%AE%E5%87%A6%E7%90%86/</guid><description>setdefault()とdefaultdict()による存在しないキーの処理 &amp;gt;&amp;gt;&amp;gt; periodic_table = {&amp;#39;Hydrogen&amp;#39;: 1, &amp;#39;Helium&amp;#39;: 2} &amp;gt;&amp;gt;&amp;gt; periodic_table {&amp;#39;Hydrogen&amp;#39;: 1, &amp;#39;Helium&amp;#39;: 2} &amp;gt;&amp;gt;&amp;gt; carbon = periodic_table.setdefault(&amp;#39;Carbon&amp;#39;, 12) &amp;gt;&amp;gt;&amp;gt; carbon 12 &amp;gt;&amp;gt;&amp;gt; periodic_table {&amp;#39;Hydrogen&amp;#39;: 1, &amp;#39;Helium&amp;#39;: 2, &amp;#39;Carbon&amp;#39;: 12} &amp;gt;&amp;gt;&amp;gt; helium = periodic_table.setdefault(&amp;#39;Helium&amp;#39;, 947) &amp;gt;&amp;gt;&amp;gt; helium 2 &amp;gt;&amp;gt;&amp;gt; periodic_table {&amp;#39;Hydrogen&amp;#39;: 1, &amp;#39;Helium&amp;#39;: 2, &amp;#39;Carbon&amp;#39;: 12} &amp;gt;&amp;gt;&amp;gt; from collections import defaultdict &amp;gt;&amp;gt;&amp;gt; periodic_table = defaultdict(int) &amp;gt;&amp;gt;&amp;gt; periodic_table[&amp;#39;Hydrogen&amp;#39;] = 1 &amp;gt;&amp;gt;&amp;gt; periodic_table[&amp;#39;Lead&amp;#39;] 0 &amp;gt;&amp;gt;&amp;gt; periodic_table defaultdict(&amp;lt;class &amp;#39;int&amp;#39;&amp;gt;, {&amp;#39;Hydrogen&amp;#39;: 1, &amp;#39;Lead&amp;#39;: 0}) &amp;gt;&amp;gt;&amp;gt; from collections import defaultdict &amp;gt;&amp;gt;&amp;gt; def no_idea(): .</description></item><item><title>【13.3】Python標準ライブラリ</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/13.3python%E6%A8%99%E6%BA%96%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA/</link><pubDate>Wed, 09 Aug 2023 21:34:08 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/13.3python%E6%A8%99%E6%BA%96%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA/</guid><description> Pythonの有名な宣伝文句の一つが、「バッテリー同梱」 Pythonコードを書くときは、書こうとしている機能の標準モジュールを探してみると良い</description></item><item><title>【13.2.4】モジュールかオブジェクトか</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/13.2.4%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%8B%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%8B/</link><pubDate>Wed, 09 Aug 2023 21:30:59 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/13.2.4%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%8B%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%8B/</guid><description> コードをモジュールでまとめるかオブジェクトにまとめるか モジュール内のすべてのクラス、関数、グローバル変数は、すべて外部から参照できる オブジェクトは、プロパティとダンダー(__)名を使って、データ属性に対してアクセスを制御できる</description></item><item><title>【13.2.3】名前空間パッケージ</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/13.2.3%E5%90%8D%E5%89%8D%E7%A9%BA%E9%96%93%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8/</link><pubDate>Wed, 09 Aug 2023 21:17:27 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/13.2.3%E5%90%8D%E5%89%8D%E7%A9%BA%E9%96%93%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8/</guid><description> Pythonモジュールは、次の二つの形でパッケージングできる
単一のモジュール パッケージ 名前空間パッケージ
パッケージを複数のディレクトリに分割する critters - rougarou.py - wendigo.py from critters import rougarou, wendigo</description></item><item><title>【13.2.2】相対インポートと絶対インポート</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/13.2.2%E7%9B%B8%E5%AF%BE%E3%82%A4%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%88%E3%81%A8%E7%B5%B6%E5%AF%BE%E3%82%A4%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%88/</link><pubDate>Tue, 08 Aug 2023 17:54:19 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/13.2.2%E7%9B%B8%E5%AF%BE%E3%82%A4%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%88%E3%81%A8%E7%B5%B6%E5%AF%BE%E3%82%A4%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%88/</guid><description>Pythonでは以下のインポート方法をサポートする
相対インポート
絶対インポート
絶対インポート
検索パスに含まれる個々のディレクトリでインポートされたファイル名のファイルか、ディレクトリを探す 相対インポート
呼び出し元のプログラムから、相対パスでインポートできる 呼び出し元プログラムと同じディレクトリにある場合 from . import module 呼び出し元プログラムの親ディレクトリにある場合 from .. import module 呼び出し元プログラムの兄弟ディレクトリにある場合 from ..folder_name import module</description></item><item><title>【13.2.1】モジュール検索パス</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/13.2.1%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E6%A4%9C%E7%B4%A2%E3%83%91%E3%82%B9/</link><pubDate>Tue, 08 Aug 2023 17:36:52 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/13.2.1%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E6%A4%9C%E7%B4%A2%E3%83%91%E3%82%B9/</guid><description> Pythonディレクトリが参照するすべての場所は、標準ライブラリのsysモジュールをimportしてそのpathを見ればわかる &amp;gt;&amp;gt;&amp;gt; import sys &amp;gt;&amp;gt;&amp;gt; for place in sys.path: ... print(place) ... /home/linuxbrew/.linuxbrew/Cellar/python@3.9/3.9.12/lib/python39.zip /home/linuxbrew/.linuxbrew/Cellar/python@3.9/3.9.12/lib/python3.9 /home/linuxbrew/.linuxbrew/Cellar/python@3.9/3.9.12/lib/python3.9/lib-dynload /home/linuxbrew/.linuxbrew/Cellar/python@3.9/3.9.12/lib/python3.9/site-packages 最初の行の空行はカレントディレクトリ import fastの場合はfast.pyをまず探す 検索パスは変更できる import sys sys.path.insert(0, &amp;#34;/my/modules&amp;#34;)</description></item><item><title>【13.2】パッケージ</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/13.2%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8/</link><pubDate>Tue, 08 Aug 2023 17:28:44 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/13.2%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8/</guid><description> パッケージと呼ばれる階層構造にモジュールをまとめることができる .pyファイルを格納するサブディレクトリのこと questions.py from choices import advice fast print(&amp;#34;Let&amp;#39;s go to&amp;#34;, fast.pick()) print(&amp;#34;Should we take out?&amp;#34;, advice.give()) choices/fast.py from random import choice places = [&amp;#34;McDonalds&amp;#34;, &amp;#34;KFC&amp;#34;, &amp;#34;Burger King&amp;#34;, &amp;#34;Taco Bell&amp;#34;, &amp;#34;Wendy&amp;#34;, &amp;#34;Arbys&amp;#34;, &amp;#34;Pizza Hut&amp;#34;] def pick(): return choice(places) choices/advice.py from random import choice answers = [&amp;#34;Yes!&amp;#34;, &amp;#34;No!&amp;#34;, &amp;#34;Reply hazy&amp;#34;, &amp;#34;Sorry, what?&amp;#34;] def give(): return choice(answers) Pythonのバージョンが3.3よりも前の場合、choiceディレクトリをPythonパッケージにするためには、__init__.pyという名前のファイルを入れなければならなかった ファイルの内容は空で良い</description></item><item><title>【13.3】必要なものだけインポートするには</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/13.1.2%E5%BF%85%E8%A6%81%E3%81%AA%E3%82%82%E3%81%AE%E3%81%A0%E3%81%91%E3%82%A4%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%88%E3%81%99%E3%82%8B%E3%81%AB%E3%81%AF/</link><pubDate>Tue, 08 Aug 2023 17:25:53 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/13.1.2%E5%BF%85%E8%A6%81%E3%81%AA%E3%82%82%E3%81%AE%E3%81%A0%E3%81%91%E3%82%A4%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%88%E3%81%99%E3%82%8B%E3%81%AB%E3%81%AF/</guid><description> モジュールは全体でも、一部だけでもインポートできる fast4.py from fast import pick place = pick() print(&amp;#34;Let&amp;#39;s go to&amp;#34;, place) fast5.py from fast import pick as who_cares place = who_cares() print(&amp;#34;Let&amp;#39;s go to&amp;#34;, place)</description></item><item><title>【13.1.1】別名によるモジュールのimport</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/13.1.1%E5%88%A5%E5%90%8D%E3%81%AB%E3%82%88%E3%82%8B%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%AEimport/</link><pubDate>Tue, 08 Aug 2023 17:24:01 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/13.1.1%E5%88%A5%E5%90%8D%E3%81%AB%E3%82%88%E3%82%8B%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%AEimport/</guid><description> どこかに同じ名前のモジュールがある
もっと使いやすい名前がいい
こういうときには別名を使ってimportする
import fast as f place = f.pick() print(&amp;#34;Let&amp;#39;s go to&amp;#39;, place)</description></item><item><title>【13.1】モジュールのimport</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/13.1%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%AEimport/</link><pubDate>Tue, 08 Aug 2023 17:14:22 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/13.1%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%AEimport/</guid><description> import module import文の最も単純な書き方 fast.py &amp;gt;&amp;gt;&amp;gt; from random import choice &amp;gt;&amp;gt;&amp;gt; places = [&amp;#39;McDonalds&amp;#39;, &amp;#39;KFC&amp;#39;, &amp;#39;Burger King&amp;#39;, &amp;#39;Taco Bell&amp;#39;, &amp;#39;Wendys&amp;#39;, &amp;#39;Arbys&amp;#39;, &amp;#39;Pizza Hut&amp;#39;] &amp;gt;&amp;gt;&amp;gt; def pick(): ... return choice(places) lunch.py &amp;gt;&amp;gt;&amp;gt; import fast &amp;gt;&amp;gt;&amp;gt; place = fast.pick() &amp;gt;&amp;gt;&amp;gt; print(&amp;#34;Let&amp;#39;s go to&amp;#34;, place) メインプログラムのlunch.pyは、fastをインポートしている
fast.pyは、randomモジュールからchoice関数をインポートしている
メインプログラムと自作モジュールではインポートの方法が異なる
第一のインポートでは、fastモジュール全体をインポートしている pickを呼び出すためには、fastというプレフィックスをつけなければならない モジュールの名前でモジュールの内容を修飾することにより、名前の衝突が避けられる 第2のインポートでは、randomモジュールから直接choice関数をインポートしている（名前衝突がないことがわかっているため） 関数の中でimportしてもよい</description></item><item><title>【13】モジュールとimport文</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/13%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%A8import%E6%96%87/</link><pubDate>Tue, 08 Aug 2023 17:13:33 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/13%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%A8import%E6%96%87/</guid><description> モジュールとは、Pythonコードをまとめたファイル モジュールのコードはimport文で参照する</description></item><item><title>【12.15】attrs</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12.15attrs/</link><pubDate>Tue, 08 Aug 2023 15:13:59 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12.15attrs/</guid><description> attrsを使ってオブジェクトを定義するのがいいらしい The One Python Library Everyone Needs曰く　</description></item><item><title>【12.14】データクラス</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12.14%E3%83%87%E3%83%BC%E3%82%BF%E3%82%AF%E3%83%A9%E3%82%B9/</link><pubDate>Tue, 08 Aug 2023 15:05:16 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12.14%E3%83%87%E3%83%BC%E3%82%BF%E3%82%AF%E3%83%A9%E3%82%B9/</guid><description>データ格納のためのオブジェクト
メソッドは定義されない
旧来のオブジェクト
&amp;gt;&amp;gt;&amp;gt; class TeenyClass: ... def __init__(self, name): ... self.name = name ... &amp;gt;&amp;gt;&amp;gt; teeny = TeenyClass(&amp;#39;itsy&amp;#39;) &amp;gt;&amp;gt;&amp;gt; teeny.name &amp;#39;itsy&amp;#39; データクラスを使った場合 &amp;gt;&amp;gt;&amp;gt; from dataclasses import dataclass &amp;gt;&amp;gt;&amp;gt; @dataclass ... class TeenyDataClass: ... name: str ... &amp;gt;&amp;gt;&amp;gt; teeny = TeenyDataClass(&amp;#39;bitsy&amp;#39;) &amp;gt;&amp;gt;&amp;gt; teeny.name &amp;#39;bitsy&amp;#39; データクラスオブジェクトを作る場合は、クラスで定義された順序で実引数を渡していくか、名前付き引数を使う（こちらの場合は、順序はどうでもいい） &amp;gt;&amp;gt;&amp;gt; from dataclasses import dataclass &amp;gt;&amp;gt;&amp;gt; @dataclass ... class AnimalClass: ... name: str ... habitat: str ... teeth: int = 0 ... &amp;gt;&amp;gt;&amp;gt; snowman = AnimalClass(&amp;#39;yeti&amp;#39;, &amp;#39;Himalayas&amp;#39;, 46) &amp;gt;&amp;gt;&amp;gt; duck = AnimalClass(habitat=&amp;#39;lake&amp;#39;, name=&amp;#39;duck&amp;#39;) &amp;gt;&amp;gt;&amp;gt; snowman AnimalClass(name=&amp;#39;yeti&amp;#39;, habitat=&amp;#39;Himalayas&amp;#39;, teeth=46) &amp;gt;&amp;gt;&amp;gt; duck AnimalClass(name=&amp;#39;duck&amp;#39;, habitat=&amp;#39;lake&amp;#39;, teeth=0) &amp;gt;&amp;gt;&amp;gt; duck.</description></item><item><title>【12.13】名前付きタプル</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12.13%E5%90%8D%E5%89%8D%E4%BB%98%E3%81%8D%E3%82%BF%E3%83%97%E3%83%AB/</link><pubDate>Tue, 08 Aug 2023 14:59:10 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12.13%E5%90%8D%E5%89%8D%E4%BB%98%E3%81%8D%E3%82%BF%E3%83%97%E3%83%AB/</guid><description> 名前付きタプルはタプルのサブクラス 位置だけでなく名前でも値にアクセスできる &amp;gt;&amp;gt;&amp;gt; from collections import namedtuple &amp;gt;&amp;gt;&amp;gt; Duck = namedtuple(&amp;#39;Duck&amp;#39;, &amp;#39;bill tail&amp;#39;) &amp;gt;&amp;gt;&amp;gt; duck = Duck(&amp;#39;wide orange&amp;#39;, &amp;#39;long&amp;#39;) &amp;gt;&amp;gt;&amp;gt; duck Duck(bill=&amp;#39;wide orange&amp;#39;, tail=&amp;#39;long&amp;#39;) &amp;gt;&amp;gt;&amp;gt; duck.bill &amp;#39;wide orange&amp;#39; &amp;gt;&amp;gt;&amp;gt; duck.tail &amp;#39;long&amp;#39; 名前付きタプルは辞書からも作ることができる &amp;gt;&amp;gt;&amp;gt; parts = {&amp;#39;bill&amp;#39;: &amp;#39;wide orange&amp;#39;, &amp;#39;tail&amp;#39;: &amp;#39;long&amp;#39;} &amp;gt;&amp;gt;&amp;gt; duck2 = Duck(**parts) &amp;gt;&amp;gt;&amp;gt; duck2 Duck(bill=&amp;#39;wide orange&amp;#39;, tail=&amp;#39;long&amp;#39;) イミュータブルなオブジェクトのように見え、そのようにふるまう オブジェクトよりも空間的、時間的に効率が良い 辞書スタイルの角括弧ではなく、ドット記法で属性にアクセスできる 辞書のキーとして使える</description></item><item><title>【12.12】オブジェクトとその他のものの使い分け</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12.12%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%A8%E3%81%9D%E3%81%AE%E4%BB%96%E3%81%AE%E3%82%82%E3%81%AE%E3%81%AE%E4%BD%BF%E3%81%84%E5%88%86%E3%81%91/</link><pubDate>Tue, 08 Aug 2023 14:53:04 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12.12%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%A8%E3%81%9D%E3%81%AE%E4%BB%96%E3%81%AE%E3%82%82%E3%81%AE%E3%81%AE%E4%BD%BF%E3%81%84%E5%88%86%E3%81%91/</guid><description> 動作（メソッド）は同じだが、内部状態（属性）は異なる複数のインスタンスをを必要とする場合、オブジェクトを使う クラスは継承をサポートするが、モジュールはサポートしない 何かを1つだけ必要とするときには、モジュールが良い Pythonモジュールは何度参照されても、1個のコピーしかロードされない シングルトンとして使える 複数の値をもつ変数があり、それらを複数の関数に引数として渡せるときは、それをクラスとして定義した方が良い場合がある 問題にとって最も単純な方法を使う</description></item><item><title>【12.11】集約とコンポジション</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12.11%E9%9B%86%E7%B4%84%E3%81%A8%E3%82%B3%E3%83%B3%E3%83%9D%E3%82%B8%E3%82%B7%E3%83%A7%E3%83%B3/</link><pubDate>Tue, 08 Aug 2023 14:47:23 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12.11%E9%9B%86%E7%B4%84%E3%81%A8%E3%82%B3%E3%83%B3%E3%83%9D%E3%82%B8%E3%82%B7%E3%83%A7%E3%83%B3/</guid><description>継承よりも集約やコンポジション（合成）の方がいい場合がある コンポジション あるものが別のものの一部になっている場合 &amp;gt;&amp;gt;&amp;gt; class Bill: ... def __init__(self, description): ... self.description = description ... &amp;gt;&amp;gt;&amp;gt; class Tail: ... def __init__(self, length): ... self.length = length ... &amp;gt;&amp;gt;&amp;gt; class Duck: ... def __init__(self, bill, tail): ... self.bill = bill ... self.tail = tail ... def about(self): ... print(&amp;#39;This duck has a&amp;#39;, self.bill.description, ... &amp;#39;bill and a&amp;#39;, self.tail.length, &amp;#39;tail&amp;#39;) ... &amp;gt;&amp;gt;&amp;gt; a_tail = Tail(&amp;#39;long&amp;#39;) &amp;gt;&amp;gt;&amp;gt; a_bill = Bill(&amp;#39;wide orange&amp;#39;) &amp;gt;&amp;gt;&amp;gt; duck = Duck(a_bill, a_tail) &amp;gt;&amp;gt;&amp;gt; duck.</description></item><item><title>【12.10】特殊メソッド</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12.10%E7%89%B9%E6%AE%8A%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89/</link><pubDate>Tue, 08 Aug 2023 14:29:11 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12.10%E7%89%B9%E6%AE%8A%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89/</guid><description>a = 3 + 8のようなコードを入力したとき
+ の実装方法をどのようにして知るのか？ 文字列連結の+との違いをどうやって知るのか？ 特殊メソッドを使ってたどりつく マジックメソッドともいう 2つの単語を、大文字小文字の区別なく比較するequalsメソッドを考えてみる
&amp;gt;&amp;gt;&amp;gt; class Word: ... def __init__(self, text): ... self.text = text ... def equals(self, word2): ... return self.text.lower() == word2.text.lower() ... &amp;gt;&amp;gt;&amp;gt; first = Word(&amp;#39;ha&amp;#39;) &amp;gt;&amp;gt;&amp;gt; second = Word(&amp;#39;HA&amp;#39;) &amp;gt;&amp;gt;&amp;gt; third = Word(&amp;#39;eh&amp;#39;) &amp;gt;&amp;gt;&amp;gt; first.equals(second) True &amp;gt;&amp;gt;&amp;gt; first.equals(third) False equalsメソッドを__eq__に変更してみる &amp;gt;&amp;gt;&amp;gt; class Word: ... def __init__(self, text): ... self.text = text ... def __eq__(self, word2): ... return self.text.lower() == word2.</description></item><item><title>【12.9】ダックタイピング</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12.9%E3%83%80%E3%83%83%E3%82%AF%E3%82%BF%E3%82%A4%E3%83%94%E3%83%B3%E3%82%B0/</link><pubDate>Mon, 07 Aug 2023 16:59:23 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12.9%E3%83%80%E3%83%83%E3%82%AF%E3%82%BF%E3%82%A4%E3%83%94%E3%83%B3%E3%82%B0/</guid><description>Pythonはポリモーフィズムの緩やかな実装を持つ
クラスの種類にかかわらず、メソッドの名前と引数に基づき、異なるオブジェクトに対して同じ操作を適用する 同じ__init__()メソッドを共有する3種類のQuoteクラスを定義してみる
who()は、保存されているperson文字列を単純に返す says()は、保存されているwordsにクラスごとに異なる記号を付けて返す &amp;gt;&amp;gt;&amp;gt; class Quote: ... def __init__(self, person, words): ... self.person = person ... self.words = words ... def who(self): ... return self.person ... def says(self): ... return self.words + &amp;#39;,&amp;#39; &amp;gt;&amp;gt;&amp;gt; class QuestionQuote(Quote): ... def says(self): ... return self.words + &amp;#39;?&amp;#39; ... &amp;gt;&amp;gt;&amp;gt; class ExclamationQuote(Quote): ... def says(self): ... return self.words + &amp;#39;!&amp;#39; ... __init__()メソッドのオーバライドをQuestionQuoteとExclamationQuoteでは行っていない インスタンス変数のpersonとwordのため、自動的に親クラスの__init__()を呼び出す &amp;gt;&amp;gt;&amp;gt; hunter = Quote(&amp;#39;Elmer Fudd&amp;#39;, &amp;#34;I&amp;#39;m hunting wabbits&amp;#34;) &amp;gt;&amp;gt;&amp;gt; print(hunter.</description></item><item><title>【12.8.3】静的メソッド</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12.8.3%E9%9D%99%E7%9A%84%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89/</link><pubDate>Mon, 07 Aug 2023 16:57:24 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12.8.3%E9%9D%99%E7%9A%84%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89/</guid><description> クラスにもオブジェクトにも影響を与えないものを静的メソッドという &amp;gt;&amp;gt;&amp;gt; class CoyoteWeapon: ... @staticmethod ... def commercial(): ... print(&amp;#39;This CoyoteWeapon has been brought to you by Acme&amp;#39;) ... &amp;gt;&amp;gt;&amp;gt; CoyoteWeapon.commercial() This CoyoteWeapon has been brought to you by Acme 静的メソッドは、オブジェクトを作らずに実行できる</description></item><item><title>【12.8.2】クラスメソッド</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12.8.2%E3%82%AF%E3%83%A9%E3%82%B9%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89/</link><pubDate>Mon, 07 Aug 2023 16:53:10 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12.8.2%E3%82%AF%E3%83%A9%E3%82%B9%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89/</guid><description> クラスメソッドはクラス全体に変更を与える クラスに加えた変更は、全てのオブジェクトに影響を与える メソッドの第一引数は、クラス自体そのもの &amp;gt;&amp;gt;&amp;gt; class A: ... count = 0 ... def __init__(self): ... A.count += 1 ... def exclaim(self): ... print(&amp;#34;I&amp;#39;m an A!&amp;#34;) ... @classmethod ... def kids(cls): ... print(&amp;#34;A has&amp;#34;, cls.count, &amp;#34;little objects.&amp;#34;) ... &amp;gt;&amp;gt;&amp;gt; easy_a = A() &amp;gt;&amp;gt;&amp;gt; breezy_a = A() &amp;gt;&amp;gt;&amp;gt; wheezy_a = A() &amp;gt;&amp;gt;&amp;gt; A.kids() A has 3 little objects. self.count(インスタンス属性)ではなく、A.count(クラス属性)を参照している cls.countでもA.countでも意味は同じ</description></item><item><title>【12.8.1】インスタンスメソッド</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12.8.1%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89/</link><pubDate>Mon, 07 Aug 2023 16:44:43 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12.8.1%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89/</guid><description> クラス定義の中でメソッドの第一引数がselfになっていたら、それはインスタンスメソッド メソッドが呼び出されると、Pythonはメソッドにオブジェクトを与える</description></item><item><title>【12.8】メソッドのタイプ</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12.8%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%AE%E3%82%BF%E3%82%A4%E3%83%97/</link><pubDate>Mon, 07 Aug 2023 16:41:37 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12.8%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%AE%E3%82%BF%E3%82%A4%E3%83%97/</guid><description>メソッド
クラス自体の一部になっているもの クラスから作られたオブジェクトの一部になっているもの そのどちらでもない デコレータがついていないメソッドはインスタンスメソッド
第一引数は個別のインスタンスを参照するselfでなければならない @classmethodデコレータがついているメソッドはクラスメソッド
第一引数はクラス自体を参照するclsでなければならない @staticmethodがついているメソッドは静的メソッドであり、第一引数はオブジェクトやクラス以外のものになる</description></item><item><title>【12.7.3】クラスの属性とインスタンスの属性</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12.7.3%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E5%B1%9E%E6%80%A7%E3%81%A8%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%81%AE%E5%B1%9E%E6%80%A7/</link><pubDate>Mon, 07 Aug 2023 16:34:09 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12.7.3%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E5%B1%9E%E6%80%A7%E3%81%A8%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%81%AE%E5%B1%9E%E6%80%A7/</guid><description>クラスには属性を追加できる 追加された属性は、クラスから作られたインスタンスにそのまま受け継がれる &amp;gt;&amp;gt;&amp;gt; class Fruit: ... color = &amp;#39;red&amp;#39; ... &amp;gt;&amp;gt;&amp;gt; blueberry = Fruit() &amp;gt;&amp;gt;&amp;gt; Fruit.color &amp;#39;red&amp;#39; &amp;gt;&amp;gt;&amp;gt; blueberry.color &amp;#39;red&amp;#39; インスタンスの属性の値を変更しても、クラスの属性に影響は及ばない &amp;gt;&amp;gt;&amp;gt; blueberry.color = &amp;#39;blue&amp;#39; &amp;gt;&amp;gt;&amp;gt; blueberry.color &amp;#39;blue&amp;#39; &amp;gt;&amp;gt;&amp;gt; Fruit.color &amp;#39;red&amp;#39; あとでクラス属性を変更しても、既存のインスタンスには影響を与えない しかし、新しいオブジェクトには影響を及ぼす オブジェクトがイミュータブルの時だけかも&amp;hellip; &amp;gt;&amp;gt;&amp;gt; Fruit.color = &amp;#39;orange&amp;#39; &amp;gt;&amp;gt;&amp;gt; Fruit.color &amp;#39;orange&amp;#39; &amp;gt;&amp;gt;&amp;gt; blueberry.color &amp;#39;blue&amp;#39; &amp;gt;&amp;gt;&amp;gt; new_fruit = Fruit() &amp;gt;&amp;gt;&amp;gt; new_fruit.color &amp;#39;orange&amp;#39; &amp;gt;&amp;gt;&amp;gt; class test: ... x = [1, 2, 3, 4] ... &amp;gt;&amp;gt;&amp;gt; test_1 = test() &amp;gt;&amp;gt;&amp;gt; test_1.x [1, 2, 3, 4] &amp;gt;&amp;gt;&amp;gt; test.</description></item><item><title>【12.7.2】属性を隠すための名前マングリング</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12.7.2%E5%B1%9E%E6%80%A7%E3%82%92%E9%9A%A0%E3%81%99%E3%81%9F%E3%82%81%E3%81%AE%E5%90%8D%E5%89%8D%E3%83%9E%E3%83%B3%E3%82%B0%E3%83%AA%E3%83%B3%E3%82%B0/</link><pubDate>Mon, 07 Aug 2023 16:29:05 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12.7.2%E5%B1%9E%E6%80%A7%E3%82%92%E9%9A%A0%E3%81%99%E3%81%9F%E3%82%81%E3%81%AE%E5%90%8D%E5%89%8D%E3%83%9E%E3%83%B3%E3%82%B0%E3%83%AA%E3%83%B3%E3%82%B0/</guid><description>先頭に__をつけることで、クラス定義の外からは見えないように属性を定義できる &amp;gt;&amp;gt;&amp;gt; class Duck: ... def __init__(self, input_name): ... self.__name = input_name ... @property ... def name(self): ... print(&amp;#39;inside the getter&amp;#39;) ... return self.__name ... @name.setter ... def name(self, input_name): ... print(&amp;#39;inside the setter&amp;#39;) ... self.__name = input_name ... &amp;gt;&amp;gt;&amp;gt; fowl = Duck(&amp;#39;Howard&amp;#39;) &amp;gt;&amp;gt;&amp;gt; fowl.name inside the getter &amp;#39;Howard&amp;#39; &amp;gt;&amp;gt;&amp;gt; fowl.name = &amp;#39;Donald&amp;#39; inside the setter &amp;gt;&amp;gt;&amp;gt; fowl.name inside the getter &amp;#39;Donald&amp;#39; &amp;gt;&amp;gt;&amp;gt; fowl.__name Traceback (most recent call last): File &amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;, line 1, in &amp;lt;module&amp;gt; AttributeError: &amp;#39;Duck&amp;#39; object has no attribute &amp;#39;__name&amp;#39; 実際に属性が非公開になっているわけではない 外部コードが名前を偶然当てたりしないようなものになるように名前をマングリング（変形）する &amp;gt;&amp;gt;&amp;gt; fowl.</description></item><item><title>【12.7.1】計算された値のためのプロパティ</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12.7.1%E8%A8%88%E7%AE%97%E3%81%95%E3%82%8C%E3%81%9F%E5%80%A4%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3/</link><pubDate>Mon, 07 Aug 2023 16:24:16 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12.7.1%E8%A8%88%E7%AE%97%E3%81%95%E3%82%8C%E3%81%9F%E5%80%A4%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3/</guid><description> プロパティは計算された値も返すことができる &amp;gt;&amp;gt;&amp;gt; class Circle: ... def __init__(self, radius): ... self.radius = radius ... @property ... def diameter(self): ... return 2 * self.radius ... &amp;gt;&amp;gt;&amp;gt; c = Circle(5) &amp;gt;&amp;gt;&amp;gt; c.radius 5 &amp;gt;&amp;gt;&amp;gt; c.diameter 10 &amp;gt;&amp;gt;&amp;gt; c.radius = 7 &amp;gt;&amp;gt;&amp;gt; c.diameter 14 &amp;gt;&amp;gt;&amp;gt; c.diameter = 20 Traceback (most recent call last): File &amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;, line 1, in &amp;lt;module&amp;gt; AttributeError: can&amp;#39;t set attribute プロパティセッターを定義しなければ、外部からプロパティを設定することはできない プロパティは、属性の定義を書き換えても、呼び出しているコードには手をつけなくても良いため便利</description></item><item><title>【12.7】属性へのアクセス</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12.7%E5%B1%9E%E6%80%A7%E3%81%B8%E3%81%AE%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9/</link><pubDate>Mon, 07 Aug 2023 13:59:30 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12.7%E5%B1%9E%E6%80%A7%E3%81%B8%E3%81%AE%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9/</guid><description>Pythonの属性とメソッドはパブリックである
直接アクセス
&amp;gt;&amp;gt;&amp;gt; class Duck: ... def __init__(self, input_name): ... self.name = input_name ... &amp;gt;&amp;gt;&amp;gt; fowl = Duck(&amp;#39;Daffy&amp;#39;) &amp;gt;&amp;gt;&amp;gt; fowl.name &amp;#39;Daffy&amp;#39; &amp;gt;&amp;gt;&amp;gt; fowl.name = &amp;#39;Daphne&amp;#39; &amp;gt;&amp;gt;&amp;gt; fowl.name &amp;#39;Daphne&amp;#39; 属性を直接変更できてしまう
オブジェクト指向言語において、外部から直接アクセスできない非公開のオブジェクト属性をサポートしている場合
そのような非公開属性の値を読み書きするゲッター、セッターメソッドを書く Pythonは非公開属性を持っていないが、属性名を非公開っぽくわかりにくくした上でゲッター、セッターを書くことができる &amp;gt;&amp;gt;&amp;gt; class Duck: ... def __init__(self, input_name): ... self.hidden_name = input_name ... def get_name(self): ... print(&amp;#39;inside the getter&amp;#39;) ... return self.hidden_name ... def set_name(self, input_name): ... print(&amp;#39;inside the setter&amp;#39;) ... self.hidden_name = input_name ... &amp;gt;&amp;gt;&amp;gt; don = Duck(&amp;#39;Donald&amp;#39;) &amp;gt;&amp;gt;&amp;gt; don.</description></item><item><title>【12.6】selfの自己弁護</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12.6self%E3%81%AE%E8%87%AA%E5%B7%B1%E5%BC%81%E8%AD%B7/</link><pubDate>Mon, 07 Aug 2023 13:56:22 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12.6self%E3%81%AE%E8%87%AA%E5%B7%B1%E5%BC%81%E8%AD%B7/</guid><description> インスタンスメソッドの第一引数としてselfを組み込まなければならない &amp;gt;&amp;gt;&amp;gt; a_car = Car() &amp;gt;&amp;gt;&amp;gt; a_car.exclaim() I&amp;#39;m a Car! 一連の流れ a_carオブジェクトのクラス（Car）を探す Carクラスのexclaim()メソッドにself引数としてa_carオブジェクトを渡す Car.exclaim(a_car)と同じ</description></item><item><title>【12.5.6】ミックスイン</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12.5.6%E3%83%9F%E3%83%83%E3%82%AF%E3%82%B9%E3%82%A4%E3%83%B3/</link><pubDate>Mon, 07 Aug 2023 13:50:15 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12.5.6%E3%83%9F%E3%83%83%E3%82%AF%E3%82%B9%E3%82%A4%E3%83%B3/</guid><description> クラス定義にヘルパーとして使うだけの親クラスを組み込むことができる 他の親クラスとはメソッドを共有しない このような親クラスをミックスインと呼ぶ ロギングなどの副次的なタスクを追加するために使われることがある &amp;gt;&amp;gt;&amp;gt; import pprint &amp;gt;&amp;gt;&amp;gt; class PrettyMixin: ... def dump(self): ... pprint.pprint(vars(self)) ... &amp;gt;&amp;gt;&amp;gt; class Thing(PrettyMixin): ... pass ... &amp;gt;&amp;gt;&amp;gt; t = Thing() &amp;gt;&amp;gt;&amp;gt; t.name = &amp;#34;Nyarlathotep&amp;#34; &amp;gt;&amp;gt;&amp;gt; t.feature = &amp;#39;ichor&amp;#39; &amp;gt;&amp;gt;&amp;gt; t.age = &amp;#39;eldritch&amp;#39; &amp;gt;&amp;gt;&amp;gt; t.dump() {&amp;#39;age&amp;#39;: &amp;#39;eldritch&amp;#39;, &amp;#39;feature&amp;#39;: &amp;#39;ichor&amp;#39;, &amp;#39;name&amp;#39;: &amp;#39;Nyarlathotep&amp;#39;}</description></item><item><title>【12.5.5】多重継承</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12.5.5%E5%A4%9A%E9%87%8D%E7%B6%99%E6%89%BF/</link><pubDate>Mon, 07 Aug 2023 13:40:31 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12.5.5%E5%A4%9A%E9%87%8D%E7%B6%99%E6%89%BF/</guid><description>オブジェクトは複数の親クラスを継承できる Pythonの継承は、メソッド解決順序によって決まる 個々のPythonクラスは、そのクラスのオブジェクトがメソッドや属性を探す時に参照するクラスのリストを返すmro()というメソッドを持つ それらのクラスのタプルを格納する__mro__という属性もある &amp;gt;&amp;gt;&amp;gt; class Animal: ... def says(self): ... return &amp;#39;I speak!&amp;#39; ... &amp;gt;&amp;gt;&amp;gt; class Horse(Animal): ... def says(self): ... return &amp;#39;Neigh!&amp;#39; ... &amp;gt;&amp;gt;&amp;gt; class Donkey(Animal): ... def says(self): ... return &amp;#39;Hee-haw!&amp;#39; ... &amp;gt;&amp;gt;&amp;gt; class Mule(Donkey, Horse): ... pass ... &amp;gt;&amp;gt;&amp;gt; class Hinny(Horse, Donkey): ... pass ... &amp;gt;&amp;gt;&amp;gt; Mule.mro() [&amp;lt;class &amp;#39;__main__.Mule&amp;#39;&amp;gt;, &amp;lt;class &amp;#39;__main__.Donkey&amp;#39;&amp;gt;, &amp;lt;class &amp;#39;__main__.Horse&amp;#39;&amp;gt;, &amp;lt;class &amp;#39;__main__.Animal&amp;#39;&amp;gt;, &amp;lt;class &amp;#39;object&amp;#39;&amp;gt;] &amp;gt;&amp;gt;&amp;gt; Hinny.mro() [&amp;lt;class &amp;#39;__main__.Hinny&amp;#39;&amp;gt;, &amp;lt;class &amp;#39;__main__.Horse&amp;#39;&amp;gt;, &amp;lt;class &amp;#39;__main__.Donkey&amp;#39;&amp;gt;, &amp;lt;class &amp;#39;__main__.</description></item><item><title>【12.5.4】superによる親への支援要請</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12.5.4super%E3%81%AB%E3%82%88%E3%82%8B%E8%A6%AA%E3%81%B8%E3%81%AE%E6%94%AF%E6%8F%B4%E8%A6%81%E8%AB%8B/</link><pubDate>Mon, 07 Aug 2023 02:15:10 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12.5.4super%E3%81%AB%E3%82%88%E3%82%8B%E8%A6%AA%E3%81%B8%E3%81%AE%E6%94%AF%E6%8F%B4%E8%A6%81%E8%AB%8B/</guid><description> 子クラスが親メソッドを呼び出したいとき super()を使う &amp;gt;&amp;gt;&amp;gt; class Person: ... def __init__(self, name): ... self.name = name ... &amp;gt;&amp;gt;&amp;gt; class EmailPerson(Person): ... def __init__(self, name, email): ... super().__init__(name) ... self.email = email ... super()が親クラスのPersonの定義を呼び出す super().__init__()によって、Person.__init__()が呼び出される self引数の受け渡しはPythonが勝手にやってくれる &amp;gt;&amp;gt;&amp;gt; bob = EmailPerson(&amp;#39;Bob Frapples&amp;#39;, &amp;#39;bob@frapples.com&amp;#39;) &amp;gt;&amp;gt;&amp;gt; bob.name &amp;#39;Bob Frapples&amp;#39; &amp;gt;&amp;gt;&amp;gt; bob.email &amp;#39;bob@frapples.com&amp;#39; なぜ、次のように新クラスを定義しないか 継承を使っている意味がなくなる Personの定義が将来変わっても、その変更を反映したものになる　&amp;gt;&amp;gt;&amp;gt; class EmailPerson(Person): ... def __init__(self, name, email): ... self.name = name ... self.email = email ...</description></item><item><title>【12.5.3】メソッドの追加</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12.5.3%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%AE%E8%BF%BD%E5%8A%A0/</link><pubDate>Mon, 07 Aug 2023 02:01:06 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12.5.3%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%AE%E8%BF%BD%E5%8A%A0/</guid><description> 子クラスは親クラスになかったメソッドを追加することもできる &amp;gt;&amp;gt;&amp;gt; class Car: ... def exclaim(self): ... print(&amp;#34;I&amp;#39;m a Car!&amp;#34;) ... &amp;gt;&amp;gt;&amp;gt; class Yugo(Car): ... def exclaim(self): ... print(&amp;#34;I&amp;#39;m a Yugo! Much like a Car, but more Yugo-ish.&amp;#34;) ... def need_a_push(self): ... print(&amp;#34;A little help here?&amp;#34;) ... &amp;gt;&amp;gt;&amp;gt; give_me_a_car = Car() &amp;gt;&amp;gt;&amp;gt; give_me_a_yugo = Yugo() &amp;gt;&amp;gt;&amp;gt; give_me_a_yugo.need_a_push() A little help here?</description></item><item><title>【12.5.2】メソッドのオーバーライド</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12.5.2%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%AE%E3%82%AA%E3%83%BC%E3%83%90%E3%83%BC%E3%83%A9%E3%82%A4%E3%83%89/</link><pubDate>Mon, 07 Aug 2023 01:52:33 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12.5.2%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%AE%E3%82%AA%E3%83%BC%E3%83%90%E3%83%BC%E3%83%A9%E3%82%A4%E3%83%89/</guid><description>親クラスのメソッドをオーバーライドすることが可能 &amp;gt;&amp;gt;&amp;gt; class Car: ... def exclaim(self): ... print(&amp;#34;I&amp;#39;m a Car!&amp;#34;) ... &amp;gt;&amp;gt;&amp;gt; class Yugo(Car): ... def exclaim(self): ... print(&amp;#34;I&amp;#39;m a Yugo! Much like a Car, but more Yugo-ish.&amp;#34;) ... &amp;gt;&amp;gt;&amp;gt; give_me_a_car = Car() &amp;gt;&amp;gt;&amp;gt; give_me_a_yugo = Yugo() &amp;gt;&amp;gt;&amp;gt; give_me_a_car.exclaim() I&amp;#39;m a Car! &amp;gt;&amp;gt;&amp;gt; give_me_a_yugo.exclaim() I&amp;#39;m a Yugo! Much like a Car, but more Yugo-ish. メソッドのオーバーライドは、__init__()を含むあらゆるメソッドで可能 &amp;gt;&amp;gt;&amp;gt; class Person: ... def __init__(self, name): ... self.name = name ... &amp;gt;&amp;gt;&amp;gt; class MDPerson(Person): .</description></item><item><title>【12.5.1】親クラスからの継承</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12.5.1%E8%A6%AA%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%8B%E3%82%89%E3%81%AE%E7%B6%99%E6%89%BF/</link><pubDate>Mon, 07 Aug 2023 01:45:10 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12.5.1%E8%A6%AA%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%8B%E3%82%89%E3%81%AE%E7%B6%99%E6%89%BF/</guid><description> 新クラスでは、追加、変更したい部分だけを定義する オーバーライドされた古いクラスの動作は使われない 元のクラスは、親、スーパークラス、基底クラスと呼ばれる 新しいクラスは、子、サブクラス、派生クラスと呼ばれる 子クラスは親クラスを専門特化したものであり、is-a関係と呼ばれる &amp;gt;&amp;gt;&amp;gt; class Car: ... pass ... &amp;gt;&amp;gt;&amp;gt; class Yugo(Car): ... pass ... クラスがほかのクラスを継承したものかどうかは、issubclass()を使えば調べられる &amp;gt;&amp;gt;&amp;gt; issubclass(Yugo, Car) True &amp;gt;&amp;gt;&amp;gt; give_me_a_car = Car() &amp;gt;&amp;gt;&amp;gt; give_me_a_Yugo = Yugo() &amp;gt;&amp;gt;&amp;gt; give_me_a_car.exclaim() I&amp;#39;m a Car! &amp;gt;&amp;gt;&amp;gt; give_me_a_Yugo.exclaim() I&amp;#39;m a Car!</description></item><item><title>【12.5】継承</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12.5%E7%B6%99%E6%89%BF/</link><pubDate>Mon, 07 Aug 2023 01:42:52 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12.5%E7%B6%99%E6%89%BF/</guid><description> 既存のクラスで必要なものがそろっている場合 書き換えると複雑になり、今まで動いていたものが壊れる可能性がある 継承を使う</description></item><item><title>【12.4】初期化</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12.4%E5%88%9D%E6%9C%9F%E5%8C%96/</link><pubDate>Mon, 07 Aug 2023 01:30:50 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12.4%E5%88%9D%E6%9C%9F%E5%8C%96/</guid><description>作成時にオブジェクトの属性に値を代入したい場合 初期化のための特殊メソッド__init__()が必要になる &amp;gt;&amp;gt;&amp;gt; class Cat: ... def __init__(self): ... pass ... __init__()は、クラス定義から個々のオブジェクトを作るときに、それを初期化するメソッド 第一引数はselfでなければならない すべてのクラスが__init__()を持たなければならないわけではない self引数は、作られた個別のオブジェクト自体を参照する &amp;gt;&amp;gt;&amp;gt; class Cat: ... def __init__(self, name): ... self.name = name ... &amp;gt;&amp;gt;&amp;gt; furball = Cat(&amp;#39;Grumpy&amp;#39;) name引数として文字列を渡せば、Catクラスからオブジェクトを作れるようになる
Catクラスの定義を探し出す
メモリ内に新しいオブジェクトのインスタンスを生成する
selfとして新しく作ったオブジェクト、nameとしてもう1つの引数を(&amp;lsquo;Grumpy&amp;rsquo;)を渡して、オブジェクトの__init__()メソッドを呼び出す
nameの値をオブジェクトに格納する
その新しいオブジェクトを返す
オブジェクトにfurballという名前を与える</description></item><item><title>【12.3】メソッド</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12.3%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89/</link><pubDate>Mon, 07 Aug 2023 01:29:50 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12.3%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89/</guid><description> メソッドとは、クラスやオブジェクトの中の関数のこと</description></item><item><title>【12.2】属性</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12.2%E5%B1%9E%E6%80%A7/</link><pubDate>Mon, 07 Aug 2023 01:24:03 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12.2%E5%B1%9E%E6%80%A7/</guid><description> 属性とは何か？ クラスやオブジェクトの中の変数のこと &amp;gt;&amp;gt;&amp;gt; class Cat: ... pass ... &amp;gt;&amp;gt;&amp;gt; a_cat = Cat() &amp;gt;&amp;gt;&amp;gt; a_cat &amp;lt;__main__.Cat object at 0x7feb0fe4e550&amp;gt; &amp;gt;&amp;gt;&amp;gt; another_cat = Cat() &amp;gt;&amp;gt;&amp;gt; another_cat &amp;lt;__main__.Cat object at 0x7feb0f5119d0&amp;gt; オブジェクトを作成している間、あるいは作成した後に、属性を追加できる &amp;gt;&amp;gt;&amp;gt; a_cat.age = 3 &amp;gt;&amp;gt;&amp;gt; a_cat.name = &amp;#34;Mr. Fuzzybuttons&amp;#34; &amp;gt;&amp;gt;&amp;gt; a_cat.nemesis = another_cat &amp;gt;&amp;gt;&amp;gt; a_cat.age 3 &amp;gt;&amp;gt;&amp;gt; a_cat.name &amp;#39;Mr. Fuzzybuttons&amp;#39; &amp;gt;&amp;gt;&amp;gt; a_cat.nemesis &amp;lt;__main__.Cat object at 0x7feb0f5119d0&amp;gt; &amp;gt;&amp;gt;&amp;gt; a_cat.nemesis.name = &amp;#34;Mr. Bigglesworth&amp;#34; &amp;gt;&amp;gt;&amp;gt; a_cat.nemesis.name &amp;#39;Mr. Bigglesworth&amp;#39; &amp;gt;&amp;gt;&amp;gt; another_cat.name &amp;#39;Mr. Bigglesworth&amp;#39; 属性という時、通常はオブジェクトの属性を意味するが、クラス属性も存在する</description></item><item><title>【12.1】classによるクラスの定義</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12.1class%E3%81%AB%E3%82%88%E3%82%8B%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E5%AE%9A%E7%BE%A9/</link><pubDate>Mon, 07 Aug 2023 01:21:02 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12.1class%E3%81%AB%E3%82%88%E3%82%8B%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E5%AE%9A%E7%BE%A9/</guid><description> 新しいオブジェクトを作るときには、そのオブジェクトの内容を規定するクラスを作らなければならない オブジェクトを箱とするなら、クラスは鋳型のようなもの &amp;gt;&amp;gt;&amp;gt; class Cat: ... pass オブジェクトは、関数と同じようにクラス名を呼び出して作る &amp;gt;&amp;gt;&amp;gt; a_cat = Cat() &amp;gt;&amp;gt;&amp;gt; another_cat = Cat()</description></item><item><title>【12】オブジェクトは何か</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AF%E4%BD%95%E3%81%8B/</link><pubDate>Mon, 07 Aug 2023 01:16:18 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/12%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AF%E4%BD%95%E3%81%8B/</guid><description> オブジェクトとは何か？ データ（変数、属性と呼ばれる）とコード（関数）の両方を含むカスタムデータ構造 具体的な実例（インスタンス）を表現する 値7の整数オブジェクトは、整数クラスに属している 加算や乗算などのメソッドを持つ</description></item><item><title>【11.21.2】独自例外の作成</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/11.21.2%E7%8B%AC%E8%87%AA%E4%BE%8B%E5%A4%96%E3%81%AE%E4%BD%9C%E6%88%90/</link><pubDate>Mon, 07 Aug 2023 00:26:10 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/11.21.2%E7%8B%AC%E8%87%AA%E4%BE%8B%E5%A4%96%E3%81%AE%E4%BD%9C%E6%88%90/</guid><description> 自分のプログラムで発生する特殊な例外のために、独自の例外も作成できる 例外はクラスであり、Exceptionクラスの子クラス &amp;gt;&amp;gt;&amp;gt; class UppercaseException(Exception): ... pass ... &amp;gt;&amp;gt;&amp;gt; words = [&amp;#39;eenie&amp;#39;, &amp;#39;meenie&amp;#39;, &amp;#39;miny&amp;#39;, &amp;#39;MO&amp;#39;] &amp;gt;&amp;gt;&amp;gt; for word in words: ... if word.isupper(): ... raise UppercaseException(word) ... Traceback (most recent call last): File &amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;, line 3, in &amp;lt;module&amp;gt; __main__.UppercaseException: MO raise文は、式として与えられた例外か、現在のスコープで最終的に有効となる例外を送出する 例外オブジェクト自体にアクセスして、情報を表示することもできる　</description></item><item><title>【11.21.1】tryとexceptによるエラー処理</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/11.21.1try%E3%81%A8except%E3%81%AB%E3%82%88%E3%82%8B%E3%82%A8%E3%83%A9%E3%83%BC%E5%87%A6%E7%90%86/</link><pubDate>Mon, 07 Aug 2023 00:17:36 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/11.21.1try%E3%81%A8except%E3%81%AB%E3%82%88%E3%82%8B%E3%82%A8%E3%83%A9%E3%83%BC%E5%87%A6%E7%90%86/</guid><description>tryを使って例外が発生しそうな場所を囲み、exceptを使って例外処理を提供する &amp;gt;&amp;gt;&amp;gt; short_list = [1, 2, 3] &amp;gt;&amp;gt;&amp;gt; position = 5 &amp;gt;&amp;gt;&amp;gt; try: ... short_list[position] ... except: ... print(&amp;#39;Need a position between 0 and&amp;#39;, len(short_list) - 1, &amp;#39; but got&amp;#39;, position) ... Need a position between 0 and 2 but got 5 複数の例外が発生する可能性があるときには、それぞれのために別々の例外ハンドラを用意した方がいい except exceptiontype as nameのようにして、例外オブジェクトをname変数に格納できる &amp;gt;&amp;gt;&amp;gt; short_list = [1, 2, 3] &amp;gt;&amp;gt;&amp;gt; while True: ... value = input(&amp;#39;Position [q to quit]? &amp;#39;) ... if value == &amp;#39;q&amp;#39;: .</description></item><item><title>【11.21】例外</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/11.21%E4%BE%8B%E5%A4%96/</link><pubDate>Mon, 07 Aug 2023 00:13:31 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/11.21%E4%BE%8B%E5%A4%96/</guid><description> Pythonではエラーを示すために例外を使っている 関数の戻り値を特別な値にしてエラーを示す言語もある 特定の条件の下で失敗するコードを実行しようとするときには、適切な例外ハンドラを作って、起こる可能性のあるエラーをキャッチする必要がある ある関数で例外が発生し、その関数で例外をキャッチしなｋれば、上位の関数の対応するハンドラがキャッチするまで例外は浮上していく　</description></item><item><title>【11.20】非同期関数</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/11.20%E9%9D%9E%E5%90%8C%E6%9C%9F%E9%96%A2%E6%95%B0/</link><pubDate>Mon, 07 Aug 2023 00:11:21 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/11.20%E9%9D%9E%E5%90%8C%E6%9C%9F%E9%96%A2%E6%95%B0/</guid><description> 非同期関数とは？ 関数defの前にasyncがあれば、それは非同期関数である 関数呼び出しの前にawaitがあれば、その関数は非同期関数である 詳しくは付録Cで解説するらしい 最後まで完了する前に制御を移譲できる</description></item><item><title>【11.19】再帰</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/11.19%E5%86%8D%E5%B8%B0/</link><pubDate>Mon, 07 Aug 2023 00:05:27 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/11.19%E5%86%8D%E5%B8%B0/</guid><description>関数が自分自身を呼び出すことを再帰と呼ぶ 再帰が深くなりすぎると、Pythonでは例外を送信してくれる 再帰は、リストのリストのリストのような「平坦ではない」データを処理するのに役立つ &amp;gt;&amp;gt;&amp;gt; def flatten(lol): ... for item in lol: ... if isinstance(item, list): ... for subitem in flatten(item): ... yield subitem ... else: ... yield item ... &amp;gt;&amp;gt;&amp;gt; lol = [1, 2, [3, 4, 5], [6, [7, 8, 9], []]] &amp;gt;&amp;gt;&amp;gt; flatten(lol) &amp;lt;generator object flatten at 0x7feb0fe41ba0&amp;gt; &amp;gt;&amp;gt;&amp;gt; list(flatten(lol)) [1, 2, 3, 4, 5, 6, 7, 8, 9] yield fromを使えば、flatten()を単純化できる &amp;gt;&amp;gt;&amp;gt; def flatten(lol): ... for item in lol: .</description></item><item><title>【11.18】名前の中の_と__</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/11.18%E5%90%8D%E5%89%8D%E3%81%AE%E4%B8%AD%E3%81%AE_%E3%81%A8__/</link><pubDate>Mon, 07 Aug 2023 00:04:02 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/11.18%E5%90%8D%E5%89%8D%E3%81%AE%E4%B8%AD%E3%81%AE_%E3%81%A8__/</guid><description> 先頭と末尾が_になっている名前は、Pythonが使う変数として予約されている 関数の名前はfunction.__name__とfunction.__doc__に格納されている</description></item><item><title>【11.17】名前空間とスコープ</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/11.17%E5%90%8D%E5%89%8D%E7%A9%BA%E9%96%93%E3%81%A8%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%97/</link><pubDate>Sun, 06 Aug 2023 23:39:30 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/11.17%E5%90%8D%E5%89%8D%E7%A9%BA%E9%96%93%E3%81%A8%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%97/</guid><description>Pythonプログラムは様々な名前空間を持つ 名前は名前空間の中で決まった意味を持つ 各関数は、それぞれ専用の名前空間を定義する ほかの名前空間にアクセスすることもできる プログラムのメイン部分は、グローバル名前空間を定義する この空間の変数は、グローバル変数と言われる グローバル変数は、関数内から参照できる &amp;gt;&amp;gt;&amp;gt; animal = &amp;#39;fruitbat&amp;#39; &amp;gt;&amp;gt;&amp;gt; def print_global(): ... print(&amp;#39;inside print_global:&amp;#39;, animal) ... &amp;gt;&amp;gt;&amp;gt; print(&amp;#39;at the top level:&amp;#39;, animal) at the top level: fruitbat &amp;gt;&amp;gt;&amp;gt; print_global() inside print_global: fruitbat 関数でグローバル変数を取得したうえで、さらに書き換えようとするとエラーが起きる &amp;gt;&amp;gt;&amp;gt; def change_and_print_global(): ... print(&amp;#39;inside change_and_print_global:&amp;#39;, animal) ... animal = &amp;#39;wombat&amp;#39; ... print(&amp;#39;after the change:&amp;#39;, animal) ... &amp;gt;&amp;gt;&amp;gt; change_and_print_global() Traceback (most recent call last): File &amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;, line 1, in &amp;lt;module&amp;gt; File &amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;, line 2, in change_and_print_global UnboundLocalError: local variable &amp;#39;animal&amp;#39; referenced before assignment 関数内でだけで有効な別の変数を書き換えようとしたと解釈されている 代入していない変数を先に参照したとしてエラーが出ている 参照しないで値をセットすると問題は起きない &amp;gt;&amp;gt;&amp;gt; animal = &amp;#39;fruitbat&amp;#39; &amp;gt;&amp;gt;&amp;gt; def change_local(): .</description></item><item><title>【11.16】デコレータ</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/11.16%E3%83%87%E3%82%B3%E3%83%AC%E3%83%BC%E3%82%BF/</link><pubDate>Sun, 06 Aug 2023 23:28:53 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/11.16%E3%83%87%E3%82%B3%E3%83%AC%E3%83%BC%E3%82%BF/</guid><description>ソースコードを書き換えずに既存の関数に変更を加えたい場合 デコレータを使う 入力として関数を1つ取り、別の関数を返す関数 &amp;gt;&amp;gt;&amp;gt; def document_it(func): ... def new_function(*args, **kwargs): ... print(&amp;#39;Running function:&amp;#39;, func.__name__) ... print(&amp;#39;Positional arguments:&amp;#39;, args) ... print(&amp;#39;Keyword arguments:&amp;#39;, kwargs) ... result = func(*args, **kwargs) ... print(&amp;#39;Result:&amp;#39;, result) ... return result ... return new_function ... &amp;gt;&amp;gt;&amp;gt; def add_ints(a, b): ... return a + b ... &amp;gt;&amp;gt;&amp;gt; add_ints(3, 5) 8 &amp;gt;&amp;gt;&amp;gt; cooler_add_ints = document_it(add_ints) &amp;gt;&amp;gt;&amp;gt; cooler_add_ints(3, 5) Running function: add_ints Positional arguments: (3, 5) Keyword arguments: {} Result: 8 8 上記のcooler_add_intsのように、手作業でデコレーターの戻り値を代入しなくても、デコレートしたい関数の直前に@decorator_nameを追加する &amp;gt;&amp;gt;&amp;gt; @document_it .</description></item><item><title>【11.15.2】ジェネレータ内包表記</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/11.15.2%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%AC%E3%83%BC%E3%82%BF%E5%86%85%E5%8C%85%E8%A1%A8%E8%A8%98/</link><pubDate>Sun, 06 Aug 2023 23:27:07 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/11.15.2%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%AC%E3%83%BC%E3%82%BF%E5%86%85%E5%8C%85%E8%A1%A8%E8%A8%98/</guid><description> 丸カッコで囲む &amp;gt;&amp;gt;&amp;gt; genobj = (pair for pair in zip([&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;], [&amp;#39;1&amp;#39;, &amp;#39;2&amp;#39;])) &amp;gt;&amp;gt;&amp;gt; genobj &amp;lt;generator object &amp;lt;genexpr&amp;gt; at 0x7feb0fe419e0&amp;gt; &amp;gt;&amp;gt;&amp;gt; for thing in genobj: ... print(thing) ... (&amp;#39;a&amp;#39;, &amp;#39;1&amp;#39;) (&amp;#39;b&amp;#39;, &amp;#39;2&amp;#39;)</description></item><item><title>【11.15.1】ジェネレータ関数</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/11.15.1%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%AC%E3%83%BC%E3%82%BF%E9%96%A2%E6%95%B0/</link><pubDate>Sun, 06 Aug 2023 23:21:32 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/11.15.1%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%AC%E3%83%BC%E3%82%BF%E9%96%A2%E6%95%B0/</guid><description> 大きくなる可能性があるシーケンスを作りたいときは、ジェネレータ関数を書けばよい 値をreturnで返すかわりに、yield文で返す &amp;gt;&amp;gt;&amp;gt; def my_range(first=0, last=10, step=1): ... number = first ... while number &amp;lt; last: ... yield number ... number += step ... &amp;gt;&amp;gt;&amp;gt; my_range &amp;lt;function my_range at 0x7feb0f525040&amp;gt; &amp;gt;&amp;gt;&amp;gt; ranger = my_range(1, 5) &amp;gt;&amp;gt;&amp;gt; ranger &amp;lt;generator object my_range at 0x7feb0fe41a50&amp;gt; &amp;gt;&amp;gt;&amp;gt; for x in ranger: ... print(x) ... 1 2 3 my_rangeからはジェネレータオブジェクトが返っている ジェネレータは1度しか実行できない その場で値を作り、イテレータを返して一度に1つずつ値をかえしてくるため ジェネレータを再起動したり、バックアップしたりすることはできない &amp;gt;&amp;gt;&amp;gt; for try_again in ranger: ... print(try_again) ...</description></item><item><title>【11.15】ジェネレータ</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/11.15%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%AC%E3%83%BC%E3%82%BF/</link><pubDate>Sun, 06 Aug 2023 23:19:46 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/11.15%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%AC%E3%83%BC%E3%82%BF/</guid><description> ジェネレータは、Pythonのシーケンスを作成するオブジェクト ジェネレータを使うことで、シーケンス全体を一度に作ってメモリに格納しなくても、シーケンスを反復処理できる ジェネレータは、イテレータのデータソースになることが多い range()はジェネレータの1種</description></item><item><title>【11.14】無名関数（ラムダ関数）</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/11.14%E7%84%A1%E5%90%8D%E9%96%A2%E6%95%B0%E3%83%A9%E3%83%A0%E3%83%80%E9%96%A2%E6%95%B0/</link><pubDate>Sun, 06 Aug 2023 23:13:41 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/11.14%E7%84%A1%E5%90%8D%E9%96%A2%E6%95%B0%E3%83%A9%E3%83%A0%E3%83%80%E9%96%A2%E6%95%B0/</guid><description> ラムダ関数とは 1つの文で表現される無名関数 &amp;gt;&amp;gt;&amp;gt; def edit_story(words, func): ... for word in words: ... print(func(word)) ... &amp;gt;&amp;gt;&amp;gt; stairs = [&amp;#39;thud&amp;#39;, &amp;#39;meow&amp;#39;, &amp;#39;thud&amp;#39;, &amp;#39;hiss&amp;#39;] &amp;gt;&amp;gt;&amp;gt; def enliven(word): ... return word.capitalize() + &amp;#39;!&amp;#39; ... &amp;gt;&amp;gt;&amp;gt; edit_story(stairs, enliven) Thud! Meow! Thud! Hiss! 上記のコードから、enliven(word)関数をlambdaに取り替える &amp;gt;&amp;gt;&amp;gt; edit_story(stairs, lambda word: word.capitalize() + &amp;#39;!&amp;#39;) Thud! Meow! Thud! Hiss! ラムダは、ゼロ個以上のカンマ区切りの実引数をとり、その後ろにコロンをつける。 今回の場合、wordという1個の引数をとる</description></item><item><title>【11.13】クロージャー</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/11.13%E3%82%AF%E3%83%AD%E3%83%BC%E3%82%B8%E3%83%A3%E3%83%BC/</link><pubDate>Sun, 06 Aug 2023 23:07:15 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/11.13%E3%82%AF%E3%83%AD%E3%83%BC%E3%82%B8%E3%83%A3%E3%83%BC/</guid><description> 関数内関数はクロージャーとして機能する クロージャーとは ほかの関数によって動的に生成される関数 自分の外で作られた変数の値を変えたり、覚えたりできる &amp;gt;&amp;gt;&amp;gt; def knights2(saying): ... def inner2(): ... return f&amp;#34;We are the knights who say: &amp;#39;{saying}&amp;#39;&amp;#34; ... return inner2 inner2()関数は、sayingの値を知っており、それを覚える return inner2では、inner2関数のコピーを返す 引数によって動的に生成されるinner2は一種のクロージャになっている &amp;gt;&amp;gt;&amp;gt; a = knights2(&amp;#39;Duck&amp;#39;) &amp;gt;&amp;gt;&amp;gt; b = knights2(&amp;#39;Hasenpfeffer&amp;#39;) &amp;gt;&amp;gt;&amp;gt; type(a) &amp;lt;class &amp;#39;function&amp;#39;&amp;gt; &amp;gt;&amp;gt;&amp;gt; type(b) &amp;lt;class &amp;#39;function&amp;#39;&amp;gt; &amp;gt;&amp;gt;&amp;gt; a &amp;lt;function knights2.&amp;lt;locals&amp;gt;.inner2 at 0x7feb0f51cd30&amp;gt; &amp;gt;&amp;gt;&amp;gt; b &amp;lt;function knights2.&amp;lt;locals&amp;gt;.inner2 at 0x7feb0f51cdc0&amp;gt; &amp;gt;&amp;gt;&amp;gt; a() &amp;#34;We are the knights who say: &amp;#39;Duck&amp;#39;&amp;#34; &amp;gt;&amp;gt;&amp;gt; b() &amp;#34;We are the knights who say: &amp;#39;Hasenpfeffer&amp;#39;&amp;#34; aとbを呼び出すと、これらのクロージャーは自分が作られた時に使われていたsayingの内容を覚えている</description></item><item><title>【11.12】関数内関数</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/11.12%E9%96%A2%E6%95%B0%E5%86%85%E9%96%A2%E6%95%B0/</link><pubDate>Sun, 06 Aug 2023 23:03:41 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/11.12%E9%96%A2%E6%95%B0%E5%86%85%E9%96%A2%E6%95%B0/</guid><description> 関数はほかの関数の中で定義することができる 関数内で複数回実行される複雑な処理を実行したいときに役立つ &amp;gt;&amp;gt;&amp;gt; def outer(a, b): ... def inner(c, d): ... return c + d ... return inner(a, b) ... &amp;gt;&amp;gt;&amp;gt; outer(4, 7) 11 &amp;gt;&amp;gt;&amp;gt; def knights(saying): ... def inner(quote): ... return f&amp;#34;We are the knights who say: &amp;#39;{quote}&amp;#39;&amp;#34; ... return inner(saying) ... &amp;gt;&amp;gt;&amp;gt; knights(&amp;#39;Ni!&amp;#39;) &amp;#34;We are the knights who say: &amp;#39;Ni!&amp;#39;&amp;#34;</description></item><item><title>【11.11】第一級オブジェクトとしての関数</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/11.11%E7%AC%AC%E4%B8%80%E7%B4%9A%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%A8%E3%81%97%E3%81%A6%E3%81%AE%E9%96%A2%E6%95%B0/</link><pubDate>Sun, 06 Aug 2023 22:30:29 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/11.11%E7%AC%AC%E4%B8%80%E7%B4%9A%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%A8%E3%81%97%E3%81%A6%E3%81%AE%E9%96%A2%E6%95%B0/</guid><description> Pythonでは全てのものがオブジェクト 関数もオブジェクトである 関数は第1級のオブジェクト 変数に関数を代入したり、他の関数の引数として関数を使ったり、関数からの戻り値として関数を返したりできる 関数は、リスト、タプル、集合、辞書の要素に含められる イミュータブルなので、辞書のキーにすることもできる &amp;gt;&amp;gt;&amp;gt; def answer(): ... print(42) ... &amp;gt;&amp;gt;&amp;gt; answer() 42 &amp;gt;&amp;gt;&amp;gt; def run_something(func): ... func() ... &amp;gt;&amp;gt;&amp;gt; run_something(answer) 42 &amp;gt;&amp;gt;&amp;gt; def add_args(arg1, arg2): ... print(arg1 + arg2) ... &amp;gt;&amp;gt;&amp;gt; type(add_args) &amp;lt;class &amp;#39;function&amp;#39;&amp;gt; &amp;gt;&amp;gt;&amp;gt; def run_something_with_args(func, arg1, arg2): ... func(arg1, arg2) ... &amp;gt;&amp;gt;&amp;gt; run_something_with_args(add_args, 5, 9) 14 &amp;gt;&amp;gt;&amp;gt; def sum_args(*args): ... return sum(args) ... &amp;gt;&amp;gt;&amp;gt; def run_with_positional_args(func, *args): ... return func(*args) ... &amp;gt;&amp;gt;&amp;gt; run_with_positional_args(sum_args, 1, 2, 3, 4) 10</description></item><item><title>【11.10】docstring</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/11.10docstring/</link><pubDate>Sun, 06 Aug 2023 22:25:22 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/11.10docstring/</guid><description> 関数本体の先頭に組み込まれた文字列で、関数定義にドキュメントをつけられる docstringと呼ぶ help()関数を呼び出せば表示される &amp;gt;&amp;gt;&amp;gt; def echo(anything): ... &amp;#34;&amp;#34;&amp;#34;echoは、与えられた入力引数を返す&amp;#34;&amp;#34;&amp;#34; ... return anything ...</description></item><item><title>【11.9】ミュータブル引数とイミュータブル引数</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/11.9%E3%83%9F%E3%83%A5%E3%83%BC%E3%82%BF%E3%83%96%E3%83%AB%E5%BC%95%E6%95%B0%E3%81%A8%E3%82%A4%E3%83%9F%E3%83%A5%E3%83%BC%E3%82%BF%E3%83%96%E3%83%AB%E5%BC%95%E6%95%B0/</link><pubDate>Sun, 06 Aug 2023 22:23:15 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/11.9%E3%83%9F%E3%83%A5%E3%83%BC%E3%82%BF%E3%83%96%E3%83%AB%E5%BC%95%E6%95%B0%E3%81%A8%E3%82%A4%E3%83%9F%E3%83%A5%E3%83%BC%E3%82%BF%E3%83%96%E3%83%AB%E5%BC%95%E6%95%B0/</guid><description> 実引数がミュータブルなら、関数内で対応する仮引数を介して書き換えられる可能性がある &amp;gt;&amp;gt;&amp;gt; outside = [&amp;#39;one&amp;#39;, &amp;#39;fine&amp;#39;, &amp;#39;day&amp;#39;] &amp;gt;&amp;gt;&amp;gt; def mangle(arg): ... arg[1] = &amp;#39;terrible!&amp;#39; ... &amp;gt;&amp;gt;&amp;gt; outside [&amp;#39;one&amp;#39;, &amp;#39;fine&amp;#39;, &amp;#39;day&amp;#39;] &amp;gt;&amp;gt;&amp;gt; mangle(outside) &amp;gt;&amp;gt;&amp;gt; outside [&amp;#39;one&amp;#39;, &amp;#39;terrible!&amp;#39;, &amp;#39;day&amp;#39;]</description></item><item><title>【11.8】**によるキーワード引数の分解、接合（辞書化）</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/11.8%E3%81%AB%E3%82%88%E3%82%8B%E3%82%AD%E3%83%BC%E3%83%AF%E3%83%BC%E3%83%89%E5%BC%95%E6%95%B0%E3%81%AE%E5%88%86%E8%A7%A3%E6%8E%A5%E5%90%88%E8%BE%9E%E6%9B%B8%E5%8C%96/</link><pubDate>Sun, 06 Aug 2023 22:14:05 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/11.8%E3%81%AB%E3%82%88%E3%82%8B%E3%82%AD%E3%83%BC%E3%83%AF%E3%83%BC%E3%83%89%E5%BC%95%E6%95%B0%E3%81%AE%E5%88%86%E8%A7%A3%E6%8E%A5%E5%90%88%E8%BE%9E%E6%9B%B8%E5%8C%96/</guid><description> 2つのアスタリスクを使うことで、キーワード引数を1個の辞書にまとめることができる 引数の名前は辞書のキー、引数の値は辞書のバリューになる &amp;gt;&amp;gt;&amp;gt; def print_kwargs(**kwargs): ... print(&amp;#39;Keyword arguments:&amp;#39;, kwargs) ... &amp;gt;&amp;gt;&amp;gt; print_kwargs() Keyword arguments: {} &amp;gt;&amp;gt;&amp;gt; print_kwargs(wine=&amp;#39;merlot&amp;#39;, entree=&amp;#39;mutton&amp;#39;, dessert=&amp;#39;macaroon&amp;#39;) Keyword arguments: {&amp;#39;wine&amp;#39;: &amp;#39;merlot&amp;#39;, &amp;#39;entree&amp;#39;: &amp;#39;mutton&amp;#39;, &amp;#39;dessert&amp;#39;: &amp;#39;macaroon&amp;#39;}</description></item><item><title>【11.7】*による位置引数の分解、接合（タプル化）</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/11.7%E3%81%AB%E3%82%88%E3%82%8B%E4%BD%8D%E7%BD%AE%E5%BC%95%E6%95%B0%E3%81%AE%E5%88%86%E8%A7%A3%E6%8E%A5%E5%90%88%E3%82%BF%E3%83%97%E3%83%AB%E5%8C%96/</link><pubDate>Sun, 06 Aug 2023 21:51:10 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/11.7%E3%81%AB%E3%82%88%E3%82%8B%E4%BD%8D%E7%BD%AE%E5%BC%95%E6%95%B0%E3%81%AE%E5%88%86%E8%A7%A3%E6%8E%A5%E5%90%88%E3%82%BF%E3%83%97%E3%83%AB%E5%8C%96/</guid><description> 関数定義の中で、仮引数の一部として*を使うと、可変個の位置引数がタプルにまとめられる 関数呼び出しと関数定義でしか使えない &amp;gt;&amp;gt;&amp;gt; def print_args(*args): ... print(&amp;#39;Positional tuple:&amp;#39;, args) ... &amp;gt;&amp;gt;&amp;gt; print_args() Positional tuple: () &amp;gt;&amp;gt;&amp;gt; print_args(3, 2, 1, &amp;#39;wait!&amp;#39;, &amp;#39;uh...&amp;#39;) Positional tuple: (3, 2, 1, &amp;#39;wait!&amp;#39;, &amp;#39;uh...&amp;#39;) 関数にタプル実引数を渡すと、関数は渡されたタプル実引数をタプル仮引数に対応付ける 関数に位置実引数を渡し、関数内でそれらを*args仮引数に「接合」できる タプル実引数argsを関数内で仮引数*argsに「分解」させて関数内でタプル仮引数argsに接合し直すことができる &amp;gt;&amp;gt;&amp;gt; print_args(2, 5, 7, &amp;#39;x&amp;#39;) Positional tuple: (2, 5, 7, &amp;#39;x&amp;#39;) &amp;gt;&amp;gt;&amp;gt; args = (2, 5, 7, &amp;#39;x&amp;#39;) &amp;gt;&amp;gt;&amp;gt; print_args(args) Positional tuple: ((2, 5, 7, &amp;#39;x&amp;#39;),) &amp;gt;&amp;gt;&amp;gt; print_args(*args) Positional tuple: (2, 5, 7, &amp;#39;x&amp;#39;) 関数呼び出しの*argsはタプルargsをカンマ区切りの位置仮引数に分解する 関数定義の*argsは、全ての位置実引数を単一のタプル仮引数argsに接合する 関数呼び出しの*argsは、値が分解することから、吐き出し引数 関数定義のargsは、値を接合するところから、吸い込み引数</description></item><item><title>【11.6】デフォルト引数値の指定</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/11.6%E3%83%87%E3%83%95%E3%82%A9%E3%83%AB%E3%83%88%E5%BC%95%E6%95%B0%E5%80%A4%E3%81%AE%E6%8C%87%E5%AE%9A/</link><pubDate>Sun, 06 Aug 2023 21:28:29 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/11.6%E3%83%87%E3%83%95%E3%82%A9%E3%83%AB%E3%83%88%E5%BC%95%E6%95%B0%E5%80%A4%E3%81%AE%E6%8C%87%E5%AE%9A/</guid><description> 仮引数にはデフォルト値を指定できる 呼び出し元が対応する実引数を渡してこなかったときに使われる &amp;gt;&amp;gt;&amp;gt; def menu(wine, entree, dessert=&amp;#39;pudding&amp;#39;): ... return {&amp;#39;wine&amp;#39;: wine, &amp;#39;entree&amp;#39;: entree, &amp;#39;dessert&amp;#39;: dessert} ... &amp;gt;&amp;gt;&amp;gt; menu(&amp;#39;chardonnay&amp;#39;, &amp;#39;chicken&amp;#39;) {&amp;#39;wine&amp;#39;: &amp;#39;chardonnay&amp;#39;, &amp;#39;entree&amp;#39;: &amp;#39;chicken&amp;#39;, &amp;#39;dessert&amp;#39;: &amp;#39;pudding&amp;#39;} &amp;gt;&amp;gt;&amp;gt; def buggy(arg, result=[]): ... result.append(arg) ... print(result) ... &amp;gt;&amp;gt;&amp;gt; buggy(&amp;#39;a&amp;#39;) [&amp;#39;a&amp;#39;] &amp;gt;&amp;gt;&amp;gt; buggy(&amp;#39;b&amp;#39;) [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;] 2番目のコードで、リストが空なのは呼び出された1回目の時だけ</description></item><item><title>【11.5】キーワード引数</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/11.5%E3%82%AD%E3%83%BC%E3%83%AF%E3%83%BC%E3%83%89%E5%BC%95%E6%95%B0/</link><pubDate>Sun, 06 Aug 2023 21:25:36 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/11.5%E3%82%AD%E3%83%BC%E3%83%AF%E3%83%BC%E3%83%89%E5%BC%95%E6%95%B0/</guid><description> 位置引数の間違いを避けるため、対応する仮引数の名前を指定して実引数を渡すものをキーワード引数という &amp;gt;&amp;gt;&amp;gt; menu(entree=&amp;#39;beef&amp;#39;, dessert=&amp;#39;bagel&amp;#39;, wine=&amp;#39;bordeaux&amp;#39;) {&amp;#39;wine&amp;#39;: &amp;#39;bordeaux&amp;#39;, &amp;#39;entree&amp;#39;: &amp;#39;beef&amp;#39;, &amp;#39;dessert&amp;#39;: &amp;#39;bagel&amp;#39;} &amp;gt;&amp;gt;&amp;gt; menu(&amp;#39;frontenac&amp;#39;, dessert=&amp;#39;flan&amp;#39;, entree=&amp;#39;fish&amp;#39;) {&amp;#39;wine&amp;#39;: &amp;#39;frontenac&amp;#39;, &amp;#39;entree&amp;#39;: &amp;#39;fish&amp;#39;, &amp;#39;dessert&amp;#39;: &amp;#39;flan&amp;#39;}</description></item><item><title>【11.4】位置引数</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/11.4%E4%BD%8D%E7%BD%AE%E5%BC%95%E6%95%B0/</link><pubDate>Sun, 06 Aug 2023 21:22:45 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/11.4%E4%BD%8D%E7%BD%AE%E5%BC%95%E6%95%B0/</guid><description> 関数の引数の先頭から順番に対応する位置の仮引数にコピーされるものを位置引数という 個々の位置の意味を覚えておかなければならない &amp;gt;&amp;gt;&amp;gt; def menu(wine, entree, dessert): ... return {&amp;#39;wine&amp;#39;: wine, &amp;#39;entree&amp;#39;: entree, &amp;#39;dessert&amp;#39;: dessert} ... &amp;gt;&amp;gt;&amp;gt; menu(&amp;#39;chardonnay&amp;#39;, &amp;#39;chicken&amp;#39;, &amp;#39;cake&amp;#39;) {&amp;#39;wine&amp;#39;: &amp;#39;chardonnay&amp;#39;, &amp;#39;entree&amp;#39;: &amp;#39;chicken&amp;#39;, &amp;#39;dessert&amp;#39;: &amp;#39;cake&amp;#39;}</description></item><item><title>【11.3】Noneについて</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/11.3none%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</link><pubDate>Sun, 06 Aug 2023 21:14:52 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/11.3none%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</guid><description>Noneはブール値として評価すると偽になる ブール値のFalseと同じではない ブール値のFalseとNoneを区別するには、Pythonのis演算子を使うとよい 空文字列、空リスト、空辞書、空集合、などはすべてFalseだが、Noneとは等しくない &amp;gt;&amp;gt;&amp;gt; thing = None &amp;gt;&amp;gt;&amp;gt; if thing: ... print(&amp;#34;It&amp;#39;s some thing&amp;#34;) ... else: ... print(&amp;#34;It&amp;#39;s no thing&amp;#34;) ... It&amp;#39;s no thing &amp;gt;&amp;gt;&amp;gt; thing = None &amp;gt;&amp;gt;&amp;gt; if thing is None: ... print(&amp;#34;It&amp;#39;s nothing&amp;#34;) ... else: ... print(&amp;#34;It&amp;#39;s something&amp;#34;) ... It&amp;#39;s nothing &amp;gt;&amp;gt;&amp;gt; def whatis(thing): ... if thing is None: ... print(thing, &amp;#34;is None&amp;#34;) ... elif thing: ... print(thing, &amp;#34;is True&amp;#34;) ... else: ... print(thing, &amp;#34;is False&amp;#34;) .</description></item><item><title>【11.2】実引数と仮引数</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/11.2%E5%AE%9F%E5%BC%95%E6%95%B0%E3%81%A8%E4%BB%AE%E5%BC%95%E6%95%B0/</link><pubDate>Sun, 06 Aug 2023 21:02:23 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/11.2%E5%AE%9F%E5%BC%95%E6%95%B0%E3%81%A8%E4%BB%AE%E5%BC%95%E6%95%B0/</guid><description> 関数を呼び出す時に関数に渡す値を実引数という 英語ではargument 実引数を渡して関数を呼び出すとき、それらの値は関数内の仮引数にコピーされる 英語ではparameter &amp;gt;&amp;gt;&amp;gt; def echo(anything): ... return anything + &amp;#39; &amp;#39; + anything ... &amp;gt;&amp;gt;&amp;gt; echo(&amp;#39;Rumplestiltskin&amp;#39;) &amp;#39;Rumplestiltskin Rumplestiltskin&amp;#39;</description></item><item><title>【11.1】defによる関数の定義</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/11.1def%E3%81%AB%E3%82%88%E3%82%8B%E9%96%A2%E6%95%B0%E3%81%AE%E5%AE%9A%E7%BE%A9/</link><pubDate>Sun, 06 Aug 2023 20:18:35 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/11.1def%E3%81%AB%E3%82%88%E3%82%8B%E9%96%A2%E6%95%B0%E3%81%AE%E5%AE%9A%E7%BE%A9/</guid><description> Pythonで関数を定義するには、defと入力し、関数名と引数を書き、最後に:を書く &amp;gt;&amp;gt;&amp;gt; def do_nothing(): ... pass ... 関数の呼び出し 関数名(引数)という感じで関数を呼び出せる</description></item><item><title>【11】関数</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/11%E9%96%A2%E6%95%B0/</link><pubDate>Sun, 06 Aug 2023 20:14:01 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/11%E9%96%A2%E6%95%B0/</guid><description>何度も使うような手続きをまとめるものが関数
ほかのコードから切り離され、名前をつけたコード 関数は任意の型、任意の個数の入力引数を取り、任意の型、任意の個数の結果を出力する 関数が明示的にreturnを呼び出さなければ、呼び出し元は戻り値としてNoneを受け取る</description></item><item><title>【10.6】frozensetによるイミュータブルな集合の作成</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/10.6frozenset%E3%81%AB%E3%82%88%E3%82%8B%E3%82%A4%E3%83%9F%E3%83%A5%E3%83%BC%E3%82%BF%E3%83%96%E3%83%AB%E3%81%AA%E9%9B%86%E5%90%88%E3%81%AE%E4%BD%9C%E6%88%90/</link><pubDate>Sun, 06 Aug 2023 20:09:36 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/10.6frozenset%E3%81%AB%E3%82%88%E3%82%8B%E3%82%A4%E3%83%9F%E3%83%A5%E3%83%BC%E3%82%BF%E3%83%96%E3%83%AB%E3%81%AA%E9%9B%86%E5%90%88%E3%81%AE%E4%BD%9C%E6%88%90/</guid><description> 書き換えられない集合を作りたいときには、イテラブル引数を指定して、frozenset()を呼び出す &amp;gt;&amp;gt;&amp;gt; frozenset([3, 2, 1]) frozenset({1, 2, 3}) &amp;gt;&amp;gt;&amp;gt; frozenset(set([2, 1, 3])) frozenset({1, 2, 3}) &amp;gt;&amp;gt;&amp;gt; fs = frozenset([3, 2, 1]) &amp;gt;&amp;gt;&amp;gt; fs frozenset({1, 2, 3}) &amp;gt;&amp;gt;&amp;gt; fs.add(4) Traceback (most recent call last): File &amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;, line 1, in &amp;lt;module&amp;gt; AttributeError: &amp;#39;frozenset&amp;#39; object has no attribute &amp;#39;add&amp;#39;</description></item><item><title>【10.5】集合内包表記</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/10.5%E9%9B%86%E5%90%88%E5%86%85%E5%8C%85%E8%A1%A8%E8%A8%98/</link><pubDate>Sun, 06 Aug 2023 20:07:22 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/10.5%E9%9B%86%E5%90%88%E5%86%85%E5%8C%85%E8%A1%A8%E8%A8%98/</guid><description> 集合にも内包表記がある { expression for expression in iterable } if文も使える &amp;gt;&amp;gt;&amp;gt; a_set = {number for number in range(1, 6) if number % 3 == 1} &amp;gt;&amp;gt;&amp;gt; a_set {1, 4}</description></item><item><title>【10.4】組み合わせと集合演算</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/10.4%E7%B5%84%E3%81%BF%E5%90%88%E3%82%8F%E3%81%9B%E3%81%A8%E9%9B%86%E5%90%88%E6%BC%94%E7%AE%97/</link><pubDate>Sun, 06 Aug 2023 18:54:49 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/10.4%E7%B5%84%E3%81%BF%E5%90%88%E3%82%8F%E3%81%9B%E3%81%A8%E9%9B%86%E5%90%88%E6%BC%94%E7%AE%97/</guid><description>&amp;amp;演算を使うことで、集合の要素の組み合わせについてチェックできる 積集合演算子 &amp;gt;&amp;gt;&amp;gt; for name, contents in drinks.items(): ... if contents &amp;amp; {&amp;#39;vermouth&amp;#39;, &amp;#39;orange juice&amp;#39;}: ... print(name) ... martini manhattan screwdriver &amp;gt;&amp;gt;&amp;gt; a = {1, 2} &amp;gt;&amp;gt;&amp;gt; b = {2, 3} &amp;gt;&amp;gt;&amp;gt; a &amp;amp; b {2} &amp;gt;&amp;gt;&amp;gt; a.intersection(b) {2} |演算を使うことで、和集合を調べられる &amp;gt;&amp;gt;&amp;gt; a | b {1, 2, 3} &amp;gt;&amp;gt;&amp;gt; a.union(b) {1, 2, 3} &amp;gt;&amp;gt;&amp;gt; bruss | wruss {&amp;#39;vodka&amp;#39;, &amp;#39;cream&amp;#39;, &amp;#39;kahlua&amp;#39;} 差集合は-またはdiffrence()でえられる &amp;gt;&amp;gt;&amp;gt; a - b {1} &amp;gt;&amp;gt;&amp;gt; bruss - wruss set() &amp;gt;&amp;gt;&amp;gt; wruss - bruss {&amp;#39;cream&amp;#39;} 対称差（排他的論理和）は^またはsymmetric_diffrence()を使う &amp;gt;&amp;gt;&amp;gt; a ^ b {1, 3} &amp;gt;&amp;gt;&amp;gt; a.</description></item><item><title>【10.3】inによる値の有無のテスト</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/10.3in%E3%81%AB%E3%82%88%E3%82%8B%E5%80%A4%E3%81%AE%E6%9C%89%E7%84%A1%E3%81%AE%E3%83%86%E3%82%B9%E3%83%88/</link><pubDate>Sun, 06 Aug 2023 18:49:57 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/10.3in%E3%81%AB%E3%82%88%E3%82%8B%E5%80%A4%E3%81%AE%E6%9C%89%E7%84%A1%E3%81%AE%E3%83%86%E3%82%B9%E3%83%88/</guid><description> 波括弧で囲まれている時 key: value ペアになっていれば辞書 ただ値を並べたものであれば集合 &amp;gt;&amp;gt;&amp;gt; drinks = { ... &amp;#39;martini&amp;#39;: {&amp;#39;vodka&amp;#39;, &amp;#39;vermouth&amp;#39;}, ... &amp;#39;black russian&amp;#39;: {&amp;#39;vodka&amp;#39;, &amp;#39;kahlua&amp;#39;}, ... &amp;#39;white russian&amp;#39;: {&amp;#39;cream&amp;#39;, &amp;#39;kahlua&amp;#39;, &amp;#39;vodka&amp;#39;}, ... &amp;#39;manhattan&amp;#39;: {&amp;#39;rye&amp;#39;, &amp;#39;vermouth&amp;#39;, &amp;#39;bitters&amp;#39;}, ... &amp;#39;screwdriver&amp;#39;: {&amp;#39;orange juice&amp;#39;, &amp;#39;vodka&amp;#39;} ... } &amp;gt;&amp;gt;&amp;gt; for name, contents in drinks.items(): ... if &amp;#39;vodka&amp;#39; in contents: ... print(name) ... martini black russian white russian screwdriver</description></item><item><title>【10.2】removeによる要素の削除</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/10.2remove%E3%81%AB%E3%82%88%E3%82%8B%E8%A6%81%E7%B4%A0%E3%81%AE%E5%89%8A%E9%99%A4/</link><pubDate>Sun, 06 Aug 2023 18:48:08 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/10.2remove%E3%81%AB%E3%82%88%E3%82%8B%E8%A6%81%E7%B4%A0%E3%81%AE%E5%89%8A%E9%99%A4/</guid><description> remove()で値を指定して集合の要素を削除できる &amp;gt;&amp;gt;&amp;gt; s = set((1, 2, 3)) &amp;gt;&amp;gt;&amp;gt; s {1, 2, 3} &amp;gt;&amp;gt;&amp;gt; s.remove(3) &amp;gt;&amp;gt;&amp;gt; s {1, 2}</description></item><item><title>【10.1】addによる要素の追加</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/10.1add%E3%81%AB%E3%82%88%E3%82%8B%E8%A6%81%E7%B4%A0%E3%81%AE%E8%BF%BD%E5%8A%A0/</link><pubDate>Sun, 06 Aug 2023 18:46:51 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/10.1add%E3%81%AB%E3%82%88%E3%82%8B%E8%A6%81%E7%B4%A0%E3%81%AE%E8%BF%BD%E5%8A%A0/</guid><description> 集合に要素を追加したいときには、add()メソッドを使う &amp;gt;&amp;gt;&amp;gt; s = set((1, 2, 3)) &amp;gt;&amp;gt;&amp;gt; s {1, 2, 3} &amp;gt;&amp;gt;&amp;gt; s.add(4) &amp;gt;&amp;gt;&amp;gt; s {1, 2, 3, 4}</description></item><item><title>【10】集合</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/10%E9%9B%86%E5%90%88/</link><pubDate>Sun, 06 Aug 2023 18:39:51 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/10%E9%9B%86%E5%90%88/</guid><description> 集合は、バリューを捨ててキーだけを残した辞書のようなもの
和集合 A または B 積集合 A かつ B set()による生成
または波括弧で生成できる &amp;gt;&amp;gt;&amp;gt; empty_set = set() &amp;gt;&amp;gt;&amp;gt; empty_set set() &amp;gt;&amp;gt;&amp;gt; even_numbers = {0, 2, 4, 6, 8} &amp;gt;&amp;gt;&amp;gt; even_numbers {0, 2, 4, 6, 8} &amp;gt;&amp;gt;&amp;gt; odd_numbers = {1, 3, 5, 7, 9} &amp;gt;&amp;gt;&amp;gt; odd_numbers {1, 3, 5, 7, 9} set()による変換 辞書を渡した場合は、キーだけが使われる &amp;gt;&amp;gt;&amp;gt; set(&amp;#39;letters&amp;#39;) {&amp;#39;e&amp;#39;, &amp;#39;t&amp;#39;, &amp;#39;r&amp;#39;, &amp;#39;s&amp;#39;, &amp;#39;l&amp;#39;} &amp;gt;&amp;gt;&amp;gt; set([&amp;#39;Dasher&amp;#39;, &amp;#39;Dancer&amp;#39;, &amp;#39;Prancer&amp;#39;, &amp;#39;Mason-Dixon&amp;#39;]) {&amp;#39;Prancer&amp;#39;, &amp;#39;Dasher&amp;#39;, &amp;#39;Dancer&amp;#39;, &amp;#39;Mason-Dixon&amp;#39;} &amp;gt;&amp;gt;&amp;gt; set((&amp;#39;Ummagumma&amp;#39;, &amp;#39;Echoes&amp;#39;, &amp;#39;Atom Heart Mother&amp;#39;)) {&amp;#39;Echoes&amp;#39;, &amp;#39;Atom Heart Mother&amp;#39;, &amp;#39;Ummagumma&amp;#39;} &amp;gt;&amp;gt;&amp;gt; set({&amp;#39;apple&amp;#39;: &amp;#39;red&amp;#39;, &amp;#39;orange&amp;#39;: &amp;#39;orange&amp;#39;, &amp;#39;cherry&amp;#39;: &amp;#39;red&amp;#39;}) {&amp;#39;cherry&amp;#39;, &amp;#39;apple&amp;#39;, &amp;#39;orange&amp;#39;} forとinにより反復処理ができる</description></item><item><title>【9.15】辞書内包表記</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/9.15%E8%BE%9E%E6%9B%B8%E5%86%85%E5%8C%85%E8%A1%A8%E8%A8%98/</link><pubDate>Sun, 06 Aug 2023 03:18:23 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/9.15%E8%BE%9E%E6%9B%B8%E5%86%85%E5%8C%85%E8%A1%A8%E8%A8%98/</guid><description> 辞書にも内包表記がある [key_expression: value_expression for expression in iterable] &amp;gt;&amp;gt;&amp;gt; letter_counts = {letter: word.count(letter) for letter in word} &amp;gt;&amp;gt;&amp;gt; letter_counts {&amp;#39;l&amp;#39;: 1, &amp;#39;e&amp;#39;: 2, &amp;#39;t&amp;#39;: 2, &amp;#39;r&amp;#39;: 1, &amp;#39;s&amp;#39;: 1} &amp;gt;&amp;gt;&amp;gt; letter_counts = {letter: word.count(letter) for letter in set(word)} &amp;gt;&amp;gt;&amp;gt; letter_counts {&amp;#39;e&amp;#39;: 2, &amp;#39;t&amp;#39;: 2, &amp;#39;r&amp;#39;: 1, &amp;#39;s&amp;#39;: 1, &amp;#39;l&amp;#39;: 1} &amp;gt;&amp;gt;&amp;gt; vowels = &amp;#39;aeiou&amp;#39; &amp;gt;&amp;gt;&amp;gt; word = &amp;#39;onomatopoeia&amp;#39; &amp;gt;&amp;gt;&amp;gt; vowel_counts = {letter: word.count(letter) for letter in set(word) if letter in vowels} &amp;gt;&amp;gt;&amp;gt; vowel_counts {&amp;#39;e&amp;#39;: 1, &amp;#39;i&amp;#39;: 1, &amp;#39;a&amp;#39;: 2, &amp;#39;o&amp;#39;: 4}</description></item><item><title>【9.14】deepcopyによるコピー</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/9.14deepcopy%E3%81%AB%E3%82%88%E3%82%8B%E3%82%B3%E3%83%94%E3%83%BC/</link><pubDate>Sun, 06 Aug 2023 03:09:02 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/9.14deepcopy%E3%81%AB%E3%82%88%E3%82%8B%E3%82%B3%E3%83%94%E3%83%BC/</guid><description>辞書のバリューがミュータブルなオブジェクトである場合、deepcopy()を使う &amp;gt;&amp;gt;&amp;gt; signals = {&amp;#39;green&amp;#39;: &amp;#39;go&amp;#39;, ... &amp;#39;yellow&amp;#39;: &amp;#39;go faster&amp;#39;, ... &amp;#39;red&amp;#39;: [&amp;#39;stop&amp;#39;, &amp;#39;smile&amp;#39;]} &amp;gt;&amp;gt;&amp;gt; signals_copy = signals.copy() &amp;gt;&amp;gt;&amp;gt; signals_copy {&amp;#39;green&amp;#39;: &amp;#39;go&amp;#39;, &amp;#39;yellow&amp;#39;: &amp;#39;go faster&amp;#39;, &amp;#39;red&amp;#39;: [&amp;#39;stop&amp;#39;, &amp;#39;smile&amp;#39;]} &amp;gt;&amp;gt;&amp;gt; signals[&amp;#39;red&amp;#39;][1] = &amp;#39;sweat&amp;#39; &amp;gt;&amp;gt;&amp;gt; signals {&amp;#39;green&amp;#39;: &amp;#39;go&amp;#39;, &amp;#39;yellow&amp;#39;: &amp;#39;go faster&amp;#39;, &amp;#39;red&amp;#39;: [&amp;#39;stop&amp;#39;, &amp;#39;sweat&amp;#39;]} &amp;gt;&amp;gt;&amp;gt; signals_copy {&amp;#39;green&amp;#39;: &amp;#39;go&amp;#39;, &amp;#39;yellow&amp;#39;: &amp;#39;go faster&amp;#39;, &amp;#39;red&amp;#39;: [&amp;#39;stop&amp;#39;, &amp;#39;sweat&amp;#39;]} &amp;gt;&amp;gt;&amp;gt; import copy &amp;gt;&amp;gt;&amp;gt; signals = {&amp;#39;green&amp;#39;: &amp;#39;go&amp;#39;, &amp;#39;yellow&amp;#39;: &amp;#39;go faster&amp;#39;, &amp;#39;red&amp;#39;: [&amp;#39;stop&amp;#39;, &amp;#39;smile&amp;#39;]} &amp;gt;&amp;gt;&amp;gt; signals = copy.</description></item><item><title>【9.13】copyによるコピー</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/9.13copy%E3%81%AB%E3%82%88%E3%82%8B%E3%82%B3%E3%83%94%E3%83%BC/</link><pubDate>Sun, 06 Aug 2023 03:01:39 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/9.13copy%E3%81%AB%E3%82%88%E3%82%8B%E3%82%B3%E3%83%94%E3%83%BC/</guid><description> キー/バリューペアをコピーしたい場合は、copy()を使う 浅いコピーが行われる 辞書のバリューがイミュータブルであるときのみ正しく（直感的に正しく？）動作する そうでない場合、deepcopy()を使う &amp;gt;&amp;gt;&amp;gt; signals {&amp;#39;green&amp;#39;: &amp;#39;go&amp;#39;, &amp;#39;yellow&amp;#39;: &amp;#39;go faster&amp;#39;, &amp;#39;red&amp;#39;: &amp;#39;smile for the camera&amp;#39;} &amp;gt;&amp;gt;&amp;gt; original_signals = signals.copy() &amp;gt;&amp;gt;&amp;gt; signals[&amp;#39;blue&amp;#39;] = &amp;#39;confuse everyone&amp;#39; &amp;gt;&amp;gt;&amp;gt; signals {&amp;#39;green&amp;#39;: &amp;#39;go&amp;#39;, &amp;#39;yellow&amp;#39;: &amp;#39;go faster&amp;#39;, &amp;#39;red&amp;#39;: &amp;#39;smile for the camera&amp;#39;, &amp;#39;blue&amp;#39;: &amp;#39;confuse everyone&amp;#39;} &amp;gt;&amp;gt;&amp;gt; original_signals {&amp;#39;green&amp;#39;: &amp;#39;go&amp;#39;, &amp;#39;yellow&amp;#39;: &amp;#39;go faster&amp;#39;, &amp;#39;red&amp;#39;: &amp;#39;smile for the camera&amp;#39;}</description></item><item><title>【9.12】inを使ったキーの有無のテスト</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/9.12in%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9F%E3%82%AD%E3%83%BC%E3%81%AE%E6%9C%89%E7%84%A1%E3%81%AE%E3%83%86%E3%82%B9%E3%83%88/</link><pubDate>Sun, 06 Aug 2023 02:57:32 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/9.12in%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9F%E3%82%AD%E3%83%BC%E3%81%AE%E6%9C%89%E7%84%A1%E3%81%AE%E3%83%86%E3%82%B9%E3%83%88/</guid><description> 辞書にあるキーが含まれているかどうかを確認するには、inを使う &amp;gt;&amp;gt;&amp;gt; signals {&amp;#39;green&amp;#39;: &amp;#39;go&amp;#39;, &amp;#39;yellow&amp;#39;: &amp;#39;go faster&amp;#39;, &amp;#39;red&amp;#39;: &amp;#39;smile for the camera&amp;#39;} &amp;gt;&amp;gt;&amp;gt; &amp;#39;green&amp;#39; in signals True &amp;gt;&amp;gt;&amp;gt; &amp;#39;blown&amp;#39; in signals False &amp;gt;&amp;gt;&amp;gt; &amp;#39;go&amp;#39; in signals False</description></item><item><title>【9.11】clearによるすべての要素の削除</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/9.11clear%E3%81%AB%E3%82%88%E3%82%8B%E3%81%99%E3%81%B9%E3%81%A6%E3%81%AE%E8%A6%81%E7%B4%A0%E3%81%AE%E5%89%8A%E9%99%A4/</link><pubDate>Sun, 06 Aug 2023 02:56:21 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/9.11clear%E3%81%AB%E3%82%88%E3%82%8B%E3%81%99%E3%81%B9%E3%81%A6%E3%81%AE%E8%A6%81%E7%B4%A0%E3%81%AE%E5%89%8A%E9%99%A4/</guid><description> 辞書から全てのキーとバリューを削除するには、clear()を使うか、空辞書を代入する &amp;gt;&amp;gt;&amp;gt; pythons.clear() &amp;gt;&amp;gt;&amp;gt; pythons {}</description></item><item><title>【9.10】popによる指定したキーを持つ要素の取得と削除</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/9.10pop%E3%81%AB%E3%82%88%E3%82%8B%E6%8C%87%E5%AE%9A%E3%81%97%E3%81%9F%E3%82%AD%E3%83%BC%E3%82%92%E6%8C%81%E3%81%A4%E8%A6%81%E7%B4%A0%E3%81%AE%E5%8F%96%E5%BE%97%E3%81%A8%E5%89%8A%E9%99%A4/</link><pubDate>Sun, 06 Aug 2023 02:52:54 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/9.10pop%E3%81%AB%E3%82%88%E3%82%8B%E6%8C%87%E5%AE%9A%E3%81%97%E3%81%9F%E3%82%AD%E3%83%BC%E3%82%92%E6%8C%81%E3%81%A4%E8%A6%81%E7%B4%A0%E3%81%AE%E5%8F%96%E5%BE%97%E3%81%A8%E5%89%8A%E9%99%A4/</guid><description> pop()はget()とdelを組み合わせたような動作をする pop()に第二引数としてデフォルトバリューを与えると、キーがなくても例外は起こらない &amp;gt;&amp;gt;&amp;gt; len(pythons) 6 &amp;gt;&amp;gt;&amp;gt; pythons.pop(&amp;#39;Palin&amp;#39;) &amp;#39;Michael&amp;#39; &amp;gt;&amp;gt;&amp;gt; len(pythons) 5</description></item><item><title>【9.9】delによる指定したキーをもつ要素の削除</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/9.9del%E3%81%AB%E3%82%88%E3%82%8B%E6%8C%87%E5%AE%9A%E3%81%97%E3%81%9F%E3%82%AD%E3%83%BC%E3%82%92%E3%82%82%E3%81%A4%E8%A6%81%E7%B4%A0%E3%81%AE%E5%89%8A%E9%99%A4/</link><pubDate>Sun, 06 Aug 2023 02:51:03 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/9.9del%E3%81%AB%E3%82%88%E3%82%8B%E6%8C%87%E5%AE%9A%E3%81%97%E3%81%9F%E3%82%AD%E3%83%BC%E3%82%92%E3%82%82%E3%81%A4%E8%A6%81%E7%B4%A0%E3%81%AE%E5%89%8A%E9%99%A4/</guid><description> delでキーを指定して要素を削除できる &amp;gt;&amp;gt;&amp;gt; del pythons[&amp;#39;Marx&amp;#39;] &amp;gt;&amp;gt;&amp;gt; pythons {&amp;#39;Chapman&amp;#39;: &amp;#39;Graham&amp;#39;, &amp;#39;Cleese&amp;#39;: &amp;#39;John&amp;#39;, &amp;#39;Idle&amp;#39;: &amp;#39;Eric&amp;#39;, &amp;#39;Jones&amp;#39;: &amp;#39;Terry&amp;#39;, &amp;#39;Palin&amp;#39;: &amp;#39;Michael&amp;#39;, &amp;#39;Gilliam&amp;#39;: &amp;#39;Gerry&amp;#39;, &amp;#39;Howard&amp;#39;: &amp;#39;Moe&amp;#39;} &amp;gt;&amp;gt;&amp;gt; del pythons[&amp;#39;Howard&amp;#39;] &amp;gt;&amp;gt;&amp;gt; pythons {&amp;#39;Chapman&amp;#39;: &amp;#39;Graham&amp;#39;, &amp;#39;Cleese&amp;#39;: &amp;#39;John&amp;#39;, &amp;#39;Idle&amp;#39;: &amp;#39;Eric&amp;#39;, &amp;#39;Jones&amp;#39;: &amp;#39;Terry&amp;#39;, &amp;#39;Palin&amp;#39;: &amp;#39;Michael&amp;#39;, &amp;#39;Gilliam&amp;#39;: &amp;#39;Gerry&amp;#39;}</description></item><item><title>【9.8】updateによる辞書の結合</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/9.8update%E3%81%AB%E3%82%88%E3%82%8B%E8%BE%9E%E6%9B%B8%E3%81%AE%E7%B5%90%E5%90%88/</link><pubDate>Sun, 06 Aug 2023 02:47:19 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/9.8update%E3%81%AB%E3%82%88%E3%82%8B%E8%BE%9E%E6%9B%B8%E3%81%AE%E7%B5%90%E5%90%88/</guid><description> update()を使うことで、辞書のキーとバリューを別の辞書にコピーできる 第2の辞書が第1の辞書に含まれているのと同じキーを持っている場合は、第2の辞書のバリューが残る &amp;gt;&amp;gt;&amp;gt; pythons {&amp;#39;Chapman&amp;#39;: &amp;#39;Graham&amp;#39;, &amp;#39;Cleese&amp;#39;: &amp;#39;John&amp;#39;, &amp;#39;Idle&amp;#39;: &amp;#39;Eric&amp;#39;, &amp;#39;Jones&amp;#39;: &amp;#39;Terry&amp;#39;, &amp;#39;Palin&amp;#39;: &amp;#39;Michael&amp;#39;, &amp;#39;Gilliam&amp;#39;: &amp;#39;Gerry&amp;#39;} &amp;gt;&amp;gt;&amp;gt; others = {&amp;#39;Marx&amp;#39;: &amp;#39;Groucho&amp;#39;, &amp;#39;Howard&amp;#39;: &amp;#39;Moe&amp;#39;} &amp;gt;&amp;gt;&amp;gt; pythons.update(others) &amp;gt;&amp;gt;&amp;gt; pythons {&amp;#39;Chapman&amp;#39;: &amp;#39;Graham&amp;#39;, &amp;#39;Cleese&amp;#39;: &amp;#39;John&amp;#39;, &amp;#39;Idle&amp;#39;: &amp;#39;Eric&amp;#39;, &amp;#39;Jones&amp;#39;: &amp;#39;Terry&amp;#39;, &amp;#39;Palin&amp;#39;: &amp;#39;Michael&amp;#39;, &amp;#39;Gilliam&amp;#39;: &amp;#39;Gerry&amp;#39;, &amp;#39;Marx&amp;#39;: &amp;#39;Groucho&amp;#39;, &amp;#39;Howard&amp;#39;: &amp;#39;Moe&amp;#39;} &amp;gt;&amp;gt;&amp;gt; first = {&amp;#39;a&amp;#39;: 1, &amp;#39;b&amp;#39;: 2} &amp;gt;&amp;gt;&amp;gt; second = {&amp;#39;b&amp;#39;: &amp;#39;platypus&amp;#39;} &amp;gt;&amp;gt;&amp;gt; first.update(second) &amp;gt;&amp;gt;&amp;gt; first {&amp;#39;a&amp;#39;: 1, &amp;#39;b&amp;#39;: &amp;#39;platypus&amp;#39;}</description></item><item><title>【9.7】**による辞書の結合</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/9.7%E3%81%AB%E3%82%88%E3%82%8B%E8%BE%9E%E6%9B%B8%E3%81%AE%E7%B5%90%E5%90%88/</link><pubDate>Sun, 06 Aug 2023 02:36:58 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/9.7%E3%81%AB%E3%82%88%E3%82%8B%E8%BE%9E%E6%9B%B8%E3%81%AE%E7%B5%90%E5%90%88/</guid><description> **を使って辞書のマージができる (Python 3.5以降) 実体ではなく参照をコピーする浅いコピーであることに注意する 新しい辞書を作りたい場合は、deepcopyを使用するといい &amp;gt;&amp;gt;&amp;gt; first = {&amp;#39;a&amp;#39;: &amp;#39;agony&amp;#39;, &amp;#39;b&amp;#39;: &amp;#39;bliss&amp;#39;} &amp;gt;&amp;gt;&amp;gt; second = {&amp;#39;b&amp;#39;: &amp;#39;begals&amp;#39;, &amp;#39;c&amp;#39;: &amp;#39;candy&amp;#39;} &amp;gt;&amp;gt;&amp;gt; {**first, **second} {&amp;#39;a&amp;#39;: &amp;#39;agony&amp;#39;, &amp;#39;b&amp;#39;: &amp;#39;begals&amp;#39;, &amp;#39;c&amp;#39;: &amp;#39;candy&amp;#39;} &amp;gt;&amp;gt;&amp;gt; third = {&amp;#39;d&amp;#39;: &amp;#39;donuts&amp;#39;} &amp;gt;&amp;gt;&amp;gt; {**first, **third, **second} {&amp;#39;a&amp;#39;: &amp;#39;agony&amp;#39;, &amp;#39;b&amp;#39;: &amp;#39;begals&amp;#39;, &amp;#39;d&amp;#39;: &amp;#39;donuts&amp;#39;, &amp;#39;c&amp;#39;: &amp;#39;candy&amp;#39;}</description></item><item><title>【9.6】itemsによる全てのキーとバリューペアの取得</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/9.6items%E3%81%AB%E3%82%88%E3%82%8B%E5%85%A8%E3%81%A6%E3%81%AE%E3%82%AD%E3%83%BC%E3%81%A8%E3%83%90%E3%83%AA%E3%83%A5%E3%83%BC%E3%83%9A%E3%82%A2%E3%81%AE%E5%8F%96%E5%BE%97/</link><pubDate>Sun, 06 Aug 2023 02:32:18 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/9.6items%E3%81%AB%E3%82%88%E3%82%8B%E5%85%A8%E3%81%A6%E3%81%AE%E3%82%AD%E3%83%BC%E3%81%A8%E3%83%90%E3%83%AA%E3%83%A5%E3%83%BC%E3%83%9A%E3%82%A2%E3%81%AE%E5%8F%96%E5%BE%97/</guid><description> すべてのキー/バリューペアを取り出したい場合は、items()関数を使う &amp;gt;&amp;gt;&amp;gt; list(signals.items()) [(&amp;#39;green&amp;#39;, &amp;#39;go&amp;#39;), (&amp;#39;yellow&amp;#39;, &amp;#39;go faster&amp;#39;), (&amp;#39;red&amp;#39;, &amp;#39;smile for the camera&amp;#39;)]</description></item><item><title>【9.5】valuesによるすべてのバリューの取得</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/9.5values%E3%81%AB%E3%82%88%E3%82%8B%E3%81%99%E3%81%B9%E3%81%A6%E3%81%AE%E3%83%90%E3%83%AA%E3%83%A5%E3%83%BC%E3%81%AE%E5%8F%96%E5%BE%97/</link><pubDate>Sun, 06 Aug 2023 02:30:47 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/9.5values%E3%81%AB%E3%82%88%E3%82%8B%E3%81%99%E3%81%B9%E3%81%A6%E3%81%AE%E3%83%90%E3%83%AA%E3%83%A5%E3%83%BC%E3%81%AE%E5%8F%96%E5%BE%97/</guid><description> values()で辞書のすべてのバリューを取得できる &amp;gt;&amp;gt;&amp;gt; list(signals.values()) [&amp;#39;go&amp;#39;, &amp;#39;go faster&amp;#39;, &amp;#39;smile for the camera&amp;#39;]</description></item><item><title>【9.4】keysによるすべてのキーの取得</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/9.4keys%E3%81%AB%E3%82%88%E3%82%8B%E3%81%99%E3%81%B9%E3%81%A6%E3%81%AE%E3%82%AD%E3%83%BC%E3%81%AE%E5%8F%96%E5%BE%97/</link><pubDate>Sun, 06 Aug 2023 02:28:29 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/9.4keys%E3%81%AB%E3%82%88%E3%82%8B%E3%81%99%E3%81%B9%E3%81%A6%E3%81%AE%E3%82%AD%E3%83%BC%E3%81%AE%E5%8F%96%E5%BE%97/</guid><description> keys()を使えば、辞書のすべてのキーが取得できる &amp;gt;&amp;gt;&amp;gt; signals = {&amp;#39;green&amp;#39;: &amp;#39;go&amp;#39;, &amp;#39;yellow&amp;#39;: &amp;#39;go faster&amp;#39;, &amp;#39;red&amp;#39;: &amp;#39;smile for the camera&amp;#39;} &amp;gt;&amp;gt;&amp;gt; signals.keys() dict_keys([&amp;#39;green&amp;#39;, &amp;#39;yellow&amp;#39;, &amp;#39;red&amp;#39;])</description></item><item><title>【9.3】[key]かgetによる要素の取得</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/9.3key%E3%81%8Bget%E3%81%AB%E3%82%88%E3%82%8B%E8%A6%81%E7%B4%A0%E3%81%AE%E5%8F%96%E5%BE%97/</link><pubDate>Sun, 06 Aug 2023 02:22:33 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/9.3key%E3%81%8Bget%E3%81%AB%E3%82%88%E3%82%8B%E8%A6%81%E7%B4%A0%E3%81%AE%E5%8F%96%E5%BE%97/</guid><description> 辞書型の要素の取得 辞書とキーを指定して、対応するバリューを取り出す キーが辞書になければ、例外が発生する このような例外を避けるためには、inを使ってあらかじめキーがあるかどうか確かめておく get()メソッドを使えば、キー、オプションのバリューを指定し、キーがあればそのバリューが返される キーがない場合、何も表示されない &amp;gt;&amp;gt;&amp;gt; pythons {&amp;#39;Chapman&amp;#39;: &amp;#39;Graham&amp;#39;, &amp;#39;Cleese&amp;#39;: &amp;#39;John&amp;#39;, &amp;#39;Idle&amp;#39;: &amp;#39;Eric&amp;#39;, &amp;#39;Jones&amp;#39;: &amp;#39;Terry&amp;#39;, &amp;#39;Palin&amp;#39;: &amp;#39;Michael&amp;#39;, &amp;#39;Gilliam&amp;#39;: &amp;#39;Gerry&amp;#39;} &amp;gt;&amp;gt;&amp;gt; pythons.get(&amp;#39;John&amp;#39;) &amp;gt;&amp;gt;&amp;gt; pythons.get(&amp;#39;Jones&amp;#39;) &amp;#39;Terry&amp;#39; &amp;gt;&amp;gt;&amp;gt; pythons.get(&amp;#39;Eric&amp;#39;) &amp;gt;&amp;gt;&amp;gt; pythons.get(&amp;#39;aaa&amp;#39;, &amp;#39;Not a Python&amp;#39;) &amp;#39;Not a Python&amp;#39;</description></item><item><title>【9.2】[key]による要素の追加、削除</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/9.2key%E3%81%AB%E3%82%88%E3%82%8B%E8%A6%81%E7%B4%A0%E3%81%AE%E8%BF%BD%E5%8A%A0%E5%89%8A%E9%99%A4/</link><pubDate>Sun, 06 Aug 2023 02:18:46 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/9.2key%E3%81%AB%E3%82%88%E3%82%8B%E8%A6%81%E7%B4%A0%E3%81%AE%E8%BF%BD%E5%8A%A0%E5%89%8A%E9%99%A4/</guid><description> 辞書に要素を追加する場合 キーを使って要素を参照し、バリューを代入する &amp;gt;&amp;gt;&amp;gt; pythons = { ... &amp;#39;Chapman&amp;#39;: &amp;#39;Graham&amp;#39;, ... &amp;#39;Cleese&amp;#39;: &amp;#39;John&amp;#39;, ... &amp;#39;Idle&amp;#39;: &amp;#39;Eric&amp;#39;, ... &amp;#39;Jones&amp;#39;: &amp;#39;Terry&amp;#39;, ... &amp;#39;Palin&amp;#39;: &amp;#39;Michael&amp;#39;, ... } &amp;gt;&amp;gt;&amp;gt; pythons {&amp;#39;Chapman&amp;#39;: &amp;#39;Graham&amp;#39;, &amp;#39;Cleese&amp;#39;: &amp;#39;John&amp;#39;, &amp;#39;Idle&amp;#39;: &amp;#39;Eric&amp;#39;, &amp;#39;Jones&amp;#39;: &amp;#39;Terry&amp;#39;, &amp;#39;Palin&amp;#39;: &amp;#39;Michael&amp;#39;} &amp;gt;&amp;gt;&amp;gt; pythons[&amp;#39;Gilliam&amp;#39;] = &amp;#39;Gerry&amp;#39; &amp;gt;&amp;gt;&amp;gt; pythons {&amp;#39;Chapman&amp;#39;: &amp;#39;Graham&amp;#39;, &amp;#39;Cleese&amp;#39;: &amp;#39;John&amp;#39;, &amp;#39;Idle&amp;#39;: &amp;#39;Eric&amp;#39;, &amp;#39;Jones&amp;#39;: &amp;#39;Terry&amp;#39;, &amp;#39;Palin&amp;#39;: &amp;#39;Michael&amp;#39;, &amp;#39;Gilliam&amp;#39;: &amp;#39;Gerry&amp;#39;}</description></item><item><title>【9.1】dictによる変換</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/9.1dict%E3%81%AB%E3%82%88%E3%82%8B%E5%A4%89%E6%8F%9B/</link><pubDate>Sun, 06 Aug 2023 02:14:24 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/9.1dict%E3%81%AB%E3%82%88%E3%82%8B%E5%A4%89%E6%8F%9B/</guid><description> 2要素のシーケンスを含むものなら何でもdict()関数で辞書型に変換できる &amp;gt;&amp;gt;&amp;gt; lol = [[&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;], [&amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;], [&amp;#39;e&amp;#39;, &amp;#39;f&amp;#39;]] &amp;gt;&amp;gt;&amp;gt; dict(lol) {&amp;#39;a&amp;#39;: &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;: &amp;#39;d&amp;#39;, &amp;#39;e&amp;#39;: &amp;#39;f&amp;#39;} &amp;gt;&amp;gt;&amp;gt; lot = [(&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;), (&amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;), (&amp;#39;e&amp;#39;, &amp;#39;f&amp;#39;)] &amp;gt;&amp;gt;&amp;gt; dict(lot) {&amp;#39;a&amp;#39;: &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;: &amp;#39;d&amp;#39;, &amp;#39;e&amp;#39;: &amp;#39;f&amp;#39;} &amp;gt;&amp;gt;&amp;gt; tol = ([&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;], [&amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;], [&amp;#39;e&amp;#39;, &amp;#39;f&amp;#39;]) &amp;gt;&amp;gt;&amp;gt; dict(tol) {&amp;#39;a&amp;#39;: &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;: &amp;#39;d&amp;#39;, &amp;#39;e&amp;#39;: &amp;#39;f&amp;#39;} &amp;gt;&amp;gt;&amp;gt; los = [&amp;#39;ab&amp;#39;, &amp;#39;cd&amp;#39;, &amp;#39;ef&amp;#39;] &amp;gt;&amp;gt;&amp;gt; dict(los) {&amp;#39;a&amp;#39;: &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;: &amp;#39;d&amp;#39;, &amp;#39;e&amp;#39;: &amp;#39;f&amp;#39;} &amp;gt;&amp;gt;&amp;gt; tos = (&amp;#39;ab&amp;#39;, &amp;#39;cd&amp;#39;, &amp;#39;ef&amp;#39;) &amp;gt;&amp;gt;&amp;gt; dict(tos) {&amp;#39;a&amp;#39;: &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;: &amp;#39;d&amp;#39;, &amp;#39;e&amp;#39;: &amp;#39;f&amp;#39;}</description></item><item><title>【9】辞書</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/9%E8%BE%9E%E6%9B%B8/</link><pubDate>Sun, 06 Aug 2023 02:06:17 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/9%E8%BE%9E%E6%9B%B8/</guid><description>辞書は、要素のバリュー（値）に一意なキーを与える
値の代入に、オフセットは使わない 辞書のキーはイミュータブルなオブジェクトでなければならない {}による生成
&amp;gt;&amp;gt;&amp;gt; empty_dict = {} &amp;gt;&amp;gt;&amp;gt; empty_dict {} &amp;gt;&amp;gt;&amp;gt; bierce = { &amp;#34;day&amp;#34;: &amp;#34;A period of twenty-four hours, mostly, misspent&amp;#34;, ... &amp;#34;positive&amp;#34;: &amp;#34;Mistaken at the top of one&amp;#39;s voice&amp;#34;, ... &amp;#34;misfortune&amp;#34;: &amp;#34;The kind of fortune that never misses&amp;#34;, ... } &amp;gt;&amp;gt;&amp;gt; bierce {&amp;#39;day&amp;#39;: &amp;#39;A period of twenty-four hours, mostly, misspent&amp;#39;, &amp;#39;positive&amp;#39;: &amp;#34;Mistaken at the top of one&amp;#39;s voice&amp;#34;, &amp;#39;misfortune&amp;#39;: &amp;#39;The kind of fortune that never misses&amp;#39;} dictによる生成 &amp;gt;&amp;gt;&amp;gt; acme_customer = dict(first=&amp;#34;Wile&amp;#34;, middle=&amp;#34;E&amp;#34;, last=&amp;#34;Coyote&amp;#34;) &amp;gt;&amp;gt;&amp;gt; acme_customer {&amp;#39;first&amp;#39;: &amp;#39;Wile&amp;#39;, &amp;#39;middle&amp;#39;: &amp;#39;E&amp;#39;, &amp;#39;last&amp;#39;: &amp;#39;Coyote&amp;#39;} リストと同様に、辞書に変更を加えると、その遺書を参照しているすべての名前に影響が及ぶ</description></item><item><title>【8.1.5】タプルとリストの比較</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8.1.5%E3%82%BF%E3%83%97%E3%83%AB%E3%81%A8%E3%83%AA%E3%82%B9%E3%83%88%E3%81%AE%E6%AF%94%E8%BC%83/</link><pubDate>Sat, 05 Aug 2023 23:14:38 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8.1.5%E3%82%BF%E3%83%97%E3%83%AB%E3%81%A8%E3%83%AA%E3%82%B9%E3%83%88%E3%81%AE%E6%AF%94%E8%BC%83/</guid><description>リストと比べたときのタプルのメリット
タプルは、消費スペースが小さい
タプルの要素は、誤って書き換える危険がない
タプルは辞書のキーとして使える
名前付きタプルは、オブジェクトの代用品となる
タプル内包表記は存在しない
ミュータブル型には内包表記があるが、イミュータブル型にはそんなものはない　</description></item><item><title>【8.2.20】リスト内表記の使い方</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8.2.20%E3%83%AA%E3%82%B9%E3%83%88%E5%86%85%E8%A1%A8%E8%A8%98%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9/</link><pubDate>Sat, 05 Aug 2023 23:03:57 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8.2.20%E3%83%AA%E3%82%B9%E3%83%88%E5%86%85%E8%A1%A8%E8%A8%98%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9/</guid><description>リスト内表記の形式 [expression for item in iterable] &amp;gt;&amp;gt;&amp;gt; number_list = [number for number in range(1, 6)] &amp;gt;&amp;gt;&amp;gt; number_list [1, 2, 3, 4, 5] &amp;gt;&amp;gt;&amp;gt; number_list = [number - 1 for number in range(1, 6)] &amp;gt;&amp;gt;&amp;gt; number_list [0, 1, 2, 3, 4] &amp;gt;&amp;gt;&amp;gt; number_list = [number for number in range(1, 6) if number % 2 == 1] &amp;gt;&amp;gt;&amp;gt; number_list [1, 3, 5] &amp;gt;&amp;gt;&amp;gt; rows = range(1, 4) &amp;gt;&amp;gt;&amp;gt; cols = range(1, 3) &amp;gt;&amp;gt;&amp;gt; cells = [(row, col) for in rows for col in cols] &amp;gt;&amp;gt;&amp;gt; cells = [(row, col) for row in rows for col in cols] &amp;gt;&amp;gt;&amp;gt; for cell in cells: .</description></item><item><title>【8.2.19】zipによる複数のシーケンスの反復処理</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8.2.19zip%E3%81%AB%E3%82%88%E3%82%8B%E8%A4%87%E6%95%B0%E3%81%AE%E3%82%B7%E3%83%BC%E3%82%B1%E3%83%B3%E3%82%B9%E3%81%AE%E5%8F%8D%E5%BE%A9%E5%87%A6%E7%90%86/</link><pubDate>Sat, 05 Aug 2023 22:54:32 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8.2.19zip%E3%81%AB%E3%82%88%E3%82%8B%E8%A4%87%E6%95%B0%E3%81%AE%E3%82%B7%E3%83%BC%E3%82%B1%E3%83%B3%E3%82%B9%E3%81%AE%E5%8F%8D%E5%BE%A9%E5%87%A6%E7%90%86/</guid><description> zip()を使えば、複数のシーケンスを並行して反復処理できる 最も短いシーケンスの処理をし尽くしたときに止まる zip()から返ってくる値は、タプルやリストに変換できる &amp;gt;&amp;gt;&amp;gt; english = &amp;#39;monday&amp;#39;, &amp;#39;tuesday&amp;#39;, &amp;#39;wednesday&amp;#39; &amp;gt;&amp;gt;&amp;gt; french = &amp;#39;lundi&amp;#39;, &amp;#39;mardi&amp;#39;, &amp;#39;mercredi&amp;#39; &amp;gt;&amp;gt;&amp;gt; list(zip(english, french)) [(&amp;#39;monday&amp;#39;, &amp;#39;lundi&amp;#39;), (&amp;#39;tuesday&amp;#39;, &amp;#39;mardi&amp;#39;), (&amp;#39;wednesday&amp;#39;, &amp;#39;mercredi&amp;#39;)] &amp;gt;&amp;gt;&amp;gt; dict(zip(english, french)) {&amp;#39;monday&amp;#39;: &amp;#39;lundi&amp;#39;, &amp;#39;tuesday&amp;#39;: &amp;#39;mardi&amp;#39;, &amp;#39;wednesday&amp;#39;: &amp;#39;mercredi&amp;#39;}</description></item><item><title>【8.2.18】forとinによる反復処理</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8.2.18for%E3%81%A8in%E3%81%AB%E3%82%88%E3%82%8B%E5%8F%8D%E5%BE%A9%E5%87%A6%E7%90%86/</link><pubDate>Sat, 05 Aug 2023 22:49:02 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8.2.18for%E3%81%A8in%E3%81%AB%E3%82%88%E3%82%8B%E5%8F%8D%E5%BE%A9%E5%87%A6%E7%90%86/</guid><description> 大体前に書いたforとinによる反復処理と同じ breakによるループの終了 breakされずに終了した場合のelse などが使える</description></item><item><title>【8.2.17】deepcopyによるすべての要素のコピー</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8.2.17deepcopy%E3%81%AB%E3%82%88%E3%82%8B%E3%81%99%E3%81%B9%E3%81%A6%E3%81%AE%E8%A6%81%E7%B4%A0%E3%81%AE%E3%82%B3%E3%83%94%E3%83%BC/</link><pubDate>Sat, 05 Aug 2023 22:34:03 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8.2.17deepcopy%E3%81%AB%E3%82%88%E3%82%8B%E3%81%99%E3%81%B9%E3%81%A6%E3%81%AE%E8%A6%81%E7%B4%A0%E3%81%AE%E3%82%B3%E3%83%94%E3%83%BC/</guid><description>copy()関数は、リストの要素がすべてイミュータブルである場合にうまく機能する ミュータブルな値（リスト、集合、辞書）の場合は参照である オリジナルかコピーのどちらかに変更を加えると、両方に変更が反映される &amp;gt;&amp;gt;&amp;gt; a = [1, 2, [8, 9]] &amp;gt;&amp;gt;&amp;gt; b = a.copy() &amp;gt;&amp;gt;&amp;gt; c = list(a) &amp;gt;&amp;gt;&amp;gt; d = a[:] &amp;gt;&amp;gt;&amp;gt; a [1, 2, [8, 9]] &amp;gt;&amp;gt;&amp;gt; b [1, 2, [8, 9]] &amp;gt;&amp;gt;&amp;gt; c [1, 2, [8, 9]] &amp;gt;&amp;gt;&amp;gt; d [1, 2, [8, 9]] &amp;gt;&amp;gt;&amp;gt; a[2][1] = 10 &amp;gt;&amp;gt;&amp;gt; a [1, 2, [8, 10]] &amp;gt;&amp;gt;&amp;gt; b [1, 2, [8, 10]] &amp;gt;&amp;gt;&amp;gt; c [1, 2, [8, 10]] &amp;gt;&amp;gt;&amp;gt; d [1, 2, [8, 10]] a[2]の値はリストなので、その要素は書き換えられる b, c, dを作るために使ったリストのコピーは全て浅いコピー（shallow copy） これを解決するには、deepcopy()関数を使う &amp;gt;&amp;gt;&amp;gt; import copy &amp;gt;&amp;gt;&amp;gt; a = [1, 2, [8, 9]] &amp;gt;&amp;gt;&amp;gt; b = copy.</description></item><item><title>【8.2.16】copy,list,スライスによるコピー</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8.2.16copylist%E3%82%B9%E3%83%A9%E3%82%A4%E3%82%B9%E3%81%AB%E3%82%88%E3%82%8B%E3%82%B3%E3%83%94%E3%83%BC/</link><pubDate>Sat, 05 Aug 2023 22:28:20 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8.2.16copylist%E3%82%B9%E3%83%A9%E3%82%A4%E3%82%B9%E3%81%AB%E3%82%88%E3%82%8B%E3%82%B3%E3%83%94%E3%83%BC/</guid><description> リストの値を独立の新しいリストにコピーする リストのcopy()メソッド list()関数 リストスライス[:] &amp;gt;&amp;gt;&amp;gt; a = [1, 2, 3] &amp;gt;&amp;gt;&amp;gt; b = a.copy() &amp;gt;&amp;gt;&amp;gt; c = list(a) &amp;gt;&amp;gt;&amp;gt; d = a[:] これらのb, c, dは全て値のコピー &amp;gt;&amp;gt;&amp;gt; a [&amp;#39;integer lists are boring&amp;#39;, 2, 3] &amp;gt;&amp;gt;&amp;gt; b [1, 2, 3] &amp;gt;&amp;gt;&amp;gt; c [1, 2, 3] &amp;gt;&amp;gt;&amp;gt; d [1, 2, 3]</description></item><item><title>【8.2.15】=によるリストの代入</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8.2.15%E3%81%AB%E3%82%88%E3%82%8B%E3%83%AA%E3%82%B9%E3%83%88%E3%81%AE%E4%BB%A3%E5%85%A5/</link><pubDate>Sat, 05 Aug 2023 22:25:28 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8.2.15%E3%81%AB%E3%82%88%E3%82%8B%E3%83%AA%E3%82%B9%E3%83%88%E3%81%AE%E4%BB%A3%E5%85%A5/</guid><description> 1つのリストを複数の変数に代入すると、その中の1つでリストを書き換えたときに他も書き換えられる 2つのタグについている糸はどちらも同じ箱につながっている &amp;gt;&amp;gt;&amp;gt; a = [1, 2, 3] &amp;gt;&amp;gt;&amp;gt; a [1, 2, 3] &amp;gt;&amp;gt;&amp;gt; b = a &amp;gt;&amp;gt;&amp;gt; b [1, 2, 3] &amp;gt;&amp;gt;&amp;gt; a[0] = &amp;#39;suprise&amp;#39; &amp;gt;&amp;gt;&amp;gt; a [&amp;#39;suprise&amp;#39;, 2, 3] &amp;gt;&amp;gt;&amp;gt; b [&amp;#39;suprise&amp;#39;, 2, 3]</description></item><item><title>【8.2.14】sort,sortedによる並び替え</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8.2.14sortsorted%E3%81%AB%E3%82%88%E3%82%8B%E4%B8%A6%E3%81%B3%E6%9B%BF%E3%81%88/</link><pubDate>Sat, 05 Aug 2023 22:21:38 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8.2.14sortsorted%E3%81%AB%E3%82%88%E3%82%8B%E4%B8%A6%E3%81%B3%E6%9B%BF%E3%81%88/</guid><description> リストを値の順序で並び替える場合 リスト関数のsort()は、インプレースにリスト自体をソートする ソート元自体のリストが変更される インプレース 元のデータを直接変更する操作を指すらしい 組み込み関数のsorted()は、ソートされたリストのコピーを返す ソート元自体のリストは変更されない reverse=Trueを指定すれば降順になる</description></item><item><title>【8.2.13】joinによる文字列への変換</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8.2.13join%E3%81%AB%E3%82%88%E3%82%8B%E6%96%87%E5%AD%97%E5%88%97%E3%81%B8%E3%81%AE%E5%A4%89%E6%8F%9B/</link><pubDate>Sat, 05 Aug 2023 21:44:19 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8.2.13join%E3%81%AB%E3%82%88%E3%82%8B%E6%96%87%E5%AD%97%E5%88%97%E3%81%B8%E3%81%AE%E5%A4%89%E6%8F%9B/</guid><description> join()を使ってリストを文字列に変換できる joinの引数は文字列か文字列のイテラブル &amp;gt;&amp;gt;&amp;gt; &amp;#39;,&amp;#39;.join(maxes) &amp;#39;Groucho,Gummo,Harpo,Zeppo,Gummo,Karl,Gummo,Karl&amp;#39;</description></item><item><title>【8.2.12】countによる値の個数の計算</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8.2.12count%E3%81%AB%E3%82%88%E3%82%8B%E5%80%A4%E3%81%AE%E5%80%8B%E6%95%B0%E3%81%AE%E8%A8%88%E7%AE%97/</link><pubDate>Sat, 05 Aug 2023 21:42:07 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8.2.12count%E3%81%AB%E3%82%88%E3%82%8B%E5%80%A4%E3%81%AE%E5%80%8B%E6%95%B0%E3%81%AE%E8%A8%88%E7%AE%97/</guid><description> 値がリストに何個含まれているか計算するにはcountを使う &amp;gt;&amp;gt;&amp;gt; maxes.count(&amp;#39;Gummo&amp;#39;) 3</description></item><item><title>【8.2.11】inによる値の有無のテスト</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8.2.11in%E3%81%AB%E3%82%88%E3%82%8B%E5%80%A4%E3%81%AE%E6%9C%89%E7%84%A1%E3%81%AE%E3%83%86%E3%82%B9%E3%83%88/</link><pubDate>Sat, 05 Aug 2023 21:39:06 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8.2.11in%E3%81%AB%E3%82%88%E3%82%8B%E5%80%A4%E3%81%AE%E6%9C%89%E7%84%A1%E3%81%AE%E3%83%86%E3%82%B9%E3%83%88/</guid><description> リストに値が存在するかどうかをテストするには、inを使う &amp;gt;&amp;gt;&amp;gt; &amp;#39;Groucho&amp;#39; in maxes True &amp;gt;&amp;gt;&amp;gt; &amp;#39;Bob&amp;#39; in maxes False</description></item><item><title>【8.2.10】indexで要素の値から要素のオフセットを調べることができる</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8.2.10index%E3%81%A7%E8%A6%81%E7%B4%A0%E3%81%AE%E5%80%A4%E3%81%8B%E3%82%89%E8%A6%81%E7%B4%A0%E3%81%AE%E3%82%AA%E3%83%95%E3%82%BB%E3%83%83%E3%83%88%E3%82%92%E8%AA%BF%E3%81%B9%E3%82%8B%E3%81%93%E3%81%A8%E3%81%8C%E3%81%A7%E3%81%8D%E3%82%8B/</link><pubDate>Sat, 05 Aug 2023 21:36:27 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8.2.10index%E3%81%A7%E8%A6%81%E7%B4%A0%E3%81%AE%E5%80%A4%E3%81%8B%E3%82%89%E8%A6%81%E7%B4%A0%E3%81%AE%E3%82%AA%E3%83%95%E3%82%BB%E3%83%83%E3%83%88%E3%82%92%E8%AA%BF%E3%81%B9%E3%82%8B%E3%81%93%E3%81%A8%E3%81%8C%E3%81%A7%E3%81%8D%E3%82%8B/</guid><description> index()を使うことで、要素の値からその要素のリスト内でのオフセットを調べることができる 複数ある場合は、最初の要素のオフセットだけが返される &amp;gt;&amp;gt;&amp;gt; maxes [&amp;#39;Groucho&amp;#39;, &amp;#39;Gummo&amp;#39;, &amp;#39;Harpo&amp;#39;, &amp;#39;Zeppo&amp;#39;, &amp;#39;Gummo&amp;#39;, &amp;#39;Karl&amp;#39;, &amp;#39;Gummo&amp;#39;, &amp;#39;Karl&amp;#39;] &amp;gt;&amp;gt;&amp;gt; maxes.index(&amp;#39;Zeppo&amp;#39;) 3 &amp;gt;&amp;gt;&amp;gt; maxes.index(&amp;#39;Gummo&amp;#39;) 1</description></item><item><title>【8.2.9】clearによるすべての要素の削除</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8.2.9clear%E3%81%AB%E3%82%88%E3%82%8B%E3%81%99%E3%81%B9%E3%81%A6%E3%81%AE%E8%A6%81%E7%B4%A0%E3%81%AE%E5%89%8A%E9%99%A4/</link><pubDate>Sat, 05 Aug 2023 21:33:20 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8.2.9clear%E3%81%AB%E3%82%88%E3%82%8B%E3%81%99%E3%81%B9%E3%81%A6%E3%81%AE%E8%A6%81%E7%B4%A0%E3%81%AE%E5%89%8A%E9%99%A4/</guid><description> clearを使うことで、すべての要素をリストから削除できる &amp;gt;&amp;gt;&amp;gt; work_quotes = [1, 2, 3, 4, 5, 6, 7] &amp;gt;&amp;gt;&amp;gt; work_quotes [1, 2, 3, 4, 5, 6, 7] &amp;gt;&amp;gt;&amp;gt; work_quotes.clear() &amp;gt;&amp;gt;&amp;gt; work_quotes []</description></item><item><title>【8.2.8】popでオフセットを指定して要素を取り出し削除する</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8.2.8pop%E3%81%A7%E3%82%AA%E3%83%95%E3%82%BB%E3%83%83%E3%83%88%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%97%E3%81%A6%E8%A6%81%E7%B4%A0%E3%82%92%E5%8F%96%E3%82%8A%E5%87%BA%E3%81%97%E5%89%8A%E9%99%A4%E3%81%99%E3%82%8B/</link><pubDate>Sat, 05 Aug 2023 21:31:22 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8.2.8pop%E3%81%A7%E3%82%AA%E3%83%95%E3%82%BB%E3%83%83%E3%83%88%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%97%E3%81%A6%E8%A6%81%E7%B4%A0%E3%82%92%E5%8F%96%E3%82%8A%E5%87%BA%E3%81%97%E5%89%8A%E9%99%A4%E3%81%99%E3%82%8B/</guid><description> pop()を使うことで、リストから要素を取り出し、同時にリストからその要素を削除できる 引数を指定しなければ、オフセットとして-1が使われる つまり末尾だね &amp;gt;&amp;gt;&amp;gt; maxes [&amp;#39;Groucho&amp;#39;, &amp;#39;Chico&amp;#39;, &amp;#39;Gummo&amp;#39;, &amp;#39;Harpo&amp;#39;, &amp;#39;Zeppo&amp;#39;, &amp;#39;Gummo&amp;#39;, &amp;#39;Karl&amp;#39;, &amp;#39;Gummo&amp;#39;, &amp;#39;Karl&amp;#39;] &amp;gt;&amp;gt;&amp;gt; maxes.pop(1) &amp;#39;Chico&amp;#39; &amp;gt;&amp;gt;&amp;gt; maxes [&amp;#39;Groucho&amp;#39;, &amp;#39;Gummo&amp;#39;, &amp;#39;Harpo&amp;#39;, &amp;#39;Zeppo&amp;#39;, &amp;#39;Gummo&amp;#39;, &amp;#39;Karl&amp;#39;, &amp;#39;Gummo&amp;#39;, &amp;#39;Karl&amp;#39;]</description></item><item><title>【8.2.7】delによるオフセットを指定した要素の削除</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8.2.7del%E3%81%AB%E3%82%88%E3%82%8B%E3%82%AA%E3%83%95%E3%82%BB%E3%83%83%E3%83%88%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%97%E3%81%9F%E8%A6%81%E7%B4%A0%E3%81%AE%E5%89%8A%E9%99%A4/</link><pubDate>Sat, 05 Aug 2023 21:27:48 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8.2.7del%E3%81%AB%E3%82%88%E3%82%8B%E3%82%AA%E3%83%95%E3%82%BB%E3%83%83%E3%83%88%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%97%E3%81%9F%E8%A6%81%E7%B4%A0%E3%81%AE%E5%89%8A%E9%99%A4/</guid><description> delによってオフセットを指定してリストから要素を削除できる delはPythonの文であり、リストのメソッドではない 代入の逆であり、Pythonオブジェクトから名前を切り離す その名前がオブジェクトの最後の参照なら、オブジェクトのメモリを開放する &amp;gt;&amp;gt;&amp;gt; maxes [&amp;#39;Groucho&amp;#39;, &amp;#39;Chico&amp;#39;, &amp;#39;Gummo&amp;#39;, &amp;#39;Harpo&amp;#39;, &amp;#39;Zeppo&amp;#39;, &amp;#39;Gummo&amp;#39;, &amp;#39;Karl&amp;#39;, &amp;#39;Gummo&amp;#39;, &amp;#39;Karl&amp;#39;, [&amp;#39;Gummo&amp;#39;, &amp;#39;Karl&amp;#39;]] &amp;gt;&amp;gt;&amp;gt; maxes[-1] [&amp;#39;Gummo&amp;#39;, &amp;#39;Karl&amp;#39;] &amp;gt;&amp;gt;&amp;gt; del maxes[-1] &amp;gt;&amp;gt;&amp;gt; maxes [&amp;#39;Groucho&amp;#39;, &amp;#39;Chico&amp;#39;, &amp;#39;Gummo&amp;#39;, &amp;#39;Harpo&amp;#39;, &amp;#39;Zeppo&amp;#39;, &amp;#39;Gummo&amp;#39;, &amp;#39;Karl&amp;#39;, &amp;#39;Gummo&amp;#39;, &amp;#39;Karl&amp;#39;]</description></item><item><title>【8.2.6】スライスによる要素の書き換え</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8.2.6%E3%82%B9%E3%83%A9%E3%82%A4%E3%82%B9%E3%81%AB%E3%82%88%E3%82%8B%E8%A6%81%E7%B4%A0%E3%81%AE%E6%9B%B8%E3%81%8D%E6%8F%9B%E3%81%88/</link><pubDate>Sat, 05 Aug 2023 21:20:08 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8.2.6%E3%82%B9%E3%83%A9%E3%82%A4%E3%82%B9%E3%81%AB%E3%82%88%E3%82%8B%E8%A6%81%E7%B4%A0%E3%81%AE%E6%9B%B8%E3%81%8D%E6%8F%9B%E3%81%88/</guid><description>スライスによる要素の書き換え スライスを使ってサブリストに値を代入することができる &amp;gt;&amp;gt;&amp;gt; numbers = [1, 2, 3, 4] &amp;gt;&amp;gt;&amp;gt; numbers[1:3] = [8, 9] &amp;gt;&amp;gt;&amp;gt; numbers [1, 8, 9, 4] リストに代入しようとしている右辺値は、左辺のスライスと要素数が等しくなくてもよい &amp;gt;&amp;gt;&amp;gt; numbers = [1, 2, 3, 4] &amp;gt;&amp;gt;&amp;gt; numbers[1:3] = [7, 8, 9] &amp;gt;&amp;gt;&amp;gt; numbers [1, 7, 8, 9, 4] &amp;gt;&amp;gt;&amp;gt; numbers[1:3] = [] &amp;gt;&amp;gt;&amp;gt; numbers [1, 9, 4] 右辺値はリストでなくてもよい Pythonのイテラブルなら何でもよい &amp;gt;&amp;gt;&amp;gt; numbers = [1, 2, 3, 4] &amp;gt;&amp;gt;&amp;gt; numbers[1:3] = (98, 99, 100) &amp;gt;&amp;gt;&amp;gt; numbers [1, 98, 99, 100, 4] &amp;gt;&amp;gt;&amp;gt; numbers = [1, 2, 3, 4] &amp;gt;&amp;gt;&amp;gt; numbers[1:3] = &amp;#39;wat?</description></item><item><title>【8.2.5】extendまたは+=によるリストの連結</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8.2.5extend%E3%81%BE%E3%81%9F%E3%81%AF+%E3%81%AB%E3%82%88%E3%82%8B%E3%83%AA%E3%82%B9%E3%83%88%E3%81%AE%E9%80%A3%E7%B5%90/</link><pubDate>Sat, 05 Aug 2023 21:08:44 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8.2.5extend%E3%81%BE%E3%81%9F%E3%81%AF+%E3%81%AB%E3%82%88%E3%82%8B%E3%83%AA%E3%82%B9%E3%83%88%E3%81%AE%E9%80%A3%E7%B5%90/</guid><description> extend()を使うことで、リストを1つにまとめることができる +=でも同じことができる append()を使うと、全ての要素が1個のリストとして追加されてしまう &amp;gt;&amp;gt;&amp;gt; others = [&amp;#39;Gummo&amp;#39;, &amp;#39;Karl&amp;#39;] &amp;gt;&amp;gt;&amp;gt; maxes.extend(others) &amp;gt;&amp;gt;&amp;gt; maxes [&amp;#39;Groucho&amp;#39;, &amp;#39;Chico&amp;#39;, &amp;#39;Gummo&amp;#39;, &amp;#39;Harpo&amp;#39;, &amp;#39;Zeppo&amp;#39;, &amp;#39;Gummo&amp;#39;, &amp;#39;Karl&amp;#39;] &amp;gt;&amp;gt;&amp;gt; maxes += others &amp;gt;&amp;gt;&amp;gt; maxes [&amp;#39;Groucho&amp;#39;, &amp;#39;Chico&amp;#39;, &amp;#39;Gummo&amp;#39;, &amp;#39;Harpo&amp;#39;, &amp;#39;Zeppo&amp;#39;, &amp;#39;Gummo&amp;#39;, &amp;#39;Karl&amp;#39;, &amp;#39;Gummo&amp;#39;, &amp;#39;Karl&amp;#39;] &amp;gt;&amp;gt;&amp;gt; maxes.append(others) &amp;gt;&amp;gt;&amp;gt; maxes [&amp;#39;Groucho&amp;#39;, &amp;#39;Chico&amp;#39;, &amp;#39;Gummo&amp;#39;, &amp;#39;Harpo&amp;#39;, &amp;#39;Zeppo&amp;#39;, &amp;#39;Gummo&amp;#39;, &amp;#39;Karl&amp;#39;, &amp;#39;Gummo&amp;#39;, &amp;#39;Karl&amp;#39;, [&amp;#39;Gummo&amp;#39;, &amp;#39;Karl&amp;#39;]]</description></item><item><title>【8.2.4】*による全要素の繰り返し</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8.2.4%E3%81%AB%E3%82%88%E3%82%8B%E5%85%A8%E8%A6%81%E7%B4%A0%E3%81%AE%E7%B9%B0%E3%82%8A%E8%BF%94%E3%81%97/</link><pubDate>Sat, 05 Aug 2023 21:07:19 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8.2.4%E3%81%AB%E3%82%88%E3%82%8B%E5%85%A8%E8%A6%81%E7%B4%A0%E3%81%AE%E7%B9%B0%E3%82%8A%E8%BF%94%E3%81%97/</guid><description> リストでも*で文字列やタプルを繰り返すことができる &amp;gt;&amp;gt;&amp;gt; [&amp;#39;blah&amp;#39;] * 3 [&amp;#39;blah&amp;#39;, &amp;#39;blah&amp;#39;, &amp;#39;blah&amp;#39;]</description></item><item><title>【8.2.3】insertによるオフセットを指定した要素の追加</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8.2.3insert%E3%81%AB%E3%82%88%E3%82%8B%E3%82%AA%E3%83%95%E3%82%BB%E3%83%83%E3%83%88%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%97%E3%81%9F%E8%A6%81%E7%B4%A0%E3%81%AE%E8%BF%BD%E5%8A%A0/</link><pubDate>Sat, 05 Aug 2023 21:04:55 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8.2.3insert%E3%81%AB%E3%82%88%E3%82%8B%E3%82%AA%E3%83%95%E3%82%BB%E3%83%83%E3%83%88%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%97%E3%81%9F%E8%A6%81%E7%B4%A0%E3%81%AE%E8%BF%BD%E5%8A%A0/</guid><description> append()では、末尾にしか要素を追加できない オフセットを指定して、要素を追加したいときにはinsert()を使う &amp;gt;&amp;gt;&amp;gt; maxes.insert(2, &amp;#39;Gummo&amp;#39;) &amp;gt;&amp;gt;&amp;gt; maxes [&amp;#39;Groucho&amp;#39;, &amp;#39;Chico&amp;#39;, &amp;#39;Gummo&amp;#39;, &amp;#39;Harpo&amp;#39;, &amp;#39;Zeppo&amp;#39;]</description></item><item><title>【8.2.2】appendによる末尾への要素の追加</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8.2.2append%E3%81%AB%E3%82%88%E3%82%8B%E6%9C%AB%E5%B0%BE%E3%81%B8%E3%81%AE%E8%A6%81%E7%B4%A0%E3%81%AE%E8%BF%BD%E5%8A%A0/</link><pubDate>Sat, 05 Aug 2023 21:01:09 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8.2.2append%E3%81%AB%E3%82%88%E3%82%8B%E6%9C%AB%E5%B0%BE%E3%81%B8%E3%81%AE%E8%A6%81%E7%B4%A0%E3%81%AE%E8%BF%BD%E5%8A%A0/</guid><description> append()を使うことで、リストに要素を一つずつ追加できる &amp;gt;&amp;gt;&amp;gt; maxes = [&amp;#39;Groucho&amp;#39;, &amp;#39;Chico&amp;#39;, &amp;#39;Harpo&amp;#39;] &amp;gt;&amp;gt;&amp;gt; maxes.append(&amp;#39;Zeppo&amp;#39;) &amp;gt;&amp;gt;&amp;gt; maxes [&amp;#39;Groucho&amp;#39;, &amp;#39;Chico&amp;#39;, &amp;#39;Harpo&amp;#39;, &amp;#39;Zeppo&amp;#39;]</description></item><item><title>【8.2.1】splitによる文字列からのリストの作成</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8.2.1split%E3%81%AB%E3%82%88%E3%82%8B%E6%96%87%E5%AD%97%E5%88%97%E3%81%8B%E3%82%89%E3%81%AE%E3%83%AA%E3%82%B9%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90/</link><pubDate>Sat, 05 Aug 2023 20:51:25 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8.2.1split%E3%81%AB%E3%82%88%E3%82%8B%E6%96%87%E5%AD%97%E5%88%97%E3%81%8B%E3%82%89%E3%81%AE%E3%83%AA%E3%82%B9%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90/</guid><description>split()関数を使って、何らかのセパレータ文字列に基づいて文字列を分割してリストにできる
&amp;gt;&amp;gt;&amp;gt; talk_like_a_pirate_day = &amp;#39;9/19/2019&amp;#39; &amp;gt;&amp;gt;&amp;gt; talk_like_a_pirate_day.split(&amp;#39;/&amp;#39;) [&amp;#39;9&amp;#39;, &amp;#39;19&amp;#39;, &amp;#39;2019&amp;#39;]</description></item><item><title>【8.2】リスト</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8.2%E3%83%AA%E3%82%B9%E3%83%88/</link><pubDate>Sat, 05 Aug 2023 20:45:41 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8.2%E3%83%AA%E3%82%B9%E3%83%88/</guid><description> リスト
要素を順番に管理したいとき、順序と内容が変わる場合があるときに向いている 順番がどうでも良い時は集合の方が向いているかもしれない リストはミュータブル 直接変更できる []による作成
&amp;gt;&amp;gt;&amp;gt; empty_list = [] &amp;gt;&amp;gt;&amp;gt; weekdays = [&amp;#39;Monday&amp;#39;, &amp;#39;Tuesday&amp;#39;, &amp;#39;Wednesday&amp;#39;, &amp;#39;Thursday&amp;#39;, &amp;#39;Friday&amp;#39;] list()による生成、置き換え タプルなどからリストを生成できる &amp;gt;&amp;gt;&amp;gt; another_empty_list = list() &amp;gt;&amp;gt;&amp;gt; another_empty_list [] [offset]を使えばリストから個々の要素を取り出せる
書き換えも可能(ミュータブルなので) スライスを使うことでも、要素の取り出しや書き換えができる
【5.6.1】スライス リストの比較
比較演算子を使って直接比較できる 両方のリストをたどって、同じオフセットの要素を比較する</description></item><item><title>【8.1.4】tupleの書き換え</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8.1.4tuple%E3%81%AE%E6%9B%B8%E3%81%8D%E6%8F%9B%E3%81%88/</link><pubDate>Sat, 05 Aug 2023 16:57:37 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8.1.4tuple%E3%81%AE%E6%9B%B8%E3%81%8D%E6%8F%9B%E3%81%88/</guid><description> タプルはイミュータブルであるため、既存のタプルを書き換えることはできない 連結は可能 &amp;gt;&amp;gt;&amp;gt; t1 = (&amp;#39;Fee&amp;#39;, &amp;#39;Fie&amp;#39;, &amp;#39;Foe&amp;#39;) &amp;gt;&amp;gt;&amp;gt; t2 = (&amp;#39;Flop&amp;#39;,) &amp;gt;&amp;gt;&amp;gt; t1 + t2 (&amp;#39;Fee&amp;#39;, &amp;#39;Fie&amp;#39;, &amp;#39;Foe&amp;#39;, &amp;#39;Flop&amp;#39;) &amp;gt;&amp;gt;&amp;gt; t1 += t2 &amp;gt;&amp;gt;&amp;gt; t1 (&amp;#39;Fee&amp;#39;, &amp;#39;Fie&amp;#39;, &amp;#39;Foe&amp;#39;, &amp;#39;Flop&amp;#39;) 最初のt1と最後のt1は同じではない t1とt2が指す、もとのタプルから新しいタプルを作り、t1という名前を与えている 新しい値を指しているかどうかは、id()を使えばわかる &amp;gt;&amp;gt;&amp;gt; id(t1) 140401424604544 &amp;gt;&amp;gt;&amp;gt; t1 += t2 &amp;gt;&amp;gt;&amp;gt; id(t1) 140401424883200</description></item><item><title>【8.1.3】tupleの操作</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8.1.3tuple%E3%81%AE%E6%93%8D%E4%BD%9C/</link><pubDate>Sat, 05 Aug 2023 16:53:56 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8.1.3tuple%E3%81%AE%E6%93%8D%E4%BD%9C/</guid><description> +による連結が可能 &amp;gt;&amp;gt;&amp;gt; (&amp;#39;Groucho&amp;#39;,) + (&amp;#39;Chico&amp;#39;, &amp;#39;Harpo&amp;#39;) (&amp;#39;Groucho&amp;#39;, &amp;#39;Chico&amp;#39;, &amp;#39;Harpo&amp;#39;) *による繰り返し &amp;gt;&amp;gt;&amp;gt; (&amp;#39;yada&amp;#39;,) * 3 (&amp;#39;yada&amp;#39;, &amp;#39;yada&amp;#39;, &amp;#39;yada&amp;#39;) タプルの比較 &amp;gt;&amp;gt;&amp;gt; a = (7, 2) &amp;gt;&amp;gt;&amp;gt; b = (7, 2, 9) &amp;gt;&amp;gt;&amp;gt; a == b False &amp;gt;&amp;gt;&amp;gt; a &amp;lt;= b True &amp;gt;&amp;gt;&amp;gt; a &amp;lt; b True forとinによる反復処理 &amp;gt;&amp;gt;&amp;gt; words = (&amp;#34;freash&amp;#34;, &amp;#34;out&amp;#34;, &amp;#34;of&amp;#34;, &amp;#34;ideas&amp;#34;) &amp;gt;&amp;gt;&amp;gt; for word in words: ... print(word) ... freash out of ideas</description></item><item><title>【8.1.2】tupleによる生成</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8.1.2tuple%E3%81%AB%E3%82%88%E3%82%8B%E7%94%9F%E6%88%90/</link><pubDate>Sat, 05 Aug 2023 16:50:35 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8.1.2tuple%E3%81%AB%E3%82%88%E3%82%8B%E7%94%9F%E6%88%90/</guid><description> tuple()関数を使えば、他のデータ型からもタプルを作れる &amp;gt;&amp;gt;&amp;gt; marx_list = [&amp;#39;Groucho&amp;#39;, &amp;#39;Chico&amp;#39;, &amp;#39;Harpo&amp;#39;] &amp;gt;&amp;gt;&amp;gt; tuple(marx_list) (&amp;#39;Groucho&amp;#39;, &amp;#39;Chico&amp;#39;, &amp;#39;Harpo&amp;#39;)</description></item><item><title>【8.1.1】タプルのアンパック</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8.1.1%E3%82%BF%E3%83%97%E3%83%AB%E3%81%AE%E3%82%A2%E3%83%B3%E3%83%91%E3%83%83%E3%82%AF/</link><pubDate>Sat, 05 Aug 2023 16:50:11 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8.1.1%E3%82%BF%E3%83%97%E3%83%AB%E3%81%AE%E3%82%A2%E3%83%B3%E3%83%91%E3%83%83%E3%82%AF/</guid><description> タプルは、一度に複数の変数に代入できる これをタプルのアンパックと呼ぶ これを使えば、一時変数を使わずに1つの文で値を交換できる &amp;gt;&amp;gt;&amp;gt; markx_tuple = (&amp;#39;Groucho&amp;#39;, &amp;#39;Chico&amp;#39;, &amp;#39;Harpo&amp;#39;) &amp;gt;&amp;gt;&amp;gt; a, b, c = markx_tuple &amp;gt;&amp;gt;&amp;gt; a &amp;#39;Groucho&amp;#39; &amp;gt;&amp;gt;&amp;gt; b &amp;#39;Chico&amp;#39; &amp;gt;&amp;gt;&amp;gt; c &amp;#39;Harpo&amp;#39; &amp;gt;&amp;gt;&amp;gt; password = &amp;#39;swordfish&amp;#39; &amp;gt;&amp;gt;&amp;gt; icecream = &amp;#39;tuttifrutti&amp;#39; &amp;gt;&amp;gt;&amp;gt; password, icecream = icecream, password &amp;gt;&amp;gt;&amp;gt; password &amp;#39;tuttifrutti&amp;#39; &amp;gt;&amp;gt;&amp;gt; icecream &amp;#39;swordfish&amp;#39;</description></item><item><title>【8.1】タプル</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8.1%E3%82%BF%E3%83%97%E3%83%AB/</link><pubDate>Sat, 05 Aug 2023 16:07:35 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8.1%E3%82%BF%E3%83%97%E3%83%AB/</guid><description> 発音
グイド・ヴァン・ロッサムは月水金にはトゥープル、火木土にはタプルと発音しているらしい 日曜日にはそんな話はしない カンマと()による作成
()を使って空のタプルが作成できる 1個以上の要素を持つタプル 個々の要素をカンマで区切る 要素が1個のタプルも末尾にカンマをつけて作る カッコで囲んでもよい カンマを忘れた場合、別のオブジェクトになってしまう 要素が複数ある場合、全ての要素の後ろにカンマをつける 最後の要素の後ろのカンマは省略可 Pythonでは、タプルをエコー表示（標準出力で表示）するときにカッコを追加する 定義では不要なことが多いが、カッコを使った方がわかりやすい カッコがないタプルを関数の引数として渡すものはできない &amp;gt;&amp;gt;&amp;gt; empty_tuple = () &amp;gt;&amp;gt;&amp;gt; empty_tuple () &amp;gt;&amp;gt;&amp;gt; one_markx = &amp;#39;Groucho&amp;#39;, &amp;gt;&amp;gt;&amp;gt; one_markx (&amp;#39;Groucho&amp;#39;,) &amp;gt;&amp;gt;&amp;gt; one_markx = (&amp;#39;Groucho&amp;#39;,) &amp;gt;&amp;gt;&amp;gt; one_markx (&amp;#39;Groucho&amp;#39;,) &amp;gt;&amp;gt;&amp;gt; one_markx = (&amp;#39;Groucho&amp;#39;) &amp;gt;&amp;gt;&amp;gt; one_markx &amp;#39;Groucho&amp;#39; &amp;gt;&amp;gt;&amp;gt; type(one_markx) &amp;lt;class &amp;#39;str&amp;#39;&amp;gt; &amp;gt;&amp;gt;&amp;gt; markx_tuple = (&amp;#39;Groucho&amp;#39;, &amp;#39;Chico&amp;#39;, &amp;#39;Harpo&amp;#39;) &amp;gt;&amp;gt;&amp;gt; markx_tuple (&amp;#39;Groucho&amp;#39;, &amp;#39;Chico&amp;#39;, &amp;#39;Harpo&amp;#39;) &amp;gt;&amp;gt;&amp;gt; one_marx = &amp;#39;Groucho&amp;#39;, &amp;gt;&amp;gt;&amp;gt; type(one_marx) &amp;lt;class &amp;#39;tuple&amp;#39;&amp;gt; &amp;gt;&amp;gt;&amp;gt; type(&amp;#39;Groucho&amp;#39;,) &amp;lt;class &amp;#39;str&amp;#39;&amp;gt; &amp;gt;&amp;gt;&amp;gt; type((&amp;#39;Groucho&amp;#39;,)) &amp;lt;class &amp;#39;tuple&amp;#39;&amp;gt;</description></item><item><title>【7.3.1】シーケンスって何？</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/7.3.1%E3%82%B7%E3%83%BC%E3%82%B1%E3%83%B3%E3%82%B9%E3%81%A3%E3%81%A6%E4%BD%95/</link><pubDate>Sat, 05 Aug 2023 16:02:49 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/7.3.1%E3%82%B7%E3%83%BC%E3%82%B1%E3%83%B3%E3%82%B9%E3%81%A3%E3%81%A6%E4%BD%95/</guid><description> 順番に並んだひと続きのデータや手順のこと またはそのデータを取り扱う方式</description></item><item><title>【8】タプルとリスト</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8%E3%82%BF%E3%83%97%E3%83%AB%E3%81%A8%E3%83%AA%E3%82%B9%E3%83%88/</link><pubDate>Sat, 05 Aug 2023 16:00:41 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/8%E3%82%BF%E3%83%97%E3%83%AB%E3%81%A8%E3%83%AA%E3%82%B9%E3%83%88/</guid><description> 基本データ型は原子 ブール値、整数、浮動小数点、文字列 タプルとリストは分子のようなもの ほとんどのプログラミング言語では、ひとまとまりのデータに対して、要素のシーケンスを作ることができる インデックスで開始から末尾まで取り出しできる タプルとリストという2種類のシーケンス構造 0個以上の要素を持つことができる 要素は型が異なっていてもよい 個々の要素は任意のPythonオブジェクトでよい ほんまか？ ほんまや&amp;hellip; &amp;gt;&amp;gt;&amp;gt; list.append(2) &amp;gt;&amp;gt;&amp;gt; list.append(&amp;#34;3&amp;#34;) &amp;gt;&amp;gt;&amp;gt; print(list) [2, &amp;#39;3&amp;#39;] リストとタプルで2つある理由 タプルはイミュータブル 要素は書き換えられない リストはミュータブル 要素の挿入と削除を行うことができる</description></item><item><title>【7.3】rangeによる数値シーケンスの生成</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/7.3range%E3%81%AB%E3%82%88%E3%82%8B%E6%95%B0%E5%80%A4%E3%82%B7%E3%83%BC%E3%82%B1%E3%83%B3%E3%82%B9%E3%81%AE%E7%94%9F%E6%88%90/</link><pubDate>Sat, 05 Aug 2023 15:43:51 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/7.3range%E3%81%AB%E3%82%88%E3%82%8B%E6%95%B0%E5%80%A4%E3%82%B7%E3%83%BC%E3%82%B1%E3%83%B3%E3%82%B9%E3%81%AE%E7%94%9F%E6%88%90/</guid><description>range()関数を使うことで、指定した範囲の数値のシーケンスを返すことができる
あらかじめリストやタプルなどの大きなデータ構造を作って、そこに値を格納する必要もない range(start, stop, step)のように、スライスとよく似た形式で使う 指定しない場合、startはゼロから stopは唯一必須 -1を指定することで、stopを逆順にできる zip()と同様に、range()はイテラブルなオブジェクトを返す for ... inで反復処理する リストなどのシーケンスに変換する &amp;gt;&amp;gt;&amp;gt; for x in range (0, 3): ... print(x) ... 0 1 2 &amp;gt;&amp;gt;&amp;gt; list(range(0, 3)) [0, 1, 2] &amp;gt;&amp;gt;&amp;gt; for x in range(2, -1, -1): ... print(x) ... 2 1 0 &amp;gt;&amp;gt;&amp;gt; list(range(2, -1, -1)) [2, 1, 0] &amp;gt;&amp;gt;&amp;gt; list(range(0, 11, 2)) [0, 2, 4, 6, 8, 10]</description></item><item><title>【7.2】breakによる中断</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/7.2break%E3%81%AB%E3%82%88%E3%82%8B%E4%B8%AD%E6%96%AD/</link><pubDate>Sat, 05 Aug 2023 15:40:59 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/7.2break%E3%81%AB%E3%82%88%E3%82%8B%E4%B8%AD%E6%96%AD/</guid><description>whileループでもfor文と同様に、breakを使うことでループを中断できる
&amp;gt;&amp;gt;&amp;gt; word = &amp;#39;thud&amp;#39; &amp;gt;&amp;gt;&amp;gt; for letter in word: ... if letter == &amp;#39;u&amp;#39;: ... break ... print(letter) ... t h continueとかelseによるbreakのチェックも使えるよ♡</description></item><item><title>【7.1】イテレータとは</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/7.1%E3%82%A4%E3%83%86%E3%83%AC%E3%83%BC%E3%82%BF%E3%81%A8%E3%81%AF/</link><pubDate>Sat, 05 Aug 2023 15:38:25 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/7.1%E3%82%A4%E3%83%86%E3%83%AC%E3%83%BC%E3%82%BF%E3%81%A8%E3%81%AF/</guid><description> イテレータ イテレーションごとにリスト、辞書などから要素を1つずつ取り出して返すもの イテレータを使う理由 データ構造がどれくらいのサイズなのか、どのように実装されているのかを知らなくても、データ構造の各要素を反復できるから その場で作ったデータを受け付けることもできるため、メモリに収まり切らないようなデータストリームも処理できる</description></item><item><title>【7】forとinによる反復処理</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/7for%E3%81%A8in%E3%81%AB%E3%82%88%E3%82%8B%E5%8F%8D%E5%BE%A9%E5%87%A6%E7%90%86/</link><pubDate>Sat, 05 Aug 2023 15:35:25 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/7for%E3%81%A8in%E3%81%AB%E3%82%88%E3%82%8B%E5%8F%8D%E5%BE%A9%E5%87%A6%E7%90%86/</guid><description>Pythonはイテレータを頻繁に使う とりあえず文字列をループで処理してみる
&amp;gt;&amp;gt;&amp;gt; word = &amp;#39;thud&amp;#39; &amp;gt;&amp;gt;&amp;gt; offset = 0 &amp;gt;&amp;gt;&amp;gt; while offset &amp;lt; len(word): ... print(word[offset]) ... offset += 1 ... t h u d よりパイソニックなコード
&amp;gt;&amp;gt;&amp;gt; for letter in word: ... print(letter) ... t h u d</description></item><item><title>【6.3】elseによるbreakのチェック</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/6.3else%E3%81%AB%E3%82%88%E3%82%8Bbreak%E3%81%AE%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF/</link><pubDate>Sat, 05 Aug 2023 15:29:54 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/6.3else%E3%81%AB%E3%82%88%E3%82%8Bbreak%E3%81%AE%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF/</guid><description>whileループの後にelseを書いた場合
whileループが正常終了したら、制御がオプションのelseに渡される whileループの中で何かを探したが、それが見つからなかったときなどに使う &amp;gt;&amp;gt;&amp;gt; numbers = [1, 3, 5] &amp;gt;&amp;gt;&amp;gt; position = 0 &amp;gt;&amp;gt;&amp;gt; while position &amp;lt; len(numbers): ... number = numbers[position] ... if number % 2 == 0: ... print(&amp;#39;Found even number&amp;#39;, number) ... break ... position += 1 ... else: ... print(&amp;#34;No even number found&amp;#34;) ... No even number found</description></item><item><title>【6.2】continueによる次のイテレーションの開始</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/6.2continue%E3%81%AB%E3%82%88%E3%82%8B%E6%AC%A1%E3%81%AE%E3%82%A4%E3%83%86%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E9%96%8B%E5%A7%8B/</link><pubDate>Sat, 05 Aug 2023 15:26:27 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/6.2continue%E3%81%AB%E3%82%88%E3%82%8B%E6%AC%A1%E3%81%AE%E3%82%A4%E3%83%86%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E9%96%8B%E5%A7%8B/</guid><description>ループを抜けるのではなく、次のイテレーションを直ちに始めたいという場合
continue文を使う &amp;gt;&amp;gt;&amp;gt; while True: ... value = input(&amp;#34;Integer, please [q to quit]: &amp;#34;) ... if value == &amp;#39;q&amp;#39;: ... break ... number = int(value) ... if number % 2 == 0: ... continue ... print(number, &amp;#34;squared is&amp;#34;, number * number) ... Integer, please [q to quit]: 1 1 squared is 1 Integer, please [q to quit]: 2 Integer, please [q to quit]: 3 3 squared is 9 Integer, please [q to quit]: 4 Integer, please [q to quit]: 5 5 squared is 25 Integer, please [q to quit]: 6 Integer, please [q to quit]: 7 7 squared is 49 Integer, please [q to quit]:</description></item><item><title>【6.1】breakによるループの中断</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/6.1break%E3%81%AB%E3%82%88%E3%82%8B%E3%83%AB%E3%83%BC%E3%83%97%E3%81%AE%E4%B8%AD%E6%96%AD/</link><pubDate>Sat, 05 Aug 2023 15:22:30 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/6.1break%E3%81%AB%E3%82%88%E3%82%8B%E3%83%AB%E3%83%BC%E3%83%97%E3%81%AE%E4%B8%AD%E6%96%AD/</guid><description>何かが起こるまでループを続けたいが、それがいつになるかわからない時
break文を持つ無限ループが使える &amp;gt;&amp;gt;&amp;gt; while True: ... stuff = input(&amp;#34;String to capitalize [type q to quit]: &amp;#34;) ... if stuff == &amp;#34;q&amp;#34;: ... break ... print(stuff.capitalize()) ... String to capitalize [type q to quit]: test Test String to capitalize [type q to quit]: hey, it works Hey, it works String to capitalize [type q to quit]: q</description></item><item><title>【6】whileによるループ</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/6while%E3%81%AB%E3%82%88%E3%82%8B%E3%83%AB%E3%83%BC%E3%83%97/</link><pubDate>Sat, 05 Aug 2023 15:19:28 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/6while%E3%81%AB%E3%82%88%E3%82%8B%E3%83%AB%E3%83%BC%E3%83%97/</guid><description> whileによる反復処理 &amp;gt;&amp;gt;&amp;gt; count = 1 &amp;gt;&amp;gt;&amp;gt; while count &amp;lt;= 5: ... print(count) ... count += 1 ... 1 2 3 4 5</description></item><item><title>【5.8.3】f文字列</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/5.8.3f%E6%96%87%E5%AD%97%E5%88%97/</link><pubDate>Sat, 05 Aug 2023 02:38:37 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/5.8.3f%E6%96%87%E5%AD%97%E5%88%97/</guid><description>先頭のクォートの前にfかFを入れる 波括弧で変数名か式を囲み、その値を文字列に差し込む 式も入れられる &amp;gt;&amp;gt;&amp;gt; thing = &amp;#39;wereduck&amp;#39; &amp;gt;&amp;gt;&amp;gt; place = &amp;#39;werepond&amp;#39; &amp;gt;&amp;gt;&amp;gt; f&amp;#39;The {thing} is in the {place}&amp;#39; &amp;#39;The wereduck is in the werepond&amp;#39; &amp;gt;&amp;gt;&amp;gt; f&amp;#39;The {thing.capitalize()} is in the {place.rjust(20)}&amp;#39; &amp;#39;The Wereduck is in the werepond&amp;#39; &amp;gt;&amp;gt;&amp;gt; f&amp;#39;The {thing:&amp;gt;20} is in the {place:.^20}&amp;#39; &amp;#39;The wereduck is in the ......werepond......&amp;#39; &amp;gt;&amp;gt;&amp;gt; f&amp;#39;The {thing =} is in the {place =}&amp;#39; &amp;#34;The thing =&amp;#39;wereduck&amp;#39; is in the place =&amp;#39;werepond&amp;#39;&amp;#34; &amp;gt;&amp;gt;&amp;gt; f&amp;#39;The {thing[-4:] =} is in the {place.</description></item><item><title>【5.8.2】新しいスタイルのフォーマット</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/5.8.2%E6%96%B0%E3%81%97%E3%81%84%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB%E3%81%AE%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%83%E3%83%88/</link><pubDate>Sat, 05 Aug 2023 02:28:13 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/5.8.2%E6%96%B0%E3%81%97%E3%81%84%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB%E3%81%AE%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%83%E3%83%88/</guid><description>format_string.format(data)という形式になっている
&amp;gt;&amp;gt;&amp;gt; thing = &amp;#39;woodchuck&amp;#39; &amp;gt;&amp;gt;&amp;gt; &amp;#39;{}&amp;#39;.format(thing) &amp;#39;woodchuck&amp;#39; &amp;gt;&amp;gt;&amp;gt; place = &amp;#39;lake&amp;#39; &amp;gt;&amp;gt;&amp;gt; &amp;#39;The {} is in the {}.&amp;#39;.format(thing, place) &amp;#39;The woodchuck is in the lake.&amp;#39; &amp;gt;&amp;gt;&amp;gt; &amp;#39;The {1} is in the {0}.&amp;#39;.format(thing, place) &amp;#39;The lake is in the woodchuck.&amp;#39; &amp;gt;&amp;gt;&amp;gt; &amp;#39;The {thing} is in the {place}.&amp;#39;.format(thing=&amp;#39;duck&amp;#39;, place=&amp;#39;buthtub&amp;#39;) &amp;#39;The duck is in the buthtub.&amp;#39; &amp;gt;&amp;gt;&amp;gt; d = {&amp;#39;thing&amp;#39;: &amp;#39;duck&amp;#39;, &amp;#39;place&amp;#39;: &amp;#39;bathtub&amp;#39;} &amp;gt;&amp;gt;&amp;gt; &amp;#39;The {0[thing]} is in the {0[place]}&amp;#39;.format(d) &amp;#39;The duck is in the bathtub&amp;#39; デフォルト以外のフォーマットで使用できる書式指定文字列</description></item><item><title>【5.8.1】古いスタイルのフォーマット</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/5.8.1%E5%8F%A4%E3%81%84%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB%E3%81%AE%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%83%E3%83%88/</link><pubDate>Sat, 05 Aug 2023 02:02:19 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/5.8.1%E5%8F%A4%E3%81%84%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB%E3%81%AE%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%83%E3%83%88/</guid><description>formatstring % data という形式を使う
%s: 文字列 %d: 10進整数 %x: 16進整数 %o: 8進整数 %f: 10進浮動小数点数 %e: 指数形式浮動小数点数 %g: 10進または指数形式浮動小数点数 %%: リテラルの% 複数のデータを置くときには、データをタプルにまとめる
&amp;gt;&amp;gt;&amp;gt; &amp;#34;Our cat %s weights %s pounds&amp;#34; % (cat, weight) &amp;#39;Our cat Chester weights 28 pounds&amp;#39; %と型指定子の間の書式指定文字列には、以下のものを指定する別の値を入れることができる
幅の下限
文字数の上限
配置
指定できる値
先頭の%文字 オプションの配置文字:指定なしか、+なら右揃え、-なら左揃え オプションのフィールド幅の下限 オプションの幅下限と文字数上限を区切る. オプションの文字列の上限 変換型がfなら精度 上の表に囲まれている変換型 &amp;gt;&amp;gt;&amp;gt; thing = &amp;#39;woodchuck&amp;#39; &amp;gt;&amp;gt;&amp;gt; &amp;#39;%s&amp;#39; % thing &amp;#39;woodchuck&amp;#39; &amp;gt;&amp;gt;&amp;gt; &amp;#39;%12s&amp;#39; % thing &amp;#39; woodchuck&amp;#39; &amp;gt;&amp;gt;&amp;gt; &amp;#39;%+12s&amp;#39; % thing &amp;#39; woodchuck&amp;#39; &amp;gt;&amp;gt;&amp;gt; &amp;#39;%-12s&amp;#39; % thing &amp;#39;woodchuck &amp;#39; &amp;gt;&amp;gt;&amp;gt; &amp;#39;%.</description></item><item><title>【5.8】文字列のフォーマット</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/5.8%E6%96%87%E5%AD%97%E5%88%97%E3%81%AE%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%83%E3%83%88/</link><pubDate>Sat, 05 Aug 2023 02:01:06 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/5.8%E6%96%87%E5%AD%97%E5%88%97%E3%81%AE%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%83%E3%83%88/</guid><description>文字列にさまざまなフォーマットでデータを差し込むには、次の3つの方法がある
古いスタイル(Python 2.3 ~) 新しいスタイル(Python 2.6 ~) f文字列(Python 3.6 ~)</description></item><item><title>【5.7】文字列の配置</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/5.7%E6%96%87%E5%AD%97%E5%88%97%E3%81%AE%E9%85%8D%E7%BD%AE/</link><pubDate>Sat, 05 Aug 2023 01:59:36 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/5.7%E6%96%87%E5%AD%97%E5%88%97%E3%81%AE%E9%85%8D%E7%BD%AE/</guid><description> 文字列のレイアウトを操作する 指定した幅（30文字）の中で、文字列をどのように配置するのか決定する str.center(30) str.ljust(30) str.rjust(30)</description></item><item><title>【5.6.8】大文字と小文字</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/5.6.8%E5%A4%A7%E6%96%87%E5%AD%97%E3%81%A8%E5%B0%8F%E6%96%87%E5%AD%97/</link><pubDate>Sat, 05 Aug 2023 01:56:31 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/5.6.8%E5%A4%A7%E6%96%87%E5%AD%97%E3%81%A8%E5%B0%8F%E6%96%87%E5%AD%97/</guid><description> 文字列の先頭単語の先頭文字を大文字にする str.capitalize() 全ての単語の先頭文字を大文字にする str.title() 全ての文字を大文字にする str.upper() 全ての文字を小文字にする str.lower() 大文字小文字を逆にする str.swapcase()</description></item><item><title>【5.6.7】文字列の探索と選択</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/5.6.7%E6%96%87%E5%AD%97%E5%88%97%E3%81%AE%E6%8E%A2%E7%B4%A2%E3%81%A8%E9%81%B8%E6%8A%9E/</link><pubDate>Sat, 05 Aug 2023 01:50:34 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/5.6.7%E6%96%87%E5%AD%97%E5%88%97%E3%81%AE%E6%8E%A2%E7%B4%A2%E3%81%A8%E9%81%B8%E6%8A%9E/</guid><description>strという変数に紐づけられた長い文字列があるとする
先頭の13文字を取り出す
str[:13] 字数を数える（スペースや改行も含む）
len(str) 先頭がAllの3文字になっているか
str.stratswith('All') 末尾がThat*s all, folks!になっているか
str.endwith('That\'s all, folks!') 部分文字列のオフセットを探すメソッド
find() 先頭から探す 見つからない場合は-1が帰る index() 末尾から探す 見つからない場合は例外を投げる theという文字列が何個ついているか探す
str.count(&amp;quot;the&amp;quot;) 文字列が英数字だけか判定する
str.isalnum()</description></item><item><title>【5.6.6】stripによる文字列の除去</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/5.6.6strip%E3%81%AB%E3%82%88%E3%82%8B%E6%96%87%E5%AD%97%E5%88%97%E3%81%AE%E9%99%A4%E5%8E%BB/</link><pubDate>Sat, 05 Aug 2023 01:46:09 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/5.6.6strip%E3%81%AB%E3%82%88%E3%82%8B%E6%96%87%E5%AD%97%E5%88%97%E3%81%AE%E9%99%A4%E5%8E%BB/</guid><description>文字列の先頭や末尾のパディング文字（特にスペース）を取り除きたい場合、strip()を使う
引数が指定されていない場合、空白文字( , \t, \n)を取り除く rstrip()は右（末尾）、lstrip()は左（先頭）だけを取り除く stripで役に立つ文字列の例
string.whitespace string.punctuation</description></item><item><title>基本的に電子書籍を買う</title><link>https://dddsuz2.github.io/suzmemo/%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AB%E9%9B%BB%E5%AD%90%E6%9B%B8%E7%B1%8D%E3%82%92%E8%B2%B7%E3%81%86/</link><pubDate>Sat, 05 Aug 2023 00:19:11 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AB%E9%9B%BB%E5%AD%90%E6%9B%B8%E7%B1%8D%E3%82%92%E8%B2%B7%E3%81%86/</guid><description> suzmemoにメモを取りながら読むので、電子の方が明らかに読書体験が良い ブックスタンドを買ってみたが、分厚い本には微妙 というか、本が傷まないか気になってしまい、読むどころじゃない感もある 電子書籍になっていない本も多いのでどうしよう というか、図書館ヘビーユーザーなので、読む本はどうしても物理本が多い 裁断せずにスキャンできるやつ買えば良くね？ 10万ぐらいするわどうしよう 図書館の本をスキャンするのは法律的にどうなんだ問題 調べると、私的利用の範囲なら問題ないらしい 【参考】図書館で本を借りて自炊でPDF化したら違法になる？</description></item><item><title>【5.6.5】replaceによる置き換え</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/5.6.5replace%E3%81%AB%E3%82%88%E3%82%8B%E7%BD%AE%E3%81%8D%E6%8F%9B%E3%81%88/</link><pubDate>Fri, 04 Aug 2023 23:56:11 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/5.6.5replace%E3%81%AB%E3%82%88%E3%82%8B%E7%BD%AE%E3%81%8D%E6%8F%9B%E3%81%88/</guid><description>replace()を使えば、文字列の一部を置き換えできる
&amp;gt;&amp;gt;&amp;gt; setup = &amp;#34;a duck goes into a bar..&amp;#34; &amp;gt;&amp;gt;&amp;gt; setup.replace(&amp;#39;duck&amp;#39;, &amp;#39;marmoset&amp;#39;) &amp;#39;a marmoset goes into a bar..&amp;#39; &amp;gt;&amp;gt;&amp;gt; setup &amp;#39;a duck goes into a bar..&amp;#39; 第3引数で文字列を置き換えする回数を指定できる setup.replace(&amp;#39;a &amp;#39;, &amp;#39;a famous &amp;#39;, 100) 注意点 上の例で、aの後にスペースをつけずにaという1文字の文字列を置き返してしまうと、他の単語に含まれるaも置き換わってしまう 条件を詳しく指定する場合には、正規表現を使う</description></item><item><title>【5.6.4】joinによる結合</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/5.6.4join%E3%81%AB%E3%82%88%E3%82%8B%E7%B5%90%E5%90%88/</link><pubDate>Fri, 04 Aug 2023 01:50:43 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/5.6.4join%E3%81%AB%E3%82%88%E3%82%8B%E7%B5%90%E5%90%88/</guid><description>join()関数で、文字列のリストを1つの文字列に結合できる
string.join(文字列のリスト) 糊として挟む文字列を指定してから、結合する文字列のリストを指定する</description></item><item><title>【5.6.3】splitによる分割</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/5.6.3split%E3%81%AB%E3%82%88%E3%82%8B%E5%88%86%E5%89%B2/</link><pubDate>Fri, 04 Aug 2023 01:47:13 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/5.6.3split%E3%81%AB%E3%82%88%E3%82%8B%E5%88%86%E5%89%B2/</guid><description>split()をつかうことで、文字列をセパレータに基づいて、部分文字列のリストを作ることができる
セパレータを指定しない場合、空白文字列を使用する &amp;gt;&amp;gt;&amp;gt; str = &amp;#34;awdadadan,,2e3rwho, saaasdddddddddddddko&amp;#34; &amp;gt;&amp;gt;&amp;gt; str.split(&amp;#39;,&amp;#39;) [&amp;#39;awdadadan&amp;#39;, &amp;#39;&amp;#39;, &amp;#39;2e3rwho&amp;#39;, &amp;#39; saaasdddddddddddddko&amp;#39;]</description></item><item><title>【5.6.2】lenによる長さの取得</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/5.6.2len%E3%81%AB%E3%82%88%E3%82%8B%E9%95%B7%E3%81%95%E3%81%AE%E5%8F%96%E5%BE%97/</link><pubDate>Fri, 04 Aug 2023 01:44:41 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/5.6.2len%E3%81%AB%E3%82%88%E3%82%8B%E9%95%B7%E3%81%95%E3%81%AE%E5%8F%96%E5%BE%97/</guid><description>len()関数で、文字列内の文字数を数えることができる
シーケンス型なら文字列以外にも使用できる</description></item><item><title>【5.6.1】スライス</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/5.6.1%E3%82%B9%E3%83%A9%E3%82%A4%E3%82%B9/</link><pubDate>Fri, 04 Aug 2023 01:36:29 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/5.6.1%E3%82%B9%E3%83%A9%E3%82%A4%E3%82%B9/</guid><description>スライス
文字列から部分文字列を取り出すことができる
角括弧と先頭オフセット(start), 末尾オフセット(end), ステップ(step)で定義する
[:]
先頭から末尾までのシーケンス全体を抽出する [start:]
startオフセットから末尾までのシーケンスを抽出する [:end]
先頭からend - 1オフセットまでのシーケンスを抽出する [start:end]
startオフセットからend-1オフセットまでのシーケンスを抽出する [start:end:step]
step文字ごとにstartオフセットからend-1オフセットまでのシーケンスを抽出する リストなどを逆順に出力するテクニック
list[::-1] reverse関数でも同じようなことができるが、値を返さない</description></item><item><title>【5.6】文字列の変更</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/5.6%E6%96%87%E5%AD%97%E5%88%97%E3%81%AE%E5%A4%89%E6%9B%B4/</link><pubDate>Fri, 04 Aug 2023 01:33:25 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/5.6%E6%96%87%E5%AD%97%E5%88%97%E3%81%AE%E5%A4%89%E6%9B%B4/</guid><description>Pythonでは文字列はイミュータブル
文字列を変更するためには、replace()かまたはスライスを使う</description></item><item><title>【5.5】[]による文字の抽出</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/5.5%E3%81%AB%E3%82%88%E3%82%8B%E6%96%87%E5%AD%97%E3%81%AE%E6%8A%BD%E5%87%BA/</link><pubDate>Fri, 04 Aug 2023 01:28:23 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/5.5%E3%81%AB%E3%82%88%E3%82%8B%E6%96%87%E5%AD%97%E3%81%AE%E6%8A%BD%E5%87%BA/</guid><description>文字列の中の1つの文字を取り出したいとき、文字列変数名の後ろに[]とオフセットを添える
最も左の文字のオフセットが0から始まる 末尾のオフセットは-1からはじまり、-2, -3 となるごとに左にうつっていく</description></item><item><title>【5.4】*による繰り返し</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/5.4%E3%81%AB%E3%82%88%E3%82%8B%E7%B9%B0%E3%82%8A%E8%BF%94%E3%81%97/</link><pubDate>Fri, 04 Aug 2023 01:27:41 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/5.4%E3%81%AB%E3%82%88%E3%82%8B%E7%B9%B0%E3%82%8A%E8%BF%94%E3%81%97/</guid><description>*演算子を使うと、文字列を繰り返すことができる</description></item><item><title>【5.3】+による文字列の連結</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/5.3+%E3%81%AB%E3%82%88%E3%82%8B%E6%96%87%E5%AD%97%E5%88%97%E3%81%AE%E9%80%A3%E7%B5%90/</link><pubDate>Fri, 04 Aug 2023 01:23:57 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/5.3+%E3%81%AB%E3%82%88%E3%82%8B%E6%96%87%E5%AD%97%E5%88%97%E3%81%AE%E9%80%A3%E7%B5%90/</guid><description>+演算子を使うことで、リテラル文字列、文字列変数を連結できる
リテラル文字列のみの場合、順に並べるだけでも連結できる 文字列の連結を行う場合、Pythonはスペースを挿入しない print()の引数として文字列を指定した場合、スペースを挿入する</description></item><item><title>【5.2】\によるエスケープ</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/5.2%E3%81%AB%E3%82%88%E3%82%8B%E3%82%A8%E3%82%B9%E3%82%B1%E3%83%BC%E3%83%97/</link><pubDate>Fri, 04 Aug 2023 01:19:53 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/5.2%E3%81%AB%E3%82%88%E3%82%8B%E3%82%A8%E3%82%B9%E3%82%B1%E3%83%BC%E3%83%97/</guid><description> 特定の文字の前にバックスラッシュを入れると、特別な意味になる \n とか シングルクォート、ダブルクォートをリテラルとして使いたい場合、直前に\をつける じゃあ\をリテラルとして使いたい場合は？ \\ raw文字列ではエスケープは使えない</description></item><item><title>【5.1】strによる文字列の作成</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/5.1str%E3%81%AB%E3%82%88%E3%82%8B%E6%96%87%E5%AD%97%E5%88%97%E3%81%AE%E4%BD%9C%E6%88%90/</link><pubDate>Fri, 04 Aug 2023 01:18:04 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/5.1str%E3%81%AB%E3%82%88%E3%82%8B%E6%96%87%E5%AD%97%E5%88%97%E3%81%AE%E4%BD%9C%E6%88%90/</guid><description> str()によるほかのデータ型の文字列への変換 str(98.6) とか</description></item><item><title>【5】文字列</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/5.0%E6%96%87%E5%AD%97%E5%88%97/</link><pubDate>Fri, 04 Aug 2023 01:10:01 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/5.0%E6%96%87%E5%AD%97%E5%88%97/</guid><description>一般的なプログラミングでは、数字よりも文字列を使う機会の方が多い
他の言語と異なり、Pythonの文字列はイミュータブル
作成
シングルクォートかダブルクォートで囲む 先頭がrのraw文字列は、エスケープシーケンスがエスケープシーケンスとして解釈されないようにする 先頭がfのフォーマット文字列もある frみたいなこともできる トリプルクォートで複数行の文字列も作成できる print()は改行文字とクォートを取り除いて出力する</description></item><item><title>【4.5】セイウチ演算子</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/4.5%E3%82%BB%E3%82%A4%E3%82%A6%E3%83%81%E6%BC%94%E7%AE%97%E5%AD%90/</link><pubDate>Fri, 04 Aug 2023 01:07:28 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/4.5%E3%82%BB%E3%82%A4%E3%82%A6%E3%83%81%E6%BC%94%E7%AE%97%E5%AD%90/</guid><description>代入演算子のことをセイウチ演算子という
&amp;gt;&amp;gt;&amp;gt; tweet_limit = 280 &amp;gt;&amp;gt;&amp;gt; tweet_string = &amp;#34;Blah&amp;#34; * 50 &amp;gt;&amp;gt;&amp;gt; if (diff := tweet_limit - len(tweet_string)) &amp;gt;= 0: print(&amp;#34;A fitting tweet&amp;#34;) else: print(&amp;#34;Went Over by&amp;#34;, abs(diff))</description></item><item><title>【4.4】所属関係を調べるにはinを使う</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/4.4%E6%89%80%E5%B1%9E%E9%96%A2%E4%BF%82%E3%82%92%E8%AA%BF%E3%81%B9%E3%82%8B%E3%81%AB%E3%81%AFin%E3%82%92%E4%BD%BF%E3%81%86/</link><pubDate>Fri, 04 Aug 2023 01:04:13 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/4.4%E6%89%80%E5%B1%9E%E9%96%A2%E4%BF%82%E3%82%92%E8%AA%BF%E3%81%B9%E3%82%8B%E3%81%AB%E3%81%AFin%E3%82%92%E4%BD%BF%E3%81%86/</guid><description>所属関係を調べるにはPythonのin演算子を使う
&amp;gt;&amp;gt;&amp;gt; vowels = &amp;#39;aeiou&amp;#39; &amp;gt;&amp;gt;&amp;gt; letter = &amp;#39;o&amp;#39; &amp;gt;&amp;gt;&amp;gt; letter in vowels True 辞書の場合、inはバリューではなくキーを使う</description></item><item><title>【4.3】Falseとして扱われるもの</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/4.3false%E3%81%A8%E3%81%97%E3%81%A6%E6%89%B1%E3%82%8F%E3%82%8C%E3%82%8B%E3%82%82%E3%81%AE/</link><pubDate>Fri, 04 Aug 2023 01:01:17 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/4.3false%E3%81%A8%E3%81%97%E3%81%A6%E6%89%B1%E3%82%8F%E3%82%8C%E3%82%8B%E3%82%82%E3%81%AE/</guid><description>以下のものはFalseとして扱われる
ブール値: False 値の非存在: None 整数のゼロ: 0 浮動小数点数のゼロ: 0.0 空文字列: '' 空リスト: [] 空タプル: () 空辞書: {} 空集合: set()</description></item><item><title>【4.2】\による行の継続</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/4.2%E3%81%AB%E3%82%88%E3%82%8B%E8%A1%8C%E3%81%AE%E7%B6%99%E7%B6%9A/</link><pubDate>Thu, 03 Aug 2023 23:50:06 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/4.2%E3%81%AB%E3%82%88%E3%82%8B%E8%A1%8C%E3%81%AE%E7%B6%99%E7%B6%9A/</guid><description>行末に\をおくと、Pythonはまだ改行していないと認識する</description></item><item><title>【4.1】#によるコメント</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/4.1%E3%81%AB%E3%82%88%E3%82%8B%E3%82%B3%E3%83%A1%E3%83%B3%E3%83%88/</link><pubDate>Thu, 03 Aug 2023 23:48:37 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/4.1%E3%81%AB%E3%82%88%E3%82%8B%E3%82%B3%E3%83%A1%E3%83%B3%E3%83%88/</guid><description> 文頭に#をつけることで、その文はPythonインタプリタから無視される</description></item><item><title>【4】if文</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/4.0if%E6%96%87/</link><pubDate>Thu, 03 Aug 2023 23:46:38 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/4.0if%E6%96%87/</guid><description>グイド・ヴァン・ロッサムがPythonを設計していたとき、インデントがあればプログラムの構造を表現できると考えた
disaster = True if disaster: print(&amp;#34;Woe!&amp;#34;) else: print(&amp;#34;Whee!&amp;#34;) PEP8 では、インデントは4個のスペースを使っている 条件が3つ以上に分かれる場合は、elifを使う 論理演算子と比較演算子が使える 論理演算子は比較対象の要素よりも優先順位が低い</description></item><item><title>【3.4】浮動小数点数</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/3.4%E6%B5%AE%E5%8B%95%E5%B0%8F%E6%95%B0%E7%82%B9%E6%95%B0/</link><pubDate>Thu, 03 Aug 2023 23:43:08 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/3.4%E6%B5%AE%E5%8B%95%E5%B0%8F%E6%95%B0%E7%82%B9%E6%95%B0/</guid><description>小数点を持つ数を浮動小数点数という
eの後ろに10進数の桁数を入れることができる 【3.0】数値 float()を使えば、他のデータ型の値を浮動小数点数に変換できる</description></item><item><title>【3.2.2】int型の大きさ</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/3.2.2int%E5%9E%8B%E3%81%AE%E5%A4%A7%E3%81%8D%E3%81%95/</link><pubDate>Thu, 03 Aug 2023 23:40:35 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/3.2.2int%E5%9E%8B%E3%81%AE%E5%A4%A7%E3%81%8D%E3%81%95/</guid><description>Python2 32ビット
-2,147,483,648 から、2,147,483,647 21億4748万3647 Python3
intはlongに統合された 利用可能なメモリサイズの範囲内で任意のサイズを表現できる</description></item><item><title>【3.2.1】整数への型の変換</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/3.2.1%E6%95%B4%E6%95%B0%E3%81%B8%E3%81%AE%E5%9E%8B%E3%81%AE%E5%A4%89%E6%8F%9B/</link><pubDate>Thu, 03 Aug 2023 23:36:46 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/3.2.1%E6%95%B4%E6%95%B0%E3%81%B8%E3%81%AE%E5%9E%8B%E3%81%AE%E5%A4%89%E6%8F%9B/</guid><description>Pythonの整数以外へのデータ型を整数へ変換するには、int()関数を使う
浮動小数点は切り捨てられる 小数点や指数を含む文字列は処理しない _などのセパレータで区切られた数字の文字列も、整数型へ変換できる 10進数以外の基数をもつ整数型に変換する場合、引数として基数を指定する int(&amp;quot;10&amp;quot;, 2)</description></item><item><title>【3.3】基数</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/3.3%E5%9F%BA%E6%95%B0/</link><pubDate>Thu, 03 Aug 2023 23:32:41 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/3.3%E5%9F%BA%E6%95%B0/</guid><description>整数では、基数を指定しない限り、10進数として扱われる
0b: 2進数 0o: 8進数 0x: 16進数 逆に、10進数をほかの基数付き文字列に変換できる
bin(val): 2進数へ変換 oct(val): 8進数へ変換 hex(val): 16進数へ変換 chr(val): 整数を文字コードとして解釈して、対応する文字に変換する ord(val): chr(val)の逆</description></item><item><title>【3.2】整数</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/3.2%E6%95%B4%E6%95%B0/</link><pubDate>Thu, 03 Aug 2023 22:40:30 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/3.2%E6%95%B4%E6%95%B0/</guid><description> リテラル整数
Pythonでは、数字のシーケンスはリテラル整数となる 整数の先頭に、0x, 0o, 0xのどれかを置くことは可能 演算
+ - * / // % ** 割とよくあるやつが使える / は浮動小数点除算を行う 商と剰余をまとめて手に入れるには、divmodを使う (商、剰余)のタプルを返す 変数
リテラル整数と、整数オブジェクトが代入された変数を併用できる</description></item><item><title>【3.1】ブール値</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/3.1%E3%83%96%E3%83%BC%E3%83%AB%E5%80%A4/</link><pubDate>Thu, 03 Aug 2023 22:37:40 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/3.1%E3%83%96%E3%83%BC%E3%83%AB%E5%80%A4/</guid><description>Pythonにおけるブール値は以下の二つのみ
True False bool()関数で値をブール型に変換できる
&amp;gt;&amp;gt;&amp;gt; bool(22) True &amp;gt;&amp;gt;&amp;gt; bool(-43) True &amp;gt;&amp;gt;&amp;gt; bool(False) False &amp;gt;&amp;gt;&amp;gt; bool(0) False &amp;gt;&amp;gt;&amp;gt; bool(0.000) False</description></item><item><title>【3.0】数値</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/3.0%E6%95%B0%E5%80%A4/</link><pubDate>Thu, 03 Aug 2023 22:36:22 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/3.0%E6%95%B0%E5%80%A4/</guid><description> ブール値 整数 浮動小数点 10e8 &amp;mdash;-&amp;gt; 100000000.0</description></item><item><title>【2.4.4】2つの変数で同じオブジェクトの値を参照しており、片方の値を変更した場合</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/2.4.42%E3%81%A4%E3%81%AE%E5%A4%89%E6%95%B0%E3%81%A7%E5%90%8C%E3%81%98%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E5%80%A4%E3%82%92%E5%8F%82%E7%85%A7%E3%81%97%E3%81%A6%E3%81%8A%E3%82%8A%E7%89%87%E6%96%B9%E3%81%AE%E5%80%A4%E3%82%92%E5%A4%89%E6%9B%B4%E3%81%97%E3%81%9F%E5%A0%B4%E5%90%88/</link><pubDate>Thu, 03 Aug 2023 22:29:15 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/2.4.42%E3%81%A4%E3%81%AE%E5%A4%89%E6%95%B0%E3%81%A7%E5%90%8C%E3%81%98%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E5%80%A4%E3%82%92%E5%8F%82%E7%85%A7%E3%81%97%E3%81%A6%E3%81%8A%E3%82%8A%E7%89%87%E6%96%B9%E3%81%AE%E5%80%A4%E3%82%92%E5%A4%89%E6%9B%B4%E3%81%97%E3%81%9F%E5%A0%B4%E5%90%88/</guid><description> イミュータブルなオブジェクトの場合 &amp;gt;&amp;gt;&amp;gt; x = 5 &amp;gt;&amp;gt;&amp;gt; y = x &amp;gt;&amp;gt;&amp;gt; x = 29 &amp;gt;&amp;gt;&amp;gt; x 29 &amp;gt;&amp;gt;&amp;gt; y 5 ミュータブルなオブジェクトの場合 &amp;gt;&amp;gt;&amp;gt; x [1, 2, 3, 4] &amp;gt;&amp;gt;&amp;gt; y = x &amp;gt;&amp;gt;&amp;gt; y [1, 2, 3, 4] &amp;gt;&amp;gt;&amp;gt; x [1, 2, 3, 4] &amp;gt;&amp;gt;&amp;gt; x.append(5) &amp;gt;&amp;gt;&amp;gt; x [1, 2, 3, 4, 5] &amp;gt;&amp;gt;&amp;gt; y [1, 2, 3, 4, 5] リストの場合、x[0], x[1], x[2] 自体も名前のような機能をはたしている
それぞれが、1, 2, 3 を指している</description></item><item><title>【2.4.3】参照カウントが0になった場合</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/2.4.3%E5%8F%82%E7%85%A7%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88%E3%81%8C0%E3%81%AB%E3%81%AA%E3%81%A3%E3%81%9F%E5%A0%B4%E5%90%88/</link><pubDate>Thu, 03 Aug 2023 22:08:31 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/2.4.3%E5%8F%82%E7%85%A7%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88%E3%81%8C0%E3%81%AB%E3%81%AA%E3%81%A3%E3%81%9F%E5%A0%B4%E5%90%88/</guid><description>オブジェクトの参照カウントが0になった場合
そのオブジェクトを指す名前が一つもなくなっている ガベージコレクタによってオブジェクトのメモリが再利用される</description></item><item><title>【2.4.2】変数を宣言した時の流れ</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/2.4.2%E5%A4%89%E6%95%B0%E3%82%92%E5%AE%A3%E8%A8%80%E3%81%97%E3%81%9F%E6%99%82%E3%81%AE%E6%B5%81%E3%82%8C/</link><pubDate>Thu, 03 Aug 2023 22:00:13 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/2.4.2%E5%A4%89%E6%95%B0%E3%82%92%E5%AE%A3%E8%A8%80%E3%81%97%E3%81%9F%E6%99%82%E3%81%AE%E6%B5%81%E3%82%8C/</guid><description>&amp;gt;&amp;gt;&amp;gt; y = 5 &amp;gt;&amp;gt;&amp;gt; x = 12 - y &amp;gt;&amp;gt;&amp;gt; x 値5の整数オブジェクトが作られる 値5のオブジェクトを指す変数yが作られる 値5の参照カウントがインクリメントされる 値12のオブジェクトが別に作られる 値12のオブジェクトから変数yが指す値5のオブジェクトを引く 減算の結果得られた値7を新しい整数オブジェクトに代入した 変数xがこの値7の整数オブジェクトを指すようにした xが指す整数オブジェクトの参照カウントをインクリメントする xが指す整数オブジェクトの値をルックアップし、7が出力された</description></item><item><title>【2.4.1】変数の型を知りたい時</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/2.4.1%E5%A4%89%E6%95%B0%E3%81%AE%E5%9E%8B%E3%82%92%E7%9F%A5%E3%82%8A%E3%81%9F%E3%81%84%E6%99%82/</link><pubDate>Thu, 03 Aug 2023 21:58:09 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/2.4.1%E5%A4%89%E6%95%B0%E3%81%AE%E5%9E%8B%E3%82%92%E7%9F%A5%E3%82%8A%E3%81%9F%E3%81%84%E6%99%82/</guid><description>typeを使う
&amp;gt;&amp;gt;&amp;gt; type(7) &amp;lt;class &amp;#39;int&amp;#39;&amp;gt; &amp;gt;&amp;gt;&amp;gt; type(x) &amp;lt;class &amp;#39;list&amp;#39;&amp;gt; classとは、オブジェクトの定義である</description></item><item><title>【2.4】変数</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/2.4.%E5%A4%89%E6%95%B0/</link><pubDate>Thu, 03 Aug 2023 21:49:39 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/2.4.%E5%A4%89%E6%95%B0/</guid><description>変数とは何か？
使いたいメモリ上の値に名前をつけたもの Pythonにおける変数名の制約
使える文字 大文字、小文字の英字 数字 アンダースコア 予約語は使えない 予約語を確認する方法 help(&amp;quot;keywords) 代入
=をつかって変数に値を代入できる =の右辺に値がある場合、その変数は初期化済みと表現される 値が入っていない変数は未初期化変数と呼ばれる Pythonにおける変数
Pythonでは、変数はただの名前である
代入したからといって値がコピーされた新しい領域が確保されるわけではない ただの参照手段 これにより、型を指定しなくてもよくなっている 他のプログラミング言語の場合
変数自身が型を持ち、メモリ位置が固定されている 複数の名前への代入が可能
それはそう 同時に2つの名前へ代入するのも、ある名前へ代入してから、別の名前に代入するのも、やってること同じだと思います</description></item><item><title>【2.3】リテラル値</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/2.3%E3%83%AA%E3%83%86%E3%83%A9%E3%83%AB%E5%80%A4/</link><pubDate>Thu, 03 Aug 2023 21:48:19 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/2.3%E3%83%AA%E3%83%86%E3%83%A9%E3%83%AB%E5%80%A4/</guid><description>Pythonでは、次の二つの方法でデータの値を指定できる
リテラル値 変数</description></item><item><title>【2.2】ミュータビリティ</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/2.2%E3%83%9F%E3%83%A5%E3%83%BC%E3%82%BF%E3%83%93%E3%83%AA%E3%83%86%E3%82%A3/</link><pubDate>Thu, 03 Aug 2023 21:46:27 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/2.2%E3%83%9F%E3%83%A5%E3%83%BC%E3%82%BF%E3%83%93%E3%83%AA%E3%83%86%E3%82%A3/</guid><description>オブジェクトの値が変更できるかどうか
ミュータブル 変更できる イミュータブル 変更できない Pythonは強い型付き言語
値がミュータブルだろうと、型は変わらない</description></item><item><title>【6.5】相手に共感するには</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/6.5%E7%9B%B8%E6%89%8B%E3%81%AB%E5%85%B1%E6%84%9F%E3%81%99%E3%82%8B%E3%81%AB%E3%81%AF/</link><pubDate>Thu, 03 Aug 2023 20:42:34 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/6.5%E7%9B%B8%E6%89%8B%E3%81%AB%E5%85%B1%E6%84%9F%E3%81%99%E3%82%8B%E3%81%AB%E3%81%AF/</guid><description>感情を知るための二つのかぎ
ライフイベント デイリーハッスル 日常的な苛立ち 先回りして行動をおこしておくことが有効 相手の日常の所作を観察し、異常があれば先に動く、声をかける</description></item><item><title>【6.4】聞き上手になるには</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/6.4%E8%81%9E%E3%81%8D%E4%B8%8A%E6%89%8B%E3%81%AB%E3%81%AA%E3%82%8B%E3%81%AB%E3%81%AF/</link><pubDate>Thu, 03 Aug 2023 20:38:25 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/6.4%E8%81%9E%E3%81%8D%E4%B8%8A%E6%89%8B%E3%81%AB%E3%81%AA%E3%82%8B%E3%81%AB%E3%81%AF/</guid><description> 聞き上手 相手から話をドンドン引き出す 会話の主導権を握る なんちゃって聞き上手 聞くリアクションがうまいだけ</description></item><item><title>【6.3】本音を打ち明けてもらうには</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/6.3%E6%9C%AC%E9%9F%B3%E3%82%92%E6%89%93%E3%81%A1%E6%98%8E%E3%81%91%E3%81%A6%E3%82%82%E3%82%89%E3%81%86%E3%81%AB%E3%81%AF/</link><pubDate>Thu, 03 Aug 2023 20:37:24 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/6.3%E6%9C%AC%E9%9F%B3%E3%82%92%E6%89%93%E3%81%A1%E6%98%8E%E3%81%91%E3%81%A6%E3%82%82%E3%82%89%E3%81%86%E3%81%AB%E3%81%AF/</guid><description>相手の情報を調べ、会話に織り込む
点と点をつなげる話し方</description></item><item><title>【6.2】何でも話してもらえる3つの極意</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/6.2%E4%BD%95%E3%81%A7%E3%82%82%E8%A9%B1%E3%81%97%E3%81%A6%E3%82%82%E3%82%89%E3%81%88%E3%82%8B3%E3%81%A4%E3%81%AE%E6%A5%B5%E6%84%8F/</link><pubDate>Thu, 03 Aug 2023 20:26:07 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/6.2%E4%BD%95%E3%81%A7%E3%82%82%E8%A9%B1%E3%81%97%E3%81%A6%E3%82%82%E3%82%89%E3%81%88%E3%82%8B3%E3%81%A4%E3%81%AE%E6%A5%B5%E6%84%8F/</guid><description>あまり話してくれない人への対処法
「唯一無二のこと」を質問する 相手が答えやすい質問 答えが一つしかない質問 コンパクトな質問を心掛ける 20文字程度がいい 「3～5回」に分解した質問をする 同じテーマの質問を分解する</description></item><item><title>【6.1】必勝パターン2つ</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/6.1%E5%BF%85%E5%8B%9D%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B32%E3%81%A4/</link><pubDate>Thu, 03 Aug 2023 20:22:55 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/6.1%E5%BF%85%E5%8B%9D%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B32%E3%81%A4/</guid><description> 「冠婚葬祭」をスルーしない トン・トン・ターンでリアクションする 悲しい話も人は聞いて欲しがっている 静かにリアクションする こだわりのサインを見つけよう 注目すべきポイントは、「ひととの違い」</description></item><item><title>【6.0】相手が話したいモードになるスイッチを押す</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/6.0%E7%9B%B8%E6%89%8B%E3%81%8C%E8%A9%B1%E3%81%97%E3%81%9F%E3%81%84%E3%83%A2%E3%83%BC%E3%83%89%E3%81%AB%E3%81%AA%E3%82%8B%E3%82%B9%E3%82%A4%E3%83%83%E3%83%81%E3%82%92%E6%8A%BC%E3%81%99/</link><pubDate>Thu, 03 Aug 2023 20:19:40 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/6.0%E7%9B%B8%E6%89%8B%E3%81%8C%E8%A9%B1%E3%81%97%E3%81%9F%E3%81%84%E3%83%A2%E3%83%BC%E3%83%89%E3%81%AB%E3%81%AA%E3%82%8B%E3%82%B9%E3%82%A4%E3%83%83%E3%83%81%E3%82%92%E6%8A%BC%E3%81%99/</guid><description>話したいモードを押すタイミングとは？
相手が「気付いてくれ」「話したいことがあるんだ」とサインを送っている時 こちらが話してもいないことを、相手がそれとなく話始めた時 「ここだけの話」が出てくると、ダムは決壊したと見ていい これに反応しないと盛り下がってしまう</description></item><item><title>【3.1】terraformにおけるプロバイダとは？</title><link>https://dddsuz2.github.io/suzmemo/3.1terraform%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E3%83%97%E3%83%AD%E3%83%90%E3%82%A4%E3%83%80%E3%81%A8%E3%81%AF/</link><pubDate>Thu, 03 Aug 2023 18:39:51 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/3.1terraform%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E3%83%97%E3%83%AD%E3%83%90%E3%82%A4%E3%83%80%E3%81%A8%E3%81%AF/</guid><description>プロバイダとは
インフラを管理するリソース（AWSとかGCPとか、GithubとかDockerとか）と対話するためのプラグイン terraform において、その設定内で作成されるリソースの作成、更新、削除などの管理を担当する</description></item><item><title>【3.0】terraformにおいて、状態ファイルをS3に保存する</title><link>https://dddsuz2.github.io/suzmemo/3.0terraform%E3%81%AB%E3%81%8A%E3%81%84%E3%81%A6%E7%8A%B6%E6%85%8B%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92s3%E3%81%AB%E4%BF%9D%E5%AD%98%E3%81%99%E3%82%8B/</link><pubDate>Thu, 03 Aug 2023 18:14:01 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/3.0terraform%E3%81%AB%E3%81%8A%E3%81%84%E3%81%A6%E7%8A%B6%E6%85%8B%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92s3%E3%81%AB%E4%BF%9D%E5%AD%98%E3%81%99%E3%82%8B/</guid><description>terraform { backend &amp;#34;s3&amp;#34; { region = &amp;#34;region&amp;#34; bucket = &amp;#34;bucket_name&amp;#34; key = &amp;#34;wawawa.tfstate&amp;#34; encrypt = true } } required_version = &amp;#34;=1.x.x&amp;#34; required_providers { aws = { version = &amp;#34;4.x.x&amp;#34; } http = { version = &amp;#34;2.x.x&amp;#34; } } terraform において、.tfstate はデフォルトでローカルに保存される backend に s3 を指定して状態ファイルをS3に保存する key: S3バケット内での状態ファイルのパスまたは名前を指定する required_version: terraformのバージョンを指定する 複数人でterraformを実行して、.tfstateが更新されてコンフリクトを起こすのを防ぐため、DynamoDBによってロックをかけることができる dynamodb_table = 'テーブル名'</description></item><item><title>【2.1】terraformにおけるモジュールとは？</title><link>https://dddsuz2.github.io/suzmemo/2.1terraform%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%A8%E3%81%AF/</link><pubDate>Thu, 03 Aug 2023 17:54:18 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/2.1terraform%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%A8%E3%81%AF/</guid><description>Terraform Module とは？
複数のresourceブロックで構成されたファイル群(.tf)をテンプレート化したもの 別ディレクトリ、リモートにある.tfファイルを関数のように呼び出すことができる</description></item><item><title>【2.0】terraformにおける環境ごとのデプロイ</title><link>https://dddsuz2.github.io/suzmemo/2.0terraform%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E7%92%B0%E5%A2%83%E3%81%94%E3%81%A8%E3%81%AE%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4/</link><pubDate>Thu, 03 Aug 2023 17:53:47 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/2.0terraform%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E7%92%B0%E5%A2%83%E3%81%94%E3%81%A8%E3%81%AE%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4/</guid><description>それぞれの環境ごとに異なるリソースを管理したり、同じリソースでも異なるパラメータを使いたい場合 環境ごとに env/{$環境}フォルダを作る それらの下に、main.tf ファイルを作る [Terraform]Moduleを作ると環境毎のデプロイが便利</description></item><item><title>【1.0】最も簡単なパターンのcodebuildスクリプト</title><link>https://dddsuz2.github.io/suzmemo/1.0%E6%9C%80%E3%82%82%E7%B0%A1%E5%8D%98%E3%81%AA%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E3%81%AEcodebuild%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88/</link><pubDate>Thu, 03 Aug 2023 17:39:14 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/1.0%E6%9C%80%E3%82%82%E7%B0%A1%E5%8D%98%E3%81%AA%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E3%81%AEcodebuild%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88/</guid><description>version: 0.2 phases: build: commands: - ./terraform/codebuild/build.sh set -eux terraform version cd &amp;#34;terraform/env/${ENV}&amp;#34; || exit if [&amp;#34;{$COMMNAD}&amp;#34; = &amp;#34;apply&amp;#34;]; then terraform apply -auto-approve elif [&amp;#34;{$COMMAND}&amp;#34; = &amp;#34;destroy&amp;#34;]; then terraform destroy -auto-approve else terraform &amp;#34;${COMMAND}&amp;#34; fi cd - || exit CI/CD パイプラインのようなスクリプトの実行が自動化されている環境では、auto-approve をつけて、対話的なプロンプトが起動しないようにする || exit をつけることで、前のコマンドが失敗した時に強制的にスクリプトを終了する set -eux -e（errexit）: このオプションが設定されていると、シェルスクリプトはエラーが発生した箇所で停止します。通常、シェルスクリプトはエラーが発生しても全てのコマンドを実行し終えるまで処理を続けます。しかし、set -eを設定すると、途中でエラーが起きた場合にはその時点でスクリプトが停止します。
-u（nounset）: このオプションが設定されていると、未定義の変数を参照しようとするとエラーが発生します。これは、変数の名前を間違えたり、変数が予期せず未設定のままになっている場合などのミスを防ぐのに役立ちます。
-x（xtrace）: このオプションが設定されていると、シェルスクリプトは実行するコマンドをすべて表示します。これはデバッグに便利で、どのコマンドがどのように実行されているかを明確にするのに役立ちます。
cd - cd -というコマンドはシェルで前回の作業ディレクトリに戻る役割を果たします。</description></item><item><title>【1.1】codebuildにおけるversionの指定</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/aws/1.1codebuild%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8Bversion%E3%81%AE%E6%8C%87%E5%AE%9A/</link><pubDate>Thu, 03 Aug 2023 17:37:20 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/aws/1.1codebuild%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8Bversion%E3%81%AE%E6%8C%87%E5%AE%9A/</guid><description> version の指定が必須 現在は ver0.2 を指定する バージョン 0.1 はサポートされているが、可能な限りバージョン 0.2 を指定する</description></item><item><title>【メモ】AWS</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/aws/%E3%83%A1%E3%83%A2aws/</link><pubDate>Thu, 03 Aug 2023 17:28:41 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/aws/%E3%83%A1%E3%83%A2aws/</guid><description/></item><item><title>メモ一覧</title><link>https://dddsuz2.github.io/suzmemo/%E3%83%A1%E3%83%A2%E4%B8%80%E8%A6%A7/</link><pubDate>Thu, 03 Aug 2023 17:14:30 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/%E3%83%A1%E3%83%A2%E4%B8%80%E8%A6%A7/</guid><description>ba</description></item><item><title>【1.0】codebuildにおけるbuildspec</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/aws/1.0codebuild%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8Bscript/</link><pubDate>Thu, 03 Aug 2023 17:14:15 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/aws/1.0codebuild%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8Bscript/</guid><description>codebuild では、buildspec というファイルを使用して、ビルド仕様を決定することができる デフォルト名は buildspec.yml ソースディレクトリのルートに配置する必要がある buildspec.yml のファイル名と場所の変更 同じリポジトリの異なるビルドに、buildspec_debug.ymlや、buildspec_release.yml などの異なるファイルを使用する ルートディレクトリ以外の場所や、S3バケットに保存することができる ビルドプロジェクトと同じリージョンにS3バケットが存在する必要がある arn を使ってファイルを指定する ビルドプロジェクトには、1つの buildspec しか存在できない buildspec ファイルの名前、場所、またはその両方をオーバーライドする場合 AWS CLI の create-project または、update-project コマンドを使用する buildspec の値を、組み込みの環境変数の CODEBUILD_SRC_DIR の値を基準にした代替パスに設定する AWS CLI の start-build コマンドから、buildspecOverride の値を、CODEBUILD_SRC_DIR の値を基準にした代替パスに設定する AWS CloudFormation テンプレートで、BuildSpec タイプのリソース Source の AWS::CodeBuild::Project プロパティを、組み込みの環境変数 CODEBUILD_SRC_DIR の値を基準にした代替 buildspec ファイルのパスに設定します。</description></item><item><title>【2.1】型</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/2.1%E5%9E%8B/</link><pubDate>Wed, 02 Aug 2023 23:50:32 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/2.1%E5%9E%8B/</guid><description>Pythonの基本データ型
ブール値 整数 浮動小数点 複素数 文字列 リスト ミュータブル タプル バイト バイト配列 ミュータブル 集合 ミュータブル frozenset 辞書 ミュータブル</description></item><item><title>【2.0】Python のデータはオブジェクトである</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/2.0python-%E3%81%AE%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AF%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%A7%E3%81%82%E3%82%8B/</link><pubDate>Wed, 02 Aug 2023 23:24:31 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/2.0python-%E3%81%AE%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AF%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%A7%E3%81%82%E3%82%8B/</guid><description> プログラムはどこ（メモリ内の位置）に何（データ型）があるかを管理する コンピュータから見ればすべてはビットの集合体 Pythonでは、メモリ内のデータはすべてオブジェクトとして扱われる オブジェクトは次のものから構成されるデータのチャンクである 型 ID 値 参照カウント ということは、整数型が8バイトだったとして、8バイト+αでメモリが確保されるということ？
結構無駄に思えてしまう</description></item><item><title>【1】The Zen Of Python</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/1the-zen-of-python/</link><pubDate>Wed, 02 Aug 2023 23:14:19 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/1the-zen-of-python/</guid><description>The Zen of Python, by Tim Peters Beautiful is better than ugly. 醜いより美しいほうがいい。 Explicit is better than implicit. 暗示するより明示するほうがいい。 Simple is better than complex. 複雑であるよりは平易であるほうがいい。 Complex is better than complicated. それでも、込み入っているよりは複雑であるほうがまし。 Flat is better than nested. ネストは浅いほうがいい。 Sparse is better than dense. 密集しているよりは隙間があるほうがいい。 Readability counts. 読みやすいことは善である。 Special cases aren&amp;#39;t special enough to break the rules. 特殊であることはルールを破る理由にならない。 Although practicality beats purity. しかし、実用性を求めると純粋さが失われることがある。 Errors should never pass silently. エラーは隠すな、無視するな。 Unless explicitly silenced. ただし、わざと隠されているのなら見逃せ。 In the face of ambiguity, refuse the temptation to guess.</description></item><item><title>【書誌】入門Python3</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/%E6%9B%B8%E8%AA%8C%E5%85%A5%E9%96%80python3/</link><pubDate>Wed, 02 Aug 2023 23:08:54 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%85%A5%E9%96%80python3/%E6%9B%B8%E8%AA%8C%E5%85%A5%E9%96%80python3/</guid><description>監訳者まえがき まえがき 第Ⅰ部　Pythonの基礎 1章 Pyの味見 1.1　なぞなぞ 1.2　小さなプログラム 1.3　少し大きなプログラム 1.4　現実の世界でのPython 1.5　Pythonと惑星Xの他言語の比較 1.6　では、なぜPythonなのか 1.7　Pythonを避けるべきとき 1.8　Python 2かPython 3か 1.9　Pythonのインストール 1.10　Pythonの実行 1.10.1　対話型インタプリタの使い方 1.10.2　Pythonファイルの使い方 1.10.3　このあとはどうなる？ 1.11　The Zen of Python 1.12　次章では 1.13　復習課題 2章 データ：型、値、変数、そして名前 2.1　Pythonのデータはオブジェクトである 2.2　型 2.3　ミュータビリティ 2.4　リテラル値 2.5　変数 2.6　代入 2.7　変数は名前であって場所ではない 2.8　複数の名前への代入 2.9　名前への再代入 2.10　コピー 2.11　適切な変数名の選択 2.12　次章では 2.</description></item><item><title>【Splunk Enterprise 2.1】License pooling とは？</title><link>https://dddsuz2.github.io/suzmemo/splunk-enterprise-2.1license-pooling-%E3%81%A8%E3%81%AF/</link><pubDate>Wed, 02 Aug 2023 22:41:20 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/splunk-enterprise-2.1license-pooling-%E3%81%A8%E3%81%AF/</guid><description> License Stack 個々の License Volume が集約されたもの Enterprise と Enterprise Sales Trial ライセンスのみスタック可能 License Master (LM) Liscense Stack を持ち、Liscense Peer (Liscense Slave) 以下の各インスタンスにライセンスを分配する Liscense Peer 間でライセンスを共有することができる License Pool License stack から割り当てられるライセンスの量</description></item><item><title>【Splunk Enterprise 2.0】Splunk Enterprise と Splunk Cloud の違い</title><link>https://dddsuz2.github.io/suzmemo/splunk-enterprise-2.0splunk-enterprise-%E3%81%A8-splunk-cloud-%E3%81%AE%E9%81%95%E3%81%84/</link><pubDate>Wed, 02 Aug 2023 22:22:13 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/splunk-enterprise-2.0splunk-enterprise-%E3%81%A8-splunk-cloud-%E3%81%AE%E9%81%95%E3%81%84/</guid><description> Splunk Enterprise Splunk Cloud CLI 利用可能 利用不可　Splunk Apps 利用者が自由に決められる Splunkによって承認されたアプリのみ Direct TCP/UDP network input 利用可能 利用不可 Scripted Alerts 利用可能 承認されたアプリのみ利用可能 License pooling 利用可能 利用不可 HEC 利用可能 利用可能(ELB on port 443 のみ) Splunk API デフォルトで利用可能 IP Allow List を使用すれば利用可能 Network Connection TCP or UDP オンプレミス上の Forwarder からのTCPのみ（UF credentials が必要） 【Splunk Enterprise 2-1】License pooling とは？
License Poolong って何やねんと思ったときの説明</description></item><item><title>【5.3】質問の3つの機能</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/5.3%E8%B3%AA%E5%95%8F%E3%81%AE3%E3%81%A4%E3%81%AE%E6%A9%9F%E8%83%BD/</link><pubDate>Wed, 02 Aug 2023 19:51:19 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/5.3%E8%B3%AA%E5%95%8F%E3%81%AE3%E3%81%A4%E3%81%AE%E6%A9%9F%E8%83%BD/</guid><description> 知らないことを知る クローズドクエスチョンとオープンクエスチョンを使い分ける 相手に考えてもらう 関係がしっかりできていないと意味がない 相手の頭を整理する 要るものと要らないものを分ける 順番通りに並べる</description></item><item><title>【5.2】情報収集のテクニック</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/5.2%E6%83%85%E5%A0%B1%E5%8F%8E%E9%9B%86%E3%81%AE%E3%83%86%E3%82%AF%E3%83%8B%E3%83%83%E3%82%AF/</link><pubDate>Wed, 02 Aug 2023 19:48:13 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/5.2%E6%83%85%E5%A0%B1%E5%8F%8E%E9%9B%86%E3%81%AE%E3%83%86%E3%82%AF%E3%83%8B%E3%83%83%E3%82%AF/</guid><description>基本知識を押さえたら、それらの最新情報を随時集める
感度を高め、アンテナを張るだけで良い</description></item><item><title>【5.1】調べるべきイチオシの情報</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/5.1%E8%AA%BF%E3%81%B9%E3%82%8B%E3%81%B9%E3%81%8D%E3%82%A4%E3%83%81%E3%82%AA%E3%82%B7%E3%81%AE%E6%83%85%E5%A0%B1/</link><pubDate>Wed, 02 Aug 2023 19:46:22 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/5.1%E8%AA%BF%E3%81%B9%E3%82%8B%E3%81%B9%E3%81%8D%E3%82%A4%E3%83%81%E3%82%AA%E3%82%B7%E3%81%AE%E6%83%85%E5%A0%B1/</guid><description> 基本知識 ほとんど変わらないもの 次の二つに分けられる 調べればわかること 質問すればわかること 最新情報 刻々と変わるもの</description></item><item><title>【5】ダメな質問のパターン5つ</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/5%E3%83%80%E3%83%A1%E3%81%AA%E8%B3%AA%E5%95%8F%E3%81%AE%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B35%E3%81%A4/</link><pubDate>Wed, 02 Aug 2023 19:23:26 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/5%E3%83%80%E3%83%A1%E3%81%AA%E8%B3%AA%E5%95%8F%E3%81%AE%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B35%E3%81%A4/</guid><description>「わかってるね」は信頼のバロメーター
ダメな質問のパターン
疑問に思ったことを「そのまま質問する」 そもそも質問は作るもの 頭に思い浮かんだ疑問を、そのままのカタチで質問すべきではない 「質問する相手」を間違える 答えを得られないならまだマシで、間違った答えを教えられる可能性がある 誰に質問するのが一番いいか考えてみる 「考えればわかること」を質問する 質問する前に自分で考えればわかることかどうか、質問してみる 「調べればわかること」を質問する 「抽象的なこと」を質問する</description></item><item><title>【4.11】DESC法</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/4.11desc%E6%B3%95/</link><pubDate>Wed, 02 Aug 2023 19:21:49 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/4.11desc%E6%B3%95/</guid><description>Describe Express Suggest Consequence 背景を説明してから問題提起したいときや、提案に向いている</description></item><item><title>【4.10】PREP法</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/4.10prep%E6%B3%95/</link><pubDate>Wed, 02 Aug 2023 19:19:51 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/4.10prep%E6%B3%95/</guid><description> P (要点) R（理由） E（具体例） P（要点） 結果報告や悩みの相談に向いている
慣れないうちは準備してから話した方がいい</description></item><item><title>【4.9】SDS法</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/4.9sds%E6%B3%95/</link><pubDate>Wed, 02 Aug 2023 19:17:38 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/4.9sds%E6%B3%95/</guid><description> S (要点) D（詳細） S（要点） 詳細を要点ではさむ
自己紹介、商品紹介に向いている</description></item><item><title>【4.8】「結論ファースト」で話す</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/4.8%E7%B5%90%E8%AB%96%E3%83%95%E3%82%A1%E3%83%BC%E3%82%B9%E3%83%88%E3%81%A7%E8%A9%B1%E3%81%99/</link><pubDate>Wed, 02 Aug 2023 19:13:13 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/4.8%E7%B5%90%E8%AB%96%E3%83%95%E3%82%A1%E3%83%BC%E3%82%B9%E3%83%88%E3%81%A7%E8%A9%B1%E3%81%99/</guid><description>「結論を後回し」にすると、脇道にそれやすい
相手に興味を持たせたいときには、ストーリー形式で話す
そんなことが必要ないなら、結論ファーストで話す
報告の時には、時系列で話すべきではない
たとえ話は後にする
ロジカルに話す時は結論ファースト エモーショナルに話したいときは結論ラスト ごちゃまぜにしてはいけない</description></item><item><title>【4.7】主語と述語を近づける</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/4.7%E4%B8%BB%E8%AA%9E%E3%81%A8%E8%BF%B0%E8%AA%9E%E3%82%92%E8%BF%91%E3%81%A5%E3%81%91%E3%82%8B/</link><pubDate>Wed, 02 Aug 2023 19:10:42 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/4.7%E4%B8%BB%E8%AA%9E%E3%81%A8%E8%BF%B0%E8%AA%9E%E3%82%92%E8%BF%91%E3%81%A5%E3%81%91%E3%82%8B/</guid><description> 念入りに話過ぎると話が長くなる 話が長くなると、主語と述語が遠くなり、話が分かりにくくなる 主語と述語を近づける 話は長くてもいい 一文は短い方がいい</description></item><item><title>【4.6】話がそれないように木を意識して話す</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/4.6%E8%A9%B1%E3%81%8C%E3%81%9D%E3%82%8C%E3%82%8B%E4%BA%BA3%E3%81%A4%E3%81%AE%E5%85%B1%E9%80%9A%E7%82%B9/</link><pubDate>Wed, 02 Aug 2023 19:06:53 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/4.6%E8%A9%B1%E3%81%8C%E3%81%9D%E3%82%8C%E3%82%8B%E4%BA%BA3%E3%81%A4%E3%81%AE%E5%85%B1%E9%80%9A%E7%82%B9/</guid><description>話がそれる人
話している最中に枝葉のキーワードについて連想を始めてしまう 木をイメージして話す
「幹」「枝」「葉」 「幹」にあたるのが話の論点</description></item><item><title>【4.5】専門用語は相手に合わせて使う</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/4.5%E5%B0%82%E9%96%80%E7%94%A8%E8%AA%9E%E3%81%AF%E7%9B%B8%E6%89%8B%E3%81%AB%E5%90%88%E3%82%8F%E3%81%9B%E3%81%A6%E4%BD%BF%E3%81%86/</link><pubDate>Wed, 02 Aug 2023 19:03:11 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/4.5%E5%B0%82%E9%96%80%E7%94%A8%E8%AA%9E%E3%81%AF%E7%9B%B8%E6%89%8B%E3%81%AB%E5%90%88%E3%82%8F%E3%81%9B%E3%81%A6%E4%BD%BF%E3%81%86/</guid><description>業界用語と、「よく聞くが意味が分かりづらいビジネス用語」を使う時は気を付ける 「よく聞くが実はいみがわかりづらいビジネス用語」
アジェンダ アサイン アテンド イシュー イニシアティブ エクスキューズ エビデンス コミット コンセンサス サマリー シュリンク スキーム ステークホルダー タスク ナレッジ バッファ フィックス プライオリティ ペンディング リソース ローンチ 相手がわかる言葉を選ぶのが、丁寧な話し方</description></item><item><title>【4.4】「あの・この・その」に気を付ける</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/4.4%E3%81%82%E3%81%AE%E3%81%93%E3%81%AE%E3%81%9D%E3%81%AE%E3%81%AB%E6%B0%97%E3%82%92%E4%BB%98%E3%81%91%E3%82%8B/</link><pubDate>Wed, 02 Aug 2023 19:00:43 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/4.4%E3%81%82%E3%81%AE%E3%81%93%E3%81%AE%E3%81%9D%E3%81%AE%E3%81%AB%E6%B0%97%E3%82%92%E4%BB%98%E3%81%91%E3%82%8B/</guid><description>「あの・この・その」に気を付ける
「あの・この・その」がさす具体的な何かをハッキリ話す ハッキリ話した後に「あの・この・その」を使うのは問題ない</description></item><item><title>【4.3】ぼんやり表現を「4W2H」で分解する</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/4.3%E3%81%BC%E3%82%93%E3%82%84%E3%82%8A%E8%A1%A8%E7%8F%BE%E3%82%924w2h%E3%81%A7%E5%88%86%E8%A7%A3%E3%81%99%E3%82%8B/</link><pubDate>Wed, 02 Aug 2023 18:35:08 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/4.3%E3%81%BC%E3%82%93%E3%82%84%E3%82%8A%E8%A1%A8%E7%8F%BE%E3%82%924w2h%E3%81%A7%E5%88%86%E8%A7%A3%E3%81%99%E3%82%8B/</guid><description>ぼんやり話す人の特徴
形容詞、副詞をそのまま加工せずに使うこと 「4W2H」で分解する いつ 誰 何 どこ どのように どれくらい</description></item><item><title>【4.2】最後までしっかり話きる</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/4.2%E6%9C%80%E5%BE%8C%E3%81%BE%E3%81%A7%E3%81%97%E3%81%A3%E3%81%8B%E3%82%8A%E8%A9%B1%E3%81%8D%E3%82%8B/</link><pubDate>Wed, 02 Aug 2023 18:33:31 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/4.2%E6%9C%80%E5%BE%8C%E3%81%BE%E3%81%A7%E3%81%97%E3%81%A3%E3%81%8B%E3%82%8A%E8%A9%B1%E3%81%8D%E3%82%8B/</guid><description>最後まではっきり言わない話し方は伝わらない
特に依頼するとき 相手に何をしてもらいたいか、相手目線で話し切る</description></item><item><title>【4.1】話し方の基本</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/4.1%E8%A9%B1%E3%81%97%E6%96%B9%E3%81%AE%E5%9F%BA%E6%9C%AC/</link><pubDate>Wed, 02 Aug 2023 18:31:34 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/4.1%E8%A9%B1%E3%81%97%E6%96%B9%E3%81%AE%E5%9F%BA%E6%9C%AC/</guid><description>話し方の基本とは？
「丁寧に」話すこと 流暢でなくてもいいし、会話が弾まなくてもいい 丁寧に話すために、「漏れなく」「細かく」を意識しよう</description></item><item><title>【4】誤解を生む話し方とは？</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/4%E8%AA%A4%E8%A7%A3%E3%82%92%E7%94%9F%E3%82%80%E8%A9%B1%E3%81%97%E6%96%B9%E3%81%A8%E3%81%AF/</link><pubDate>Wed, 02 Aug 2023 18:29:38 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/4%E8%AA%A4%E8%A7%A3%E3%82%92%E7%94%9F%E3%82%80%E8%A9%B1%E3%81%97%E6%96%B9%E3%81%A8%E3%81%AF/</guid><description>思い付きで話すと、話はあいまいになる
話がかみ合わないのは、ぼんやり話すから 曖昧な話になったときに、何度も確認してくれる人なら良いが、そうでないなら、聞き手は自分の解釈で話を進めてしまう 誤解が誤解を生む状態になる</description></item><item><title>【3.7】ちなみに作戦</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/3.7%E3%81%A1%E3%81%AA%E3%81%BF%E3%81%AB%E4%BD%9C%E6%88%A6/</link><pubDate>Wed, 02 Aug 2023 17:46:08 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/3.7%E3%81%A1%E3%81%AA%E3%81%BF%E3%81%AB%E4%BD%9C%E6%88%A6/</guid><description> 細かい点を確認すると嫌がられやすい すでに確認するまでもないことを確認してから、「ちなみに～」で細かい点を確認する</description></item><item><title>【3.6】確認忘れの対処法</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/3.6%E7%A2%BA%E8%AA%8D%E5%BF%98%E3%82%8C%E3%81%AE%E5%AF%BE%E5%87%A6%E6%B3%95/</link><pubDate>Wed, 02 Aug 2023 17:42:52 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/3.6%E7%A2%BA%E8%AA%8D%E5%BF%98%E3%82%8C%E3%81%AE%E5%AF%BE%E5%87%A6%E6%B3%95/</guid><description> 「確認」するのではなく「相談」する 「相談したいことがあるのですが、～」 「～に悩んでいます」 手を動かした後に聞いているんだなという印象を相手に与えることができる 雑相 雑談をもちかけて、相手と良い雰囲気を作ってから相談する</description></item><item><title>【0】openFrameworksとは？</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/beyond_interaction/0openframeworks%E3%81%A8%E3%81%AF/</link><pubDate>Tue, 01 Aug 2023 23:03:28 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/beyond_interaction/0openframeworks%E3%81%A8%E3%81%AF/</guid><description>openFrameworksという言葉を直訳すると？
「開かれたフレームワーク」
フレームワークとは？ アプリケーションで頻繁に利用される機能をまとめて、アプリ開発の土台として使用できるようにしたもの openFrameworksとは？
インタラクティブなコンテンツやメディアアートを制作することに特化したフレームワーク 2次元や3次元の図形の描画 アニメーション サウンドの録音と再生 動画のキャプチャと再生 マウスやキーボードによるインタラクション　など　openFrameworksは色々なライブラリの集合体
グラフィック：OpenGL オーディオ：RtAudio フォント：FreeType 画像の入出力：FreeImage 動画の再生やキャプチャ：GStreamer</description></item><item><title>【書誌】Beyond_Interaction（改訂第3版）</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/beyond_interaction/%E6%9B%B8%E8%AA%8Cbeyond_interaction%E6%94%B9%E8%A8%82%E7%AC%AC3%E7%89%88/</link><pubDate>Tue, 01 Aug 2023 22:26:43 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/beyond_interaction/%E6%9B%B8%E8%AA%8Cbeyond_interaction%E6%94%B9%E8%A8%82%E7%AC%AC3%E7%89%88/</guid><description>
Chapter 1　openFrameworks入門 1-1　openFrameworkについて 1-2　作例とコミュニティ Chapter 2　openFrameworksプログラミング初級編 2-1　プログラムの入手とインストール 2-2　サンプルプログラムの起動 2-3　openFrameworksプログラムを始めよう 2-4　ProjectGeneratorで新規プロジェクトを作成 2-5　図形を描く 2-6　色の設定 2-7　数値の記憶と計算 2-8　たくさんの図形を一気に描く 2-9　たくさんの値を記憶する―配列 2-10　移動する―アニメーション 2-11　条件分岐―「もし○○なら××せよ」 2-12　たくさんの図形を移動する 2-13　図形に触れる―インタラクション 2-14　より高度な表現へ Chapter 3　openFrameworksプログラミング中級編 3-1　プロジェクトの構造をより深く理解する 3-2　いろいろなメディアを扱う 3-3　OOOF：オブジェクト指向oFプログラミング 3-4　アドオンの利用 3-5　楽器を作る Chapter 4　openFrameworksプログラミング上級編 4-1　3Dグラフィクスプログラミングの基本 4-2　より自由な3D図形を描く―ポリゴンメッシュの操作 4-3　GLSL (シェーダー) を使う―ofShader Chapter 5　openFrameworksの現状と未来 5-1　openFrameworksは終わったのか? 5-2　クリエイティブ・コーディング環境の発展と進化 5-3　クリエイティブ・コーディングの歴史の継承 5-4　「ツール」ではなく「マテリアル」としてのコンピューティング 5-5　オープンなフレームワークであること 5-6　openFrameworksを超えて</description></item><item><title>【3.5】常備するべき二つのグッズ</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/3.5%E5%B8%B8%E5%82%99%E3%81%99%E3%82%8B%E3%81%B9%E3%81%8D%E4%BA%8C%E3%81%A4%E3%81%AE%E3%82%B0%E3%83%83%E3%82%BA/</link><pubDate>Tue, 01 Aug 2023 20:51:57 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/3.5%E5%B8%B8%E5%82%99%E3%81%99%E3%82%8B%E3%81%B9%E3%81%8D%E4%BA%8C%E3%81%A4%E3%81%AE%E3%82%B0%E3%83%83%E3%82%BA/</guid><description>メモとペン
確認グセをつけるうえで大事 電話対応と同じスタンスでメモをとる 紙のメモがおすすめ 相手が話したくなるような姿勢を見せられる メモパフォーマンス
「ちょっとメモしていいですか？」は殺し文句 相手の自尊心を高められる 聞き逃したらチャンスと受け止めるぐらいの余裕を持つ 聞き逃したので、もう1回言ってもらえませんか？ メモした内容を「後追いメール」する ポイントは、体言止めの箇条書きはしないこと　きちんと動詞を書く</description></item><item><title>【3.4】スタンスを合わせる</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/3.4%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%82%92%E5%90%88%E3%82%8F%E3%81%9B%E3%82%8B/</link><pubDate>Tue, 01 Aug 2023 20:47:47 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/3.4%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%82%92%E5%90%88%E3%82%8F%E3%81%9B%E3%82%8B/</guid><description>会話をするうえで筆者が最も重要視しているのはスタンス
スタンスが合っていなければ、最初からズレまくった会話になってしまう 事前に確認する 他愛もない雑談なのに、相手が真剣だったり、真面目に相談するつもりだったのに、相手にジョークと受け止められたり</description></item><item><title>【3.3】的外れをゼロにする質問</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/3.3%E7%9A%84%E5%A4%96%E3%82%8C%E3%82%92%E3%82%BC%E3%83%AD%E3%81%AB%E3%81%99%E3%82%8B%E8%B3%AA%E5%95%8F/</link><pubDate>Tue, 01 Aug 2023 20:46:01 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/3.3%E7%9A%84%E5%A4%96%E3%82%8C%E3%82%92%E3%82%BC%E3%83%AD%E3%81%AB%E3%81%99%E3%82%8B%E8%B3%AA%E5%95%8F/</guid><description>話が明確になるまで確認する
1回で的に当たるとは限らない 確認が1回で終わることは少ない 相手に迷惑をかけるんじゃないかというのは気にしない 「丁寧に仕事をしようという気持ちのあらわれだ」とポジティブにとらえる</description></item><item><title>【3.2】ピントが合う二つの質問</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/3.2%E3%83%94%E3%83%B3%E3%83%88%E3%81%8C%E5%90%88%E3%81%86%E4%BA%8C%E3%81%A4%E3%81%AE%E8%B3%AA%E5%95%8F/</link><pubDate>Tue, 01 Aug 2023 20:43:50 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/3.2%E3%83%94%E3%83%B3%E3%83%88%E3%81%8C%E5%90%88%E3%81%86%E4%BA%8C%E3%81%A4%E3%81%AE%E8%B3%AA%E5%95%8F/</guid><description> 抽象的な言葉に対して 「具体的には？」 「わかりやすくというのは、具体的にどういうことでしょうか？」 「たとえば？」 「わかりやすくというのは、たとえば図表を用いて書くということですか？」</description></item><item><title>【3.1】確認のコツ</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/3.1%E7%A2%BA%E8%AA%8D%E3%81%AE%E3%82%B3%E3%83%84/</link><pubDate>Tue, 01 Aug 2023 20:41:12 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/3.1%E7%A2%BA%E8%AA%8D%E3%81%AE%E3%82%B3%E3%83%84/</guid><description>そもそも、日常会話において「伝え方」を鍛えている人はほぼいない
1割もいない つまり、話し手の言い分が聞き手に伝わることはほぼ100%ない 「わかった？」と聞かれて、「わかりました」と答えるのは前提から間違っている つまり、コミュニケーションが成立していない 相手から確認される前に、こちらから確認するのが礼儀</description></item><item><title>【3】対人関係で気を付けること</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/3%E5%AF%BE%E4%BA%BA%E9%96%A2%E4%BF%82%E3%81%A7%E6%B0%97%E3%82%92%E4%BB%98%E3%81%91%E3%82%8B%E3%81%93%E3%81%A8/</link><pubDate>Tue, 01 Aug 2023 20:38:50 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/3%E5%AF%BE%E4%BA%BA%E9%96%A2%E4%BF%82%E3%81%A7%E6%B0%97%E3%82%92%E4%BB%98%E3%81%91%E3%82%8B%E3%81%93%E3%81%A8/</guid><description>対人関係を良くしたい
「悪くならなければいい」に考え方を変える 対人関係を悪くする要因 コミュニケーション きちんと会話が成立すること 「あの人はよくわかってる」と思われれば、関係が悪くなることはない 関係を悪くさせないコミュニケーション技術 「確認」 確認ゼロでは会話は成立しない</description></item><item><title>【2.6】本気のリスニング</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/2.6%E6%9C%AC%E6%B0%97%E3%81%AE%E3%83%AA%E3%82%B9%E3%83%8B%E3%83%B3%E3%82%B0/</link><pubDate>Tue, 01 Aug 2023 20:35:41 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/2.6%E6%9C%AC%E6%B0%97%E3%81%AE%E3%83%AA%E3%82%B9%E3%83%8B%E3%83%B3%E3%82%B0/</guid><description>そもそも、説明を正しく聞き取ることは難しい
聞き間違いがあると、必ずズレる バックトラッキングは1対1で会話している時しか使えない 早とちりしやすい人 1語1句漏らさないように聞く 最後まで話を聞かずに考えを巡らせてしまってはいけない 英語のリスニング試験を受ける気持ちで</description></item><item><title>【2.5】リアクションのコツ</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/2.5%E3%83%AA%E3%82%A2%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E3%82%B3%E3%83%84/</link><pubDate>Tue, 01 Aug 2023 20:33:13 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/2.5%E3%83%AA%E3%82%A2%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E3%82%B3%E3%83%84/</guid><description>「ターン」のときにあいてをほめる
3S (ターン用) さすがですね すごいですね すばらしいですね あいうえお（トン用） あ～ いいですね～ うーん えー？ おお～ 表情も明るく 声よりも顔でリアクションすることも意識する</description></item><item><title>【2.4】会話のリズム</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/2.4%E4%BC%9A%E8%A9%B1%E3%81%AE%E3%83%AA%E3%82%BA%E3%83%A0/</link><pubDate>Tue, 01 Aug 2023 20:21:15 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/2.4%E4%BC%9A%E8%A9%B1%E3%81%AE%E3%83%AA%E3%82%BA%E3%83%A0/</guid><description>リアクションが弱い人
リアクションの量で考察する 多すぎる ちょうどいい 少なすぎる 少なすぎると、相手の気持ちは乗ってこない 多すぎてもだめ 対策 小さいうなずき、大きなうなずきを適度に混ぜる リズムも意識する 「トン・トン・ターン」のリズムで話す 3つ目を大きなリアクションにする</description></item><item><title>【2.3】バックトラッキング</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/2.3%E3%83%90%E3%83%83%E3%82%AF%E3%83%88%E3%83%A9%E3%83%83%E3%82%AD%E3%83%B3%E3%82%B0/</link><pubDate>Tue, 01 Aug 2023 20:19:05 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/2.3%E3%83%90%E3%83%83%E3%82%AF%E3%83%88%E3%83%A9%E3%83%83%E3%82%AD%E3%83%B3%E3%82%B0/</guid><description>基本技術は「バックトラッキング」
オウム返し 会話の指差し確認 復唱によって、話を明確化する 聞き間違いを防ぐ 聞いているというサインを送る</description></item><item><title>【2.2】聞く姿勢の作り方</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/2.2%E8%81%9E%E3%81%8F%E5%A7%BF%E5%8B%A2%E3%81%AE%E4%BD%9C%E3%82%8A%E6%96%B9/</link><pubDate>Tue, 01 Aug 2023 20:17:19 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/2.2%E8%81%9E%E3%81%8F%E5%A7%BF%E5%8B%A2%E3%81%AE%E4%BD%9C%E3%82%8A%E6%96%B9/</guid><description> 座り方が大切 膝に意識を向けて座る 膝を相手に向ける 背もたれにどっかり身体を預けるのはやめよう 聞く姿勢をとることで、会話の主導権を握ることができる</description></item><item><title>【2.1】会話のズレスパイラルとは</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/2.1%E4%BC%9A%E8%A9%B1%E3%81%AE%E3%82%BA%E3%83%AC%E3%82%B9%E3%83%91%E3%82%A4%E3%83%A9%E3%83%AB%E3%81%A8%E3%81%AF/</link><pubDate>Tue, 01 Aug 2023 20:14:30 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/2.1%E4%BC%9A%E8%A9%B1%E3%81%AE%E3%82%BA%E3%83%AC%E3%82%B9%E3%83%91%E3%82%A4%E3%83%A9%E3%83%AB%E3%81%A8%E3%81%AF/</guid><description>会話のズレスパイラルの流れ
聞く姿勢がなっていない 話がズレる さらに相手がきちんと話してくれなくなる ズレスパイラルから抜け出す方法
正しい姿勢で聞く 話がズレなくなる 相手が積極的に話しかけてくれる ちゃんとした聞きグセを身に着ける
慣れないうちは、大げさなぐらい聞いてますオーラをだしてもよい 【2.2】聞く姿勢の作り方
【2.3】バックトラッキング
【2.4】会話のリズム
【2.5】リアクションのコツ
【2.6】本気のリスニング
会話のズレスパイラルをなくすための聞きグセについてここら辺に書いてある</description></item><item><title>【2】返事がズレないための聞き方</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/2%E8%BF%94%E4%BA%8B%E3%81%8C%E3%82%BA%E3%83%AC%E3%81%AA%E3%81%84%E3%81%9F%E3%82%81%E3%81%AE%E8%81%9E%E3%81%8D%E6%96%B9/</link><pubDate>Tue, 01 Aug 2023 20:11:05 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/2%E8%BF%94%E4%BA%8B%E3%81%8C%E3%82%BA%E3%83%AC%E3%81%AA%E3%81%84%E3%81%9F%E3%82%81%E3%81%AE%E8%81%9E%E3%81%8D%E6%96%B9/</guid><description>ぼんやりした話し方をする人が大半
ぼんやりした話し方とは？
「前提」を省略したり、あいまいな表現を使うせい 相手がぼんやり話すとこちらもぼんやりとしか理解できない
ぼんやりと聞き返さない
「聞き方」に問題がある場合、上司が話してくれなくなる可能性がある 正しい聞きグセをつけよう</description></item><item><title>【1.3】ズレリセット3か条</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/1.3%E3%82%BA%E3%83%AC%E3%83%AA%E3%82%BB%E3%83%83%E3%83%883%E3%81%8B%E6%9D%A1/</link><pubDate>Tue, 01 Aug 2023 20:08:54 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/1.3%E3%82%BA%E3%83%AC%E3%83%AA%E3%82%BB%E3%83%83%E3%83%883%E3%81%8B%E6%9D%A1/</guid><description> その場で確認 反射はやめて、その場での確認を習慣化する 具体化する 数字と固有名詞を意識して質問する 常識はメモる 事前に覚えておくことにも限界がある その都度メモをとって覚えよう</description></item><item><title>【1.2】ズレが生じる3つのパターン</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/1.2%E3%82%BA%E3%83%AC%E3%81%8C%E7%94%9F%E3%81%98%E3%82%8B3%E3%81%A4%E3%81%AE%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3/</link><pubDate>Tue, 01 Aug 2023 20:04:37 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/1.2%E3%82%BA%E3%83%AC%E3%81%8C%E7%94%9F%E3%81%98%E3%82%8B3%E3%81%A4%E3%81%AE%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3/</guid><description> 反射 相手の話を聞いた後、反射的に答えてしまうこと 確認するタイミングを失ってしまうのが問題 対策 「相手の指示は、あいまいではないか？」 「言い足りないことはないか？」 思い込み 話し手が確認してもズレを直せない 対策 自分が理解していることを「丁寧に話す」クセをつける 知識不足 知識不足だと、そもそも何も聞き取れない 対策 基本的なビジネス用語、業界用語を覚える 質問力をつける 【1.3】ズレリセット3か条
会話のズレをリセットする方法が書いてある</description></item><item><title>【1.1】話がかみ合わない二つの理由</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/1.1%E8%A9%B1%E3%81%8C%E3%81%8B%E3%81%BF%E5%90%88%E3%82%8F%E3%81%AA%E3%81%84%E4%BA%8C%E3%81%A4%E3%81%AE%E7%90%86%E7%94%B1/</link><pubDate>Tue, 01 Aug 2023 20:02:11 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/1.1%E8%A9%B1%E3%81%8C%E3%81%8B%E3%81%BF%E5%90%88%E3%82%8F%E3%81%AA%E3%81%84%E4%BA%8C%E3%81%A4%E3%81%AE%E7%90%86%E7%94%B1/</guid><description> どちらかが、ぼんやりとした話し方をしていること
あいまいな表現、抽象的な言葉を使ってコミュニケーションを行うと必ずズレが生じる 言葉を省略すること
【2.3】バックトラッキング
ぼんやりした話し方をされた時にはバックトラッキングが有効 【2.6】本気のリスニング
そもそも、話に傾聴できているか？を確認する必要がある</description></item><item><title>【1】話がズレると、会話を続ける気がしない</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/1%E8%A9%B1%E3%81%8C%E3%82%BA%E3%83%AC%E3%82%8B%E3%81%A8%E4%BC%9A%E8%A9%B1%E3%82%92%E7%B6%9A%E3%81%91%E3%82%8B%E6%B0%97%E3%81%8C%E3%81%97%E3%81%AA%E3%81%84/</link><pubDate>Tue, 01 Aug 2023 19:59:41 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/1%E8%A9%B1%E3%81%8C%E3%82%BA%E3%83%AC%E3%82%8B%E3%81%A8%E4%BC%9A%E8%A9%B1%E3%82%92%E7%B6%9A%E3%81%91%E3%82%8B%E6%B0%97%E3%81%8C%E3%81%97%E3%81%AA%E3%81%84/</guid><description> 相手の反応がいまいち悪い時
確実に相手との会話がかみ合っていない 気に病む必要はない 相手の責任も確実にある ズレを防止する方法を考える
【1.3】ズレリセット3か条
【3.1】確認のコツ
話を聞くスタンスにおいて大事なことが書いてある そもそも論、伝え方の訓練をしている人はすくない &amp;mdash;&amp;gt; 話が伝わらなくて当然 これに対してわかりましたと言うのはバッドコミュニケーション</description></item><item><title>【0】10秒でできる＜会話のズレ度・チェック＞</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/010%E7%A7%92%E3%81%A7%E3%81%A7%E3%81%8D%E3%82%8B%E4%BC%9A%E8%A9%B1%E3%81%AE%E3%82%BA%E3%83%AC%E5%BA%A6%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF/</link><pubDate>Tue, 01 Aug 2023 19:55:46 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/010%E7%A7%92%E3%81%A7%E3%81%A7%E3%81%8D%E3%82%8B%E4%BC%9A%E8%A9%B1%E3%81%AE%E3%82%BA%E3%83%AC%E5%BA%A6%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF/</guid><description>次のようなことを言われていたら要注意
「あの件、どうなった？」と確認される 「ちゃんと話聞いてる？」と心配される 「それは自分で聞いてくれないか」と、相手から避けられる 「ま、それはおいといて...」と、話している途中で遮られる 「がんばってるのは認めるけど」と言われ、なかなか評価してもらえない</description></item><item><title>【書誌】キミが信頼されないのは話が「ズレてる」だけなんだ</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/%E6%9B%B8%E8%AA%8C%E3%82%AD%E3%83%9F%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF%E8%A9%B1%E3%81%8C%E3%82%BA%E3%83%AC%E3%81%A6%E3%82%8B%E3%81%A0%E3%81%91%E3%81%AA%E3%82%93%E3%81%A0%E8%AA%AD%E4%BA%86/</link><pubDate>Tue, 01 Aug 2023 19:54:05 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E5%90%9B%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF/%E6%9B%B8%E8%AA%8C%E3%82%AD%E3%83%9F%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF%E8%A9%B1%E3%81%8C%E3%82%BA%E3%83%AC%E3%81%A6%E3%82%8B%E3%81%A0%E3%81%91%E3%81%AA%E3%82%93%E3%81%A0%E8%AA%AD%E4%BA%86/</guid><description>1章　〈知らぬ間に、信頼を失っていた!?〉こんな話し方、していませんか？ 2章　〈まずは「相手の話」「指示」をちゃんと聞く〉この「聞き方」で、返事がズレない 3章　〈「認識のズレ」をなくす〉この「確認」が必要だった！ 4章　〈話が長く、脱線しやすい人は〉もっと丁寧に話そう 5章　〈「わかってるね！」と評価が上がる〉「ダメな質問」「すべき質問」はコレだ！ 6章　〈キーパーソン、重要な人から信頼を勝ち取れる！〉ひとつ上の話し方 【0】10秒でできる＜会話のズレ度・チェック＞
【1】話がズレると、会話を続ける気がしない
【1.1】話がかみ合わない二つの理由
【1.2】ズレが生じる3つのパターン
【1.3】ズレリセット3か条
【2】返事がズレないための聞き方
【2.1】会話のズレスパイラルとは
【2.2】聞く姿勢の作り方
【2.3】バックトラッキング
【2.4】会話のリズム
【2.5】リアクションのコツ
【2.6】本気のリスニング
【3】対人関係で気を付けること
【3.1】確認のコツ
【3.2】ピントが合う二つの質問
【3.3】的外れをゼロにする質問
【3.4】スタンスを合わせる
【3.5】常備するべき二つのグッズ
【3.6】確認忘れの対処法
【3.7】ちなみに作戦
【4】誤解を生む話し方とは？
【4.1】話し方の基本
【4.2】最後までしっかり話きる
【4.3】ぼんやり表現を「4W2H」で分解する
【4.4】「あの・この・その」に気を付ける
【4.5】専門用語は相手に合わせて使う
【4.6】話がそれる人、3つの共通点
【4.7】主語と述語を近づける
【4.8】「結論ファースト」で話す
【4.9】SDS法
【4.10】PREP法
【4.11】DESC法
【5】ダメな質問のパターン5つ
【5.1】調べるべきイチオシの情報
【5.2】情報収集のテクニック
【5.3】質問の3つの機能
【6.0】相手が話したいモードになるスイッチを押す
【6.1】必勝パターン2つ
【6.2】何でも話してもらえる3つの極意
【6.3】本音を打ち明けてもらうには
【6.4】聞き上手になるには
【6.5】相手に共感するには</description></item><item><title>【1.4】なぜ私は自分が信じていることを信じているのか？</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%B3%AA%E5%95%8F%E5%8A%9B%E3%82%92%E9%8D%9B%E3%81%88%E3%82%8B%E6%9C%AC/1.4%E3%81%AA%E3%81%9C%E7%A7%81%E3%81%AF%E8%87%AA%E5%88%86%E3%81%8C%E4%BF%A1%E3%81%98%E3%81%A6%E3%81%84%E3%82%8B%E3%81%93%E3%81%A8%E3%82%92%E4%BF%A1%E3%81%98%E3%81%A6%E3%81%84%E3%82%8B%E3%81%AE%E3%81%8B/</link><pubDate>Tue, 01 Aug 2023 00:49:53 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%B3%AA%E5%95%8F%E5%8A%9B%E3%82%92%E9%8D%9B%E3%81%88%E3%82%8B%E6%9C%AC/1.4%E3%81%AA%E3%81%9C%E7%A7%81%E3%81%AF%E8%87%AA%E5%88%86%E3%81%8C%E4%BF%A1%E3%81%98%E3%81%A6%E3%81%84%E3%82%8B%E3%81%93%E3%81%A8%E3%82%92%E4%BF%A1%E3%81%98%E3%81%A6%E3%81%84%E3%82%8B%E3%81%AE%E3%81%8B/</guid><description>なぜ私は自分が信じていることを信じているのか？
自分自身の信念や偏見、思い込みを疑うところから意思決定は始まる 何かを信じたいことがあったときに、それを裏付ける情報を探すのは現代では容易 自分の思い込みを検証するために、急所を突いた質問をする 急所を突いた質問とは？ 第一に「なに？」 自分の思い込みはなに？ 「この問題について自分が信じたがっていることは何か？」 第二に「なぜ？」 「なぜ思い込みを思い込んでいるのか？」</description></item><item><title>【1.3】即断即決の悪い点</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%B3%AA%E5%95%8F%E5%8A%9B%E3%82%92%E9%8D%9B%E3%81%88%E3%82%8B%E6%9C%AC/1.3%E5%8D%B3%E6%96%AD%E5%8D%B3%E6%B1%BA%E3%81%AE%E6%82%AA%E3%81%84%E7%82%B9/</link><pubDate>Tue, 01 Aug 2023 00:41:24 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%B3%AA%E5%95%8F%E5%8A%9B%E3%82%92%E9%8D%9B%E3%81%88%E3%82%8B%E6%9C%AC/1.3%E5%8D%B3%E6%96%AD%E5%8D%B3%E6%B1%BA%E3%81%AE%E6%82%AA%E3%81%84%E7%82%B9/</guid><description>即断即決の悪い点
その時は正確な見方をしているつもりでも、狭く歪んだ見方に頼ってしまっている 即断即決が効果を発揮する状況 その状況について他のことを多く知っている場合のみ 「直感を信じるべきか？」よりも、「どうすればその直感を乗り越えられるか？」と問う方が良い質問 質問を重ねることで、本能を無効化し、自分の無知さに対する無知を軽減できる</description></item><item><title>【1.2】意思決定を行う時の落とし穴</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%B3%AA%E5%95%8F%E5%8A%9B%E3%82%92%E9%8D%9B%E3%81%88%E3%82%8B%E6%9C%AC/1.2%E6%84%8F%E6%80%9D%E6%B1%BA%E5%AE%9A%E3%82%92%E8%A1%8C%E3%81%86%E6%99%82%E3%81%AE%E8%90%BD%E3%81%A8%E3%81%97%E7%A9%B4/</link><pubDate>Tue, 01 Aug 2023 00:39:08 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%B3%AA%E5%95%8F%E5%8A%9B%E3%82%92%E9%8D%9B%E3%81%88%E3%82%8B%E6%9C%AC/1.2%E6%84%8F%E6%80%9D%E6%B1%BA%E5%AE%9A%E3%82%92%E8%A1%8C%E3%81%86%E6%99%82%E3%81%AE%E8%90%BD%E3%81%A8%E3%81%97%E7%A9%B4/</guid><description>意思決定をする際の落とし穴
未知のものを恐れ、安全策をとる方向に意思決定をゆがめてしまう 間違った情報に注目してしまう 自分の予測を過信する 自分の心にある思い込みや偏見に合致する情報に注目してしまう</description></item><item><title>【1.1】難しい決断を行う時</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%B3%AA%E5%95%8F%E5%8A%9B%E3%82%92%E9%8D%9B%E3%81%88%E3%82%8B%E6%9C%AC/1.1%E9%9B%A3%E3%81%97%E3%81%84%E6%B1%BA%E6%96%AD%E3%82%92%E8%A1%8C%E3%81%86%E6%99%82/</link><pubDate>Tue, 01 Aug 2023 00:36:13 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%B3%AA%E5%95%8F%E5%8A%9B%E3%82%92%E9%8D%9B%E3%81%88%E3%82%8B%E6%9C%AC/1.1%E9%9B%A3%E3%81%97%E3%81%84%E6%B1%BA%E6%96%AD%E3%82%92%E8%A1%8C%E3%81%86%E6%99%82/</guid><description>難しい決断
不快で不安なもの 不確実性が伴う 考えることをやめてしまいたいという強い力が存在する 質問により、考えるきっかけを作る 人の脳みそ 本能的に素早く判断してしまう（野生の名残か） 現代社会で野生のように意思決定しなければならないシチュエーションは少ない よりよい決断をするために、時間を使わないのは、悪い決断</description></item><item><title>【0.12】考えを深めるための5つの万能な質問</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%B3%AA%E5%95%8F%E5%8A%9B%E3%82%92%E9%8D%9B%E3%81%88%E3%82%8B%E6%9C%AC/0.12%E8%80%83%E3%81%88%E3%82%92%E6%B7%B1%E3%82%81%E3%82%8B%E3%81%9F%E3%82%81%E3%81%AE5%E3%81%A4%E3%81%AE%E4%B8%87%E8%83%BD%E3%81%AA%E8%B3%AA%E5%95%8F/</link><pubDate>Sun, 30 Jul 2023 21:41:20 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%B3%AA%E5%95%8F%E5%8A%9B%E3%82%92%E9%8D%9B%E3%81%88%E3%82%8B%E6%9C%AC/0.12%E8%80%83%E3%81%88%E3%82%92%E6%B7%B1%E3%82%81%E3%82%8B%E3%81%9F%E3%82%81%E3%81%AE5%E3%81%A4%E3%81%AE%E4%B8%87%E8%83%BD%E3%81%AA%E8%B3%AA%E5%95%8F/</guid><description> ・新しい始点で見るにはどうすればよいか？ ・思い込んでいることはないか？ ・焦って判断しようとしていないか？ ・何か見落としていないか？ ・一番大事なのは何か？</description></item><item><title>【0.11】民主主義の未来は質問にかかっている？</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%B3%AA%E5%95%8F%E5%8A%9B%E3%82%92%E9%8D%9B%E3%81%88%E3%82%8B%E6%9C%AC/0.11%E6%B0%91%E4%B8%BB%E4%B8%BB%E7%BE%A9%E3%81%AE%E6%9C%AA%E6%9D%A5%E3%81%AF%E8%B3%AA%E5%95%8F%E3%81%AB%E3%81%8B%E3%81%8B%E3%81%A3%E3%81%A6%E3%81%84%E3%82%8B/</link><pubDate>Sun, 30 Jul 2023 21:37:57 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%B3%AA%E5%95%8F%E5%8A%9B%E3%82%92%E9%8D%9B%E3%81%88%E3%82%8B%E6%9C%AC/0.11%E6%B0%91%E4%B8%BB%E4%B8%BB%E7%BE%A9%E3%81%AE%E6%9C%AA%E6%9D%A5%E3%81%AF%E8%B3%AA%E5%95%8F%E3%81%AB%E3%81%8B%E3%81%8B%E3%81%A3%E3%81%A6%E3%81%84%E3%82%8B/</guid><description> 「懐疑的な質問ができなくなり、何かが真実であるという人たちに質問したり、権威を疑うことが出来なくなれば、政治的・宗教的ペテンが登場するのを許してしまう」
情報の氾濫による批判的思考力の低下 意思決定能力を向上させるには、批判的思考を磨く必要がある 政治の参加者や消費者としてではなく、自分自身の決定に対しても批判的になる必要がある 個人的決定は、内面の歪んだ認知の影響を受ける 偏見を認識し、厳密な問いかけが必要</description></item><item><title>【0.10】質問により人間関係を深める</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%B3%AA%E5%95%8F%E5%8A%9B%E3%82%92%E9%8D%9B%E3%81%88%E3%82%8B%E6%9C%AC/0.10%E8%B3%AA%E5%95%8F%E3%81%AB%E3%82%88%E3%82%8A%E4%BA%BA%E9%96%93%E9%96%A2%E4%BF%82%E3%82%92%E6%B7%B1%E3%82%81%E3%82%8B/</link><pubDate>Sun, 30 Jul 2023 21:32:35 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%B3%AA%E5%95%8F%E5%8A%9B%E3%82%92%E9%8D%9B%E3%81%88%E3%82%8B%E6%9C%AC/0.10%E8%B3%AA%E5%95%8F%E3%81%AB%E3%82%88%E3%82%8A%E4%BA%BA%E9%96%93%E9%96%A2%E4%BF%82%E3%82%92%E6%B7%B1%E3%82%81%E3%82%8B/</guid><description> 人々は問いによって結ばれている。人々を分断するのは答えだ。
深いつながりにより人生を豊かにする 他者に質問をすることによる基本的な効果 他者を理解し、共感すること 質問をすることで、相手に対して興味があることを示すことができる 近い関係の人に対して、あまり質問をしない傾向がある 批判や意見を言ったりするのではなく、質問をして、それに傾聴する 質問によって、対立する人との関係も改善する可能性がある 会話の道を開くような質問</description></item><item><title>【0.9】なぜ今質問が必要なのか？</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%B3%AA%E5%95%8F%E5%8A%9B%E3%82%92%E9%8D%9B%E3%81%88%E3%82%8B%E6%9C%AC/0.9%E3%81%AA%E3%81%9C%E4%BB%8A%E8%B3%AA%E5%95%8F%E3%81%8C%E5%BF%85%E8%A6%81%E3%81%AA%E3%81%AE%E3%81%8B/</link><pubDate>Sun, 30 Jul 2023 21:29:45 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%B3%AA%E5%95%8F%E5%8A%9B%E3%82%92%E9%8D%9B%E3%81%88%E3%82%8B%E6%9C%AC/0.9%E3%81%AA%E3%81%9C%E4%BB%8A%E8%B3%AA%E5%95%8F%E3%81%8C%E5%BF%85%E8%A6%81%E3%81%AA%E3%81%AE%E3%81%8B/</guid><description>なぜ質問が必要なのか？
物事が指数関数的に変化する時代 既存の知識を更新、修正しながら学び続ける必要性 創造性の発揮 誰しもが創造性を持つ 創造への自信を強化し、その機会を見極めるには質問が必要 正しい質問により、物事に取り組む推進力を生み出す</description></item><item><title>【0.8】自分自身が美しい問いをしているかどうか確認する質問</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%B3%AA%E5%95%8F%E5%8A%9B%E3%82%92%E9%8D%9B%E3%81%88%E3%82%8B%E6%9C%AC/0.8%E8%87%AA%E5%88%86%E8%87%AA%E8%BA%AB%E3%81%8C%E7%BE%8E%E3%81%97%E3%81%84%E5%95%8F%E3%81%84%E3%82%92%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E3%81%8B%E3%81%A9%E3%81%86%E3%81%8B%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8B%E8%B3%AA%E5%95%8F/</link><pubDate>Sun, 30 Jul 2023 21:27:30 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%B3%AA%E5%95%8F%E5%8A%9B%E3%82%92%E9%8D%9B%E3%81%88%E3%82%8B%E6%9C%AC/0.8%E8%87%AA%E5%88%86%E8%87%AA%E8%BA%AB%E3%81%8C%E7%BE%8E%E3%81%97%E3%81%84%E5%95%8F%E3%81%84%E3%82%92%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E3%81%8B%E3%81%A9%E3%81%86%E3%81%8B%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8B%E8%B3%AA%E5%95%8F/</guid><description> ・世間知らずだと思われてもかまわないと思っているか？ ・すぐに答えの出ない質問をすることに抵抗はないか？ ・自分の知っている世界から離れてもかまわないと思っているか？ ・自分の誤りを認められるか？ ・落ち着いて熟考しようとしているか？ 【0.7】質問を習慣化する
美しい問いを発するためには、5つの敵への対処が必要 その敵への対処方法が書いてある</description></item><item><title>【0.7】質問を習慣化する</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%B3%AA%E5%95%8F%E5%8A%9B%E3%82%92%E9%8D%9B%E3%81%88%E3%82%8B%E6%9C%AC/0.7%E8%B3%AA%E5%95%8F%E3%82%92%E7%BF%92%E6%85%A3%E5%8C%96%E3%81%99%E3%82%8B/</link><pubDate>Sun, 30 Jul 2023 21:19:33 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%B3%AA%E5%95%8F%E5%8A%9B%E3%82%92%E9%8D%9B%E3%81%88%E3%82%8B%E6%9C%AC/0.7%E8%B3%AA%E5%95%8F%E3%82%92%E7%BF%92%E6%85%A3%E5%8C%96%E3%81%99%E3%82%8B/</guid><description> 質問の習慣化 5つの敵への対処が必要 恐怖 人前での質問 こわがらず、実際にやってみるのが、恐怖を克服するために最も良い方法 自分自身に対する質問 質問の答えが見つからないことに対する恐怖 重要な質問の多くは、答えがすぐには見つからないという認識を持つ 恐怖への対処のコツ 疑問を持ちながら生きること 疑問に取り組むこと 疑問から学ぶこと すぐに答えが見つからないことを受容すること 知識、偏見、傲慢への対処 自分の知っていることから一歩下がって、新しい考えかたなどを仕入れる 質問して学んだことに基づいて考えを調整する謙虚さと柔軟性を持つ訓練が必要 時間への対処 「その質問には時間をかける価値が本当にあるのか？」という問いを自分自身に対して行う 【0.5】質問の5つの敵
質問の5つの敵が説明されている</description></item><item><title>【0.6】質問によって人間関係で起こってしまう問題</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%B3%AA%E5%95%8F%E5%8A%9B%E3%82%92%E9%8D%9B%E3%81%88%E3%82%8B%E6%9C%AC/0.6%E8%B3%AA%E5%95%8F%E3%81%AB%E3%82%88%E3%81%A3%E3%81%A6%E4%BA%BA%E9%96%93%E9%96%A2%E4%BF%82%E3%81%A7%E8%B5%B7%E3%81%93%E3%81%A3%E3%81%A6%E3%81%97%E3%81%BE%E3%81%86%E5%95%8F%E9%A1%8C/</link><pubDate>Sun, 30 Jul 2023 21:17:58 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%B3%AA%E5%95%8F%E5%8A%9B%E3%82%92%E9%8D%9B%E3%81%88%E3%82%8B%E6%9C%AC/0.6%E8%B3%AA%E5%95%8F%E3%81%AB%E3%82%88%E3%81%A3%E3%81%A6%E4%BA%BA%E9%96%93%E9%96%A2%E4%BF%82%E3%81%A7%E8%B5%B7%E3%81%93%E3%81%A3%E3%81%A6%E3%81%97%E3%81%BE%E3%81%86%E5%95%8F%E9%A1%8C/</guid><description> 質問は親密な人間関係を形成するのに役に立つ 質問をすべきシチュエーションで、意見を述べたり、アドバイスをしてしまいがち 質問するよりも伝えようとしてしまっている</description></item><item><title>【0.5】質問の5つの敵</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%B3%AA%E5%95%8F%E5%8A%9B%E3%82%92%E9%8D%9B%E3%81%88%E3%82%8B%E6%9C%AC/0.5%E8%B3%AA%E5%95%8F%E3%81%AE5%E3%81%A4%E3%81%AE%E6%95%B5/</link><pubDate>Sun, 30 Jul 2023 21:09:42 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%B3%AA%E5%95%8F%E5%8A%9B%E3%82%92%E9%8D%9B%E3%81%88%E3%82%8B%E6%9C%AC/0.5%E8%B3%AA%E5%95%8F%E3%81%AE5%E3%81%A4%E3%81%AE%E6%95%B5/</guid><description> 恐怖 質問は、自分が知っているべきことを知らないことを晒すリスクを伴う 特に社会人にはこのリスクは大きい 知識 専門知識の罠 知っていることに頼りすぎる問題 偏見 生まれつきの性質に起因するものと、経験の少なさに起因するものがある 考える方向が決まると、それに反する問いを考えることが少なくなる 傲慢 なぜ偏見を信じてしまうのか？ &amp;ndash;&amp;gt; 傲慢さのため 謙虚さと問いかけの頻度には関係がある 時間 探索、熟考、批判的思考の時間は少なくなっている 限られた時間でより多くのことをしようと焦ってしまう &amp;ndash;&amp;gt; かえって非効率になるというパラドクス</description></item><item><title>【0.4】どうすればより良い質問者になれるか？</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%B3%AA%E5%95%8F%E5%8A%9B%E3%82%92%E9%8D%9B%E3%81%88%E3%82%8B%E6%9C%AC/0.4%E3%81%A9%E3%81%86%E3%81%99%E3%82%8C%E3%81%B0%E3%82%88%E3%82%8A%E8%89%AF%E3%81%84%E8%B3%AA%E5%95%8F%E8%80%85%E3%81%AB%E3%81%AA%E3%82%8C%E3%82%8B%E3%81%8B/</link><pubDate>Sun, 30 Jul 2023 21:07:24 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%B3%AA%E5%95%8F%E5%8A%9B%E3%82%92%E9%8D%9B%E3%81%88%E3%82%8B%E6%9C%AC/0.4%E3%81%A9%E3%81%86%E3%81%99%E3%82%8C%E3%81%B0%E3%82%88%E3%82%8A%E8%89%AF%E3%81%84%E8%B3%AA%E5%95%8F%E8%80%85%E3%81%AB%E3%81%AA%E3%82%8C%E3%82%8B%E3%81%8B/</guid><description>4歳の女児は質問の達人
知らないという事実に対する十分な認識 改善するために何かをしようとする創意工夫 興味深い問いに対して不思議に思うだけで、脳内の報酬に関わる領域が活性化される
年齢を重ねるごとに、質問の回数は極端に落ちてしまう</description></item><item><title>【0.3】質問の役立て方とは？</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%B3%AA%E5%95%8F%E5%8A%9B%E3%82%92%E9%8D%9B%E3%81%88%E3%82%8B%E6%9C%AC/0.3%E8%B3%AA%E5%95%8F%E3%81%AE%E5%BD%B9%E7%AB%8B%E3%81%A6%E6%96%B9%E3%81%A8%E3%81%AF/</link><pubDate>Sun, 30 Jul 2023 20:48:36 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%B3%AA%E5%95%8F%E5%8A%9B%E3%82%92%E9%8D%9B%E3%81%88%E3%82%8B%E6%9C%AC/0.3%E8%B3%AA%E5%95%8F%E3%81%AE%E5%BD%B9%E7%AB%8B%E3%81%A6%E6%96%B9%E3%81%A8%E3%81%AF/</guid><description> 質問を行う上で必要な能力
批判的思考 意思決定
質問を自分自身に投げかけ、意思決定を行う際にありがちな落とし穴を回避できる 創造力
挑戦的な問いを立てる 始まりに強力な「なぜ」「もしも」の問いを立てる 創造の各プロセスの段階で何を問うべきか知っていると、着実に進んでいくことができる 人間関係
質問によって、好感をもたれやすくなる しかし、適切な質問を適切な方法で行うことが必要 リーダーシップ
リーダーは「組織の質問」を提起しなければならない 質問の役立て方
状況を複数の視点から見る 自分自身の偏見に対して自覚できる 問いを立てる力は筋肉のようなもの
継続的な訓練が必要</description></item><item><title>【0.2】美しい質問とは？</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%B3%AA%E5%95%8F%E5%8A%9B%E3%82%92%E9%8D%9B%E3%81%88%E3%82%8B%E6%9C%AC/0.2%E7%BE%8E%E3%81%97%E3%81%84%E8%B3%AA%E5%95%8F%E3%81%A8%E3%81%AF/</link><pubDate>Sun, 30 Jul 2023 20:43:11 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%B3%AA%E5%95%8F%E5%8A%9B%E3%82%92%E9%8D%9B%E3%81%88%E3%82%8B%E6%9C%AC/0.2%E7%BE%8E%E3%81%97%E3%81%84%E8%B3%AA%E5%95%8F%E3%81%A8%E3%81%AF/</guid><description>美しい質問とは何ですか？
人々の思考を変容させるような問い どんな状況で美しい質問を使うのか？ 意思決定を行うとき 何か新しいものを作るとき 人とつながる 有能で役立つリーダーになりたいとき</description></item><item><title>【0.1】質問の価値とは？</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%B3%AA%E5%95%8F%E5%8A%9B%E3%82%92%E9%8D%9B%E3%81%88%E3%82%8B%E6%9C%AC/0.1%E8%B3%AA%E5%95%8F%E3%81%AE%E4%BE%A1%E5%80%A4%E3%81%A8%E3%81%AF/</link><pubDate>Sun, 30 Jul 2023 20:36:25 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%B3%AA%E5%95%8F%E5%8A%9B%E3%82%92%E9%8D%9B%E3%81%88%E3%82%8B%E6%9C%AC/0.1%E8%B3%AA%E5%95%8F%E3%81%AE%E4%BE%A1%E5%80%A4%E3%81%A8%E3%81%AF/</guid><description>筆者が質問の価値に気付いた時
筆者は新聞記者として働いていた 他人から情報を引き出すものが質問という認識 イノベーションを起こす人の質問の使い方 問いが自らに向いている 問題解決や、独創的なものを作る際に、自問自答から始める傾向がある イノベーションは質問から始まる 成功するスタートアップの発想の原点に「美しい問い」</description></item><item><title>【0】なぜ「質問力が大事なのか？」</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%B3%AA%E5%95%8F%E5%8A%9B%E3%82%92%E9%8D%9B%E3%81%88%E3%82%8B%E6%9C%AC/0%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB/</link><pubDate>Sun, 30 Jul 2023 20:25:27 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%B3%AA%E5%95%8F%E5%8A%9B%E3%82%92%E9%8D%9B%E3%81%88%E3%82%8B%E6%9C%AC/0%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB/</guid><description> 著者はある時期から質問学者と名乗り始めた
誰も異を唱えなかった 問うことに対するみんなの関心の高さ 質問に対してみんなの関心が高いのはなぜ？
難しい状況でも、問いを立てるだけで、よりよい決断や生産的な行動に自らを導くことができる 正しい問いを立てる必要があるという前提が存在する 世の中にある本とこの本の違い
世の中にある無数の本 -&amp;gt; 答えだけ書いてある 背景にある哲学 そもそも、仕事や人生の問題には自分で答えを出していくしかない 自分で答えを出すためのツールが質問</description></item><item><title>【1】自分の決断に疑問を持つ</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%B3%AA%E5%95%8F%E5%8A%9B%E3%82%92%E9%8D%9B%E3%81%88%E3%82%8B%E6%9C%AC/1%E8%87%AA%E5%88%86%E3%81%AE%E6%B1%BA%E6%96%AD%E3%81%AB%E7%96%91%E5%95%8F%E3%82%92%E6%8C%81%E3%81%A4/</link><pubDate>Sun, 30 Jul 2023 20:18:46 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%B3%AA%E5%95%8F%E5%8A%9B%E3%82%92%E9%8D%9B%E3%81%88%E3%82%8B%E6%9C%AC/1%E8%87%AA%E5%88%86%E3%81%AE%E6%B1%BA%E6%96%AD%E3%81%AB%E7%96%91%E5%95%8F%E3%82%92%E6%8C%81%E3%81%A4/</guid><description>現代社会では、決断のための時間が十分に無く、直感で物事を決めがち
直感による判断の正答率はそれほど高くはない 感覚や感情ではなく、証拠を集めるべき
外部の情報源や異なる視点からの意見など 選択肢をもっと増やして検討するべき</description></item><item><title>2.人の目を見て話す</title><link>https://dddsuz2.github.io/suzmemo/2.%E4%BA%BA%E3%81%AE%E7%9B%AE%E3%82%92%E8%A6%8B%E3%81%A6%E8%A9%B1%E3%81%99/</link><pubDate>Tue, 25 Jul 2023 01:08:51 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/2.%E4%BA%BA%E3%81%AE%E7%9B%AE%E3%82%92%E8%A6%8B%E3%81%A6%E8%A9%B1%E3%81%99/</guid><description>人の目を見て話せるとき
1対1で向かい合って話している時 人の目を見て話せないとき
急に話しかけられた時 緊張している時、テンパっている時 話に集中していない時 人の目を見て話すメリット
人の話を聞くことに集中できる 他のことを考えたり、人の話を聞いている最中に考え事をしてしまう事象減らす 相手に興味があると示すことができる 人の目を見て話すデメリット
強いて言うなら、威圧感を与える可能性がある</description></item><item><title>【書誌】質問力を鍛える本</title><link>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%B3%AA%E5%95%8F%E5%8A%9B%E3%82%92%E9%8D%9B%E3%81%88%E3%82%8B%E6%9C%AC/%E6%9B%B8%E8%AA%8C%E8%B3%AA%E5%95%8F%E5%8A%9B%E3%82%92%E9%8D%9B%E3%81%88%E3%82%8B%E6%9C%AC/</link><pubDate>Fri, 21 Jul 2023 01:36:57 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/books/%E6%9B%B8%E8%AA%8C/%E8%B3%AA%E5%95%8F%E5%8A%9B%E3%82%92%E9%8D%9B%E3%81%88%E3%82%8B%E6%9C%AC/%E6%9B%B8%E8%AA%8C%E8%B3%AA%E5%95%8F%E5%8A%9B%E3%82%92%E9%8D%9B%E3%81%88%E3%82%8B%E6%9C%AC/</guid><description>目次
はじめに　なぜ「質問力」が大切なのか？
私は質問学者（questionologist）だ／決断，創造，人間関係，リーダーシップに質問はどのように役立つか？／4歳の女児から学ぶ／質問の五つの敵／質問を習慣化する／なぜ今，質問が重要なのか？／質問が人間関係を強める／民主主義の未来は質問にかかっている？
第1章　よりよい意思決定のための質問
なぜ自分の決断に疑問をもたなければならないのか？／なぜ私は自分が信じていることを信じているのか（ 間違っていたらどうしよう？）／戦士か偵察兵か／言われたことを受け入れなければならないのか？／批判的思考に自分の思惑が入り込んでいないか？／「イエスかノーか」ではない決断／部外者ならどうするか？／絶対に失敗しないなら何をする？／恐怖心に対して，質問はどう役立つか？／「未来の私」なら何を決めるか？／自分が進化し，活躍できるのはどの選択肢か？／この決断を後で他人にどう説明するか？／私のテニスボールは何か？
第2章　創造性を引き出すための質問
なぜ創造するのか？／私の創造性はどこへ行った？／問題を探しに行くとしたら？／世界に足りないものは何か？／なぜこれが私の問題なのか？／私の亀の甲羅はどこ？／私のゴールデンタイムはいつか？／私は蝶を殺したいのだろうか？／どこからでも始められるようにしたら？／どうすれば行き詰まりから脱することができるか？／私は「公開」する準備ができているだろうか？／終わらせたいのか，改善したいのか？／どうすれば常に「途上」にいられるか？
第3章　他者とのつながりを深めるための質問
なぜつながるのか？／「お元気ですか」を超えてみたら？／どうすれば全身で聴けるか？／アドバイスを減らして，もっと質問したら？ ／批判していることについて，自分に思い当たる節がないか？／決めつけを好奇心に置き換えたらどうだろう？／どうすれば自分の偏見を認知できるか？／どうすればより強いパートナーシップを築けるか？／求めるのは正しさか，平安か？／質問によって職場での人間関係を築けるか？／管理職が「下に質問する」のが難しいのはなぜか？／セールスの売り込みを「質問の売り込み」に置き換えたら？
第4章　より強いリーダーとなるための質問
「この間違いを正すために何ができる？」／なぜ私はリーダーになるのか？／謙虚になる自信があるか？／リーダーシップを発揮するために，なぜ身を引かなければならないのか？／私の行動規範は何か？／私にできる最低限のことは何だろうか？／どうすれば「自らを廃業に追い込む」ような会社になれるのか？／外で何が起こっているのか，何か手伝えることはあるか？／探すのは，壊れたものか，うまくいっているものか？／私は本当に好奇心に満ちた文化を望んでいるのだろうか？／どうしたら安心して質問ができ，やりがいを感じられ，生産的になれるか？
おわりに　問いかける人生
質問をどうやって行動に移すか？／「質問筋肉」をどうウォーミングアップするか？／よりよい質問をつくれるか？／自分に備わっている「デタラメ検出器」を試すには？／周りの世界を新鮮な目で見たらどうだろうか？／どのように（誰と）打ち解けたらよいか？／自分にインタビューしてみたら？／質問で家族の絆を強められるか？／「宣言」を「宣言質問」に変えてみたら？／どうすればほかの人にもっと質問してもらえるだろうか？／私の「大きな美しい質問」は？
謝辞
質問リスト 【0】はじめに
【0.1】質問の価値とは？
【0.2】美しい質問とは？
【0.3】質問の役立て方とは？
【0.4】どうすればより良い質問者になれるか？
【0.5】質問の5つの敵
【0.6】質問によって人間関係で起こってしまう問題
【0.7】質問を習慣化する
【0.8】自分自身が美しい問いをしているかどうか確認する質問
【0.9】なぜ今質問が必要なのか？
【0.10】質問により人間関係を深める
【0.11】民主主義の未来は質問にかかっている？
【0.12】考えを深めるための5つの万能な質問
【1】自分の決断に疑問を持つ</description></item><item><title>1.基本的な姿勢</title><link>https://dddsuz2.github.io/suzmemo/1.%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AA%E5%A7%BF%E5%8B%A2/</link><pubDate>Sat, 15 Jul 2023 22:05:13 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/1.%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AA%E5%A7%BF%E5%8B%A2/</guid><description> あらゆるものは「問いの集合体である」という考え方
それについて、考える/考えない、答える/答えない は自分の好きなように選択する 全てのことに対して疑問を持つことが可能
ニラジ氏が言ってた「五感を磨く」って、「全てのことに対して疑問が持てるような感覚を磨く」ってことなのかなと少し思った
【参考】https://www.youtube.com/watch?v=18mwiVRIFBc</description></item><item><title>【Splunk Enterprise 1】Splunkの主要コンポーネント</title><link>https://dddsuz2.github.io/suzmemo/splunk-enterprise-1splunk%E3%81%AE%E4%B8%BB%E8%A6%81%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88/</link><pubDate>Mon, 10 Jul 2023 22:25:40 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/splunk-enterprise-1splunk%E3%81%AE%E4%B8%BB%E8%A6%81%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88/</guid><description> Instance
Splunk が起動しているサーバーのこと StandAlone: 単独サーバーのみで、input, parse, index, search を行う構成のこと Distributed: 複数のサーバーで、input, parse, index, search を行う構成のこと Forwader
データを Indexer または別の Forwarder に対して転送するコンポーネント Indexer
データをインデックス化し、raw data をイベントに変換する 検索リクエストに応じて、インデックス化されたデータを検索する Distributed なデプロイメントの場合 Search Head と呼ばれるコンポーネントが検索管理を行い、複数の Indexer 間で検索を調整する この場合、個々の Indexer は「検索ピア」と呼ばれる Index
Splunk によって検索可能な形式に変換された raw data のこと Deployment-Server
任意の数のインスタンスの設定をまとめて管理するインスタンス Deployment-Client
Deployment-Server によってリモートで設定を管理されるインスタンス</description></item></channel></rss>