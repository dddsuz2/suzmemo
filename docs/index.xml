<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>suzmemo</title><link>https://dddsuz2.github.io/suzmemo/</link><description>Recent content on suzmemo</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Sat, 12 Aug 2023 21:09:11 +0900</lastBuildDate><atom:link href="https://dddsuz2.github.io/suzmemo/index.xml" rel="self" type="application/rss+xml"/><item><title>プラグインの導入</title><link>https://dddsuz2.github.io/suzmemo/%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3%E3%81%AE%E5%B0%8E%E5%85%A5/</link><pubDate>Sat, 12 Aug 2023 21:09:11 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3%E3%81%AE%E5%B0%8E%E5%85%A5/</guid><description> 現在はvim-plugを導入している プラグインの導入方法 ~/.config/nvim/init.vimに以下の内容を追記する &amp;#34; vim-plugの初期化 call plug#begin(&amp;#39;~/.local/share/nvim/plugged&amp;#39;) &amp;#34; プラグインを指定してインストール Plug &amp;#39;ユーザー名/リポジトリ名&amp;#39; &amp;#34; GitHubのユーザー名とリポジトリ名を指定 &amp;#34; 他のプラグインをここに追加 &amp;#34; vim-plugの終了 call plug#end() Plug ...でプラグインを追加した後、vimを再起動 :PlugInstallでインストールされる</description></item><item><title>【13.3.8】ほかのPythonコードの入手方法</title><link>https://dddsuz2.github.io/suzmemo/13.3.8%E3%81%BB%E3%81%8B%E3%81%AEpython%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AE%E5%85%A5%E6%89%8B%E6%96%B9%E6%B3%95/</link><pubDate>Wed, 09 Aug 2023 22:34:00 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/13.3.8%E3%81%BB%E3%81%8B%E3%81%AEpython%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AE%E5%85%A5%E6%89%8B%E6%96%B9%E6%B3%95/</guid><description> PyPI Github ActiveState</description></item><item><title>【13.3.7】ランダムな値</title><link>https://dddsuz2.github.io/suzmemo/13.3.7%E3%83%A9%E3%83%B3%E3%83%80%E3%83%A0%E3%81%AA%E5%80%A4/</link><pubDate>Wed, 09 Aug 2023 22:24:22 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/13.3.7%E3%83%A9%E3%83%B3%E3%83%80%E3%83%A0%E3%81%AA%E5%80%A4/</guid><description>random.choiceで引数のシーケンス、（リスト、タプル、辞書、文字列）から値を1つランダムに選んで返すことができる &amp;gt;&amp;gt;&amp;gt; from random import choice &amp;gt;&amp;gt;&amp;gt; choice([23, 9, 46, &amp;#39;bacon&amp;#39;, 0x123abc]) 46 &amp;gt;&amp;gt;&amp;gt; choice(range(100)) 18 &amp;gt;&amp;gt;&amp;gt; choice(&amp;#39;alphabet&amp;#39;) &amp;#39;a&amp;#39; sample()を使えば、複数の値をまとめて返せる &amp;gt;&amp;gt;&amp;gt; from random import sample &amp;gt;&amp;gt;&amp;gt; sample([23, 9, 46, &amp;#39;bacon&amp;#39;, 0x123abc], 3) [1194684, 9, 23] &amp;gt;&amp;gt;&amp;gt; sample(range(100), 4) [9, 3, 17, 89] &amp;gt;&amp;gt;&amp;gt; sample(&amp;#39;alphabet&amp;#39;, 7) [&amp;#39;a&amp;#39;, &amp;#39;t&amp;#39;, &amp;#39;l&amp;#39;, &amp;#39;p&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;a&amp;#39;, &amp;#39;h&amp;#39;] 任意の範囲からランダムな整数を取り出したいとき、randint()やrandrange()を使えばいい &amp;gt;&amp;gt;&amp;gt; randint(38, 74) 73 &amp;gt;&amp;gt;&amp;gt; randint(38, 74) 73 &amp;gt;&amp;gt;&amp;gt; randint(38, 74) 62 &amp;gt;&amp;gt;&amp;gt; randrange(38, 74) 52 &amp;gt;&amp;gt;&amp;gt; randrange(38, 74, 10) 48 &amp;gt;&amp;gt;&amp;gt; randrange(38, 74, 10) 68 0.</description></item><item><title>【13.3.6】pprintによるきれいな表示</title><link>https://dddsuz2.github.io/suzmemo/13.3.6pprint%E3%81%AB%E3%82%88%E3%82%8B%E3%81%8D%E3%82%8C%E3%81%84%E3%81%AA%E8%A1%A8%E7%A4%BA/</link><pubDate>Wed, 09 Aug 2023 22:21:58 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/13.3.6pprint%E3%81%AB%E3%82%88%E3%82%8B%E3%81%8D%E3%82%8C%E3%81%84%E3%81%AA%E8%A1%A8%E7%A4%BA/</guid><description> pprint()を使うと、整形して結果を出力してくれる &amp;gt;&amp;gt;&amp;gt; from pprint import pprint &amp;gt;&amp;gt;&amp;gt; quotes = OrderedDict([ ... (&amp;#39;Moe&amp;#39;, &amp;#39;A wise guy, huh?&amp;#39;), ... (&amp;#39;Larry&amp;#39;, &amp;#39;Ow!&amp;#39;), ... (&amp;#39;Curly&amp;#39;, &amp;#39;Nyuk, nyuk!&amp;#39;), ... ]) &amp;gt;&amp;gt;&amp;gt; print(quotes) OrderedDict([(&amp;#39;Moe&amp;#39;, &amp;#39;A wise guy, huh?&amp;#39;), (&amp;#39;Larry&amp;#39;, &amp;#39;Ow!&amp;#39;), (&amp;#39;Curly&amp;#39;, &amp;#39;Nyuk, nyuk!&amp;#39;)]) &amp;gt;&amp;gt;&amp;gt; pprint(quotes) OrderedDict([(&amp;#39;Moe&amp;#39;, &amp;#39;A wise guy, huh?&amp;#39;), (&amp;#39;Larry&amp;#39;, &amp;#39;Ow!&amp;#39;), (&amp;#39;Curly&amp;#39;, &amp;#39;Nyuk, nyuk!&amp;#39;)])</description></item><item><title>【13.3.5】itertoolsによるコード構造の反復処理</title><link>https://dddsuz2.github.io/suzmemo/13.3.5itertools%E3%81%AB%E3%82%88%E3%82%8B%E3%82%B3%E3%83%BC%E3%83%89%E6%A7%8B%E9%80%A0%E3%81%AE%E5%8F%8D%E5%BE%A9%E5%87%A6%E7%90%86/</link><pubDate>Wed, 09 Aug 2023 22:11:45 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/13.3.5itertools%E3%81%AB%E3%82%88%E3%82%8B%E3%82%B3%E3%83%BC%E3%83%89%E6%A7%8B%E9%80%A0%E3%81%AE%E5%8F%8D%E5%BE%A9%E5%87%A6%E7%90%86/</guid><description> itertoolsには、特別な目的を持つイテレータ関数が含まれている
for &amp;hellip; in ループ内で呼び出されると、一度に1個の要素を返し、呼び出しの間も自分の状態を覚えている chain()は、引数全体が1つのイテラブルであるかのように扱い、その中の要素を反復処理する
&amp;gt;&amp;gt;&amp;gt; import itertools &amp;gt;&amp;gt;&amp;gt; for item in itertools.chain([1, 2], [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;]): ... print(item) ... 1 2 a cycle()は無限イテレータで、引数から循環的に要素を返す import itertools for item in itertools.cycle([1, 2]): print(item) accumulate()は、それまでの要素を1つにまとめた値を計算する デフォルトでは、和を計算する sicpのってたよな&amp;hellip; 第2引数として関数を受け付けることもできる import itertools for item in itertools.accumulate([1, 2, 3, 4]): print(item) 1 3 6 10 import itertools def multiply(a, b): return a * b for item in itertools.accumulate([1, 2, 3, 4], multiply): print(item) ... 1 2 6 24</description></item><item><title>【13.3.4】スタック+キュー==デック</title><link>https://dddsuz2.github.io/suzmemo/13.3.4%E3%82%B9%E3%82%BF%E3%83%83%E3%82%AF-%E3%82%AD%E3%83%A5%E3%83%BC%E3%83%87%E3%83%83%E3%82%AF/</link><pubDate>Wed, 09 Aug 2023 22:06:20 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/13.3.4%E3%82%B9%E3%82%BF%E3%83%83%E3%82%AF-%E3%82%AD%E3%83%A5%E3%83%BC%E3%83%87%E3%83%83%E3%82%AF/</guid><description> deque デック、両端キューのこと シーケンスのどちらの端でも要素を追加、削除できるようにしたいときに使う &amp;gt;&amp;gt;&amp;gt; from collections import deque &amp;gt;&amp;gt;&amp;gt; def palindrome(word): ... dq = deque(word) ... while len(dq) &amp;gt; 1: ... if dq.popleft() != dq.pop(): ... return False ... return True ... &amp;gt;&amp;gt;&amp;gt; palindrome(&amp;#39;a&amp;#39;) True &amp;gt;&amp;gt;&amp;gt; palindrome(&amp;#39;racecar&amp;#39;) True &amp;gt;&amp;gt;&amp;gt; palindrome(&amp;#39;&amp;#39;) True &amp;gt;&amp;gt;&amp;gt; palindrome(&amp;#39;rader&amp;#39;) False 高速な回文チェッカーが本当に必要なら、文字列を逆順の文字列と比較した方がはるかに高速 &amp;gt;&amp;gt;&amp;gt; def another_palindrome(word): ... return word == word[::-1] ... &amp;gt;&amp;gt;&amp;gt; another_palindrome(&amp;#39;rader&amp;#39;) False &amp;gt;&amp;gt;&amp;gt; another_palindrome(&amp;#39;radar&amp;#39;) True &amp;gt;&amp;gt;&amp;gt; another_palindrome(&amp;#39;halibut&amp;#39;) False</description></item><item><title>【13.3.3】OrderedDictによるキー順のソート</title><link>https://dddsuz2.github.io/suzmemo/13.3.3ordereddict%E3%81%AB%E3%82%88%E3%82%8B%E3%82%AD%E3%83%BC%E9%A0%86%E3%81%AE%E3%82%BD%E3%83%BC%E3%83%88/</link><pubDate>Wed, 09 Aug 2023 22:03:52 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/13.3.3ordereddict%E3%81%AB%E3%82%88%E3%82%8B%E3%82%AD%E3%83%BC%E9%A0%86%E3%81%AE%E3%82%BD%E3%83%BC%E3%83%88/</guid><description>&amp;gt;&amp;gt;&amp;gt; from collections import OrderedDict &amp;gt;&amp;gt;&amp;gt; quotes = OrderedDict([ ... (&amp;#39;Moe&amp;#39;, &amp;#39;A wise guy, huh?&amp;#39;), ... (&amp;#39;Larry&amp;#39;, &amp;#39;Ow!&amp;#39;), ... (&amp;#39;Curly&amp;#39;, &amp;#39;Nyuk nyuk!&amp;#39;), ... ]) &amp;gt;&amp;gt;&amp;gt; for stooge in quotes: ... print(stooge) ... Moe Larry Curly</description></item><item><title>【13.3.2】Counterによる要素数の計算</title><link>https://dddsuz2.github.io/suzmemo/13.3.2counter%E3%81%AB%E3%82%88%E3%82%8B%E8%A6%81%E7%B4%A0%E6%95%B0%E3%81%AE%E8%A8%88%E7%AE%97/</link><pubDate>Wed, 09 Aug 2023 21:47:34 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/13.3.2counter%E3%81%AB%E3%82%88%E3%82%8B%E8%A6%81%E7%B4%A0%E6%95%B0%E3%81%AE%E8%A8%88%E7%AE%97/</guid><description>&amp;gt;&amp;gt;&amp;gt; from collections import Counter &amp;gt;&amp;gt;&amp;gt; breakfast = [&amp;#39;spam&amp;#39;, &amp;#39;spam&amp;#39;, &amp;#39;eggs&amp;#39;, &amp;#39;spam&amp;#39;] &amp;gt;&amp;gt;&amp;gt; breakfast_counter = Counter(breakfast) &amp;gt;&amp;gt;&amp;gt; breakfast_counter Counter({&amp;#39;spam&amp;#39;: 3, &amp;#39;eggs&amp;#39;: 1}) most_common()関数は、全ての要素を降順で返す &amp;gt;&amp;gt;&amp;gt; breakfast_counter.most_common() [(&amp;#39;spam&amp;#39;, 3), (&amp;#39;eggs&amp;#39;, 1)] &amp;gt;&amp;gt;&amp;gt; breakfast_counter.most_common(1) [(&amp;#39;spam&amp;#39;, 3)] カウンタを結合することもできる &amp;gt;&amp;gt;&amp;gt; breakfast_counter Counter({&amp;#39;spam&amp;#39;: 3, &amp;#39;eggs&amp;#39;: 1}) &amp;gt;&amp;gt;&amp;gt; lunch = [&amp;#39;eggs&amp;#39;, &amp;#39;eggs&amp;#39;, &amp;#39;bacon&amp;#39;] &amp;gt;&amp;gt;&amp;gt; lunch_counter = Counter(lunch) &amp;gt;&amp;gt;&amp;gt; lunch_counter Counter({&amp;#39;eggs&amp;#39;: 2, &amp;#39;bacon&amp;#39;: 1}) &amp;gt;&amp;gt;&amp;gt; breakfast_counter + lunch_counter Counter({&amp;#39;spam&amp;#39;: 3, &amp;#39;eggs&amp;#39;: 3, &amp;#39;bacon&amp;#39;: 1}) &amp;gt;&amp;gt;&amp;gt; breakfast_counter - lunch_counter Counter({&amp;#39;spam&amp;#39;: 3}) &amp;gt;&amp;gt;&amp;gt; lunch_counter - breakfast_counter Counter({&amp;#39;eggs&amp;#39;: 1, &amp;#39;bacon&amp;#39;: 1}) &amp;gt;&amp;gt;&amp;gt; breakfast_counter &amp;amp; lunch_counter Counter({&amp;#39;eggs&amp;#39;: 1}) &amp;gt;&amp;gt;&amp;gt; breakfast_counter | lunch_counter Counter({&amp;#39;spam&amp;#39;: 3, &amp;#39;eggs&amp;#39;: 2, &amp;#39;bacon&amp;#39;: 1})</description></item><item><title>【13.3.1】setdefaultとdefaultdictによる存在しないキーの処理</title><link>https://dddsuz2.github.io/suzmemo/13.3.1setdefault%E3%81%A8defaultdict%E3%81%AB%E3%82%88%E3%82%8B%E5%AD%98%E5%9C%A8%E3%81%97%E3%81%AA%E3%81%84%E3%82%AD%E3%83%BC%E3%81%AE%E5%87%A6%E7%90%86/</link><pubDate>Wed, 09 Aug 2023 21:44:46 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/13.3.1setdefault%E3%81%A8defaultdict%E3%81%AB%E3%82%88%E3%82%8B%E5%AD%98%E5%9C%A8%E3%81%97%E3%81%AA%E3%81%84%E3%82%AD%E3%83%BC%E3%81%AE%E5%87%A6%E7%90%86/</guid><description>setdefault()とdefaultdict()による存在しないキーの処理 &amp;gt;&amp;gt;&amp;gt; periodic_table = {&amp;#39;Hydrogen&amp;#39;: 1, &amp;#39;Helium&amp;#39;: 2} &amp;gt;&amp;gt;&amp;gt; periodic_table {&amp;#39;Hydrogen&amp;#39;: 1, &amp;#39;Helium&amp;#39;: 2} &amp;gt;&amp;gt;&amp;gt; carbon = periodic_table.setdefault(&amp;#39;Carbon&amp;#39;, 12) &amp;gt;&amp;gt;&amp;gt; carbon 12 &amp;gt;&amp;gt;&amp;gt; periodic_table {&amp;#39;Hydrogen&amp;#39;: 1, &amp;#39;Helium&amp;#39;: 2, &amp;#39;Carbon&amp;#39;: 12} &amp;gt;&amp;gt;&amp;gt; helium = periodic_table.setdefault(&amp;#39;Helium&amp;#39;, 947) &amp;gt;&amp;gt;&amp;gt; helium 2 &amp;gt;&amp;gt;&amp;gt; periodic_table {&amp;#39;Hydrogen&amp;#39;: 1, &amp;#39;Helium&amp;#39;: 2, &amp;#39;Carbon&amp;#39;: 12} &amp;gt;&amp;gt;&amp;gt; from collections import defaultdict &amp;gt;&amp;gt;&amp;gt; periodic_table = defaultdict(int) &amp;gt;&amp;gt;&amp;gt; periodic_table[&amp;#39;Hydrogen&amp;#39;] = 1 &amp;gt;&amp;gt;&amp;gt; periodic_table[&amp;#39;Lead&amp;#39;] 0 &amp;gt;&amp;gt;&amp;gt; periodic_table defaultdict(&amp;lt;class &amp;#39;int&amp;#39;&amp;gt;, {&amp;#39;Hydrogen&amp;#39;: 1, &amp;#39;Lead&amp;#39;: 0}) &amp;gt;&amp;gt;&amp;gt; from collections import defaultdict &amp;gt;&amp;gt;&amp;gt; def no_idea(): .</description></item><item><title>【13.3】Python標準ライブラリ</title><link>https://dddsuz2.github.io/suzmemo/13.3python%E6%A8%99%E6%BA%96%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA/</link><pubDate>Wed, 09 Aug 2023 21:34:08 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/13.3python%E6%A8%99%E6%BA%96%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA/</guid><description> Pythonの有名な宣伝文句の一つが、「バッテリー同梱」 Pythonコードを書くときは、書こうとしている機能の標準モジュールを探してみると良い</description></item><item><title>【13.2.4】モジュールかオブジェクトか</title><link>https://dddsuz2.github.io/suzmemo/13.2.4%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%8B%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%8B/</link><pubDate>Wed, 09 Aug 2023 21:30:59 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/13.2.4%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%8B%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%8B/</guid><description> コードをモジュールでまとめるかオブジェクトにまとめるか モジュール内のすべてのクラス、関数、グローバル変数は、すべて外部から参照できる オブジェクトは、プロパティとダンダー(__)名を使って、データ属性に対してアクセスを制御できる</description></item><item><title>【13.2.3】名前空間パッケージ</title><link>https://dddsuz2.github.io/suzmemo/13.2.3%E5%90%8D%E5%89%8D%E7%A9%BA%E9%96%93%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8/</link><pubDate>Wed, 09 Aug 2023 21:17:27 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/13.2.3%E5%90%8D%E5%89%8D%E7%A9%BA%E9%96%93%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8/</guid><description> Pythonモジュールは、次の二つの形でパッケージングできる
単一のモジュール パッケージ 名前空間パッケージ
パッケージを複数のディレクトリに分割する critters - rougarou.py - wendigo.py from critters import rougarou, wendigo</description></item><item><title>【13.2.2】相対インポートと絶対インポート</title><link>https://dddsuz2.github.io/suzmemo/13.2.2%E7%9B%B8%E5%AF%BE%E3%82%A4%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%88%E3%81%A8%E7%B5%B6%E5%AF%BE%E3%82%A4%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%88/</link><pubDate>Tue, 08 Aug 2023 17:54:19 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/13.2.2%E7%9B%B8%E5%AF%BE%E3%82%A4%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%88%E3%81%A8%E7%B5%B6%E5%AF%BE%E3%82%A4%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%88/</guid><description>Pythonでは以下のインポート方法をサポートする
相対インポート
絶対インポート
絶対インポート
検索パスに含まれる個々のディレクトリでインポートされたファイル名のファイルか、ディレクトリを探す 相対インポート
呼び出し元のプログラムから、相対パスでインポートできる 呼び出し元プログラムと同じディレクトリにある場合 from . import module 呼び出し元プログラムの親ディレクトリにある場合 from .. import module 呼び出し元プログラムの兄弟ディレクトリにある場合 from ..folder_name import module</description></item><item><title>【13.2.1】モジュール検索パス</title><link>https://dddsuz2.github.io/suzmemo/13.2.1%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E6%A4%9C%E7%B4%A2%E3%83%91%E3%82%B9/</link><pubDate>Tue, 08 Aug 2023 17:36:52 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/13.2.1%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E6%A4%9C%E7%B4%A2%E3%83%91%E3%82%B9/</guid><description> Pythonディレクトリが参照するすべての場所は、標準ライブラリのsysモジュールをimportしてそのpathを見ればわかる &amp;gt;&amp;gt;&amp;gt; import sys &amp;gt;&amp;gt;&amp;gt; for place in sys.path: ... print(place) ... /home/linuxbrew/.linuxbrew/Cellar/python@3.9/3.9.12/lib/python39.zip /home/linuxbrew/.linuxbrew/Cellar/python@3.9/3.9.12/lib/python3.9 /home/linuxbrew/.linuxbrew/Cellar/python@3.9/3.9.12/lib/python3.9/lib-dynload /home/linuxbrew/.linuxbrew/Cellar/python@3.9/3.9.12/lib/python3.9/site-packages 最初の行の空行はカレントディレクトリ import fastの場合はfast.pyをまず探す 検索パスは変更できる import sys sys.path.insert(0, &amp;#34;/my/modules&amp;#34;)</description></item><item><title>【13.2】パッケージ</title><link>https://dddsuz2.github.io/suzmemo/13.2%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8/</link><pubDate>Tue, 08 Aug 2023 17:28:44 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/13.2%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8/</guid><description> パッケージと呼ばれる階層構造にモジュールをまとめることができる .pyファイルを格納するサブディレクトリのこと questions.py from choices import advice fast print(&amp;#34;Let&amp;#39;s go to&amp;#34;, fast.pick()) print(&amp;#34;Should we take out?&amp;#34;, advice.give()) choices/fast.py from random import choice places = [&amp;#34;McDonalds&amp;#34;, &amp;#34;KFC&amp;#34;, &amp;#34;Burger King&amp;#34;, &amp;#34;Taco Bell&amp;#34;, &amp;#34;Wendy&amp;#34;, &amp;#34;Arbys&amp;#34;, &amp;#34;Pizza Hut&amp;#34;] def pick(): return choice(places) choices/advice.py from random import choice answers = [&amp;#34;Yes!&amp;#34;, &amp;#34;No!&amp;#34;, &amp;#34;Reply hazy&amp;#34;, &amp;#34;Sorry, what?&amp;#34;] def give(): return choice(answers) Pythonのバージョンが3.3よりも前の場合、choiceディレクトリをPythonパッケージにするためには、__init__.pyという名前のファイルを入れなければならなかった ファイルの内容は空で良い</description></item><item><title>【13.3】必要なものだけインポートするには</title><link>https://dddsuz2.github.io/suzmemo/13.3%E5%BF%85%E8%A6%81%E3%81%AA%E3%82%82%E3%81%AE%E3%81%A0%E3%81%91%E3%82%A4%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%88%E3%81%99%E3%82%8B%E3%81%AB%E3%81%AF/</link><pubDate>Tue, 08 Aug 2023 17:25:53 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/13.3%E5%BF%85%E8%A6%81%E3%81%AA%E3%82%82%E3%81%AE%E3%81%A0%E3%81%91%E3%82%A4%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%88%E3%81%99%E3%82%8B%E3%81%AB%E3%81%AF/</guid><description> モジュールは全体でも、一部だけでもインポートできる fast4.py from fast import pick place = pick() print(&amp;#34;Let&amp;#39;s go to&amp;#34;, place) fast5.py from fast import pick as who_cares place = who_cares() print(&amp;#34;Let&amp;#39;s go to&amp;#34;, place)</description></item><item><title>【13.1.1】別名によるモジュールのimport</title><link>https://dddsuz2.github.io/suzmemo/13.1.1%E5%88%A5%E5%90%8D%E3%81%AB%E3%82%88%E3%82%8B%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%AEimport/</link><pubDate>Tue, 08 Aug 2023 17:24:01 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/13.1.1%E5%88%A5%E5%90%8D%E3%81%AB%E3%82%88%E3%82%8B%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%AEimport/</guid><description> どこかに同じ名前のモジュールがある
もっと使いやすい名前がいい
こういうときには別名を使ってimportする
import fast as f place = f.pick() print(&amp;#34;Let&amp;#39;s go to&amp;#39;, place)</description></item><item><title>【13.1】モジュールのimport</title><link>https://dddsuz2.github.io/suzmemo/13.1%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%AEimport/</link><pubDate>Tue, 08 Aug 2023 17:14:22 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/13.1%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%AEimport/</guid><description> import module import文の最も単純な書き方 fast.py &amp;gt;&amp;gt;&amp;gt; from random import choice &amp;gt;&amp;gt;&amp;gt; places = [&amp;#39;McDonalds&amp;#39;, &amp;#39;KFC&amp;#39;, &amp;#39;Burger King&amp;#39;, &amp;#39;Taco Bell&amp;#39;, &amp;#39;Wendys&amp;#39;, &amp;#39;Arbys&amp;#39;, &amp;#39;Pizza Hut&amp;#39;] &amp;gt;&amp;gt;&amp;gt; def pick(): ... return choice(places) lunch.py &amp;gt;&amp;gt;&amp;gt; import fast &amp;gt;&amp;gt;&amp;gt; place = fast.pick() &amp;gt;&amp;gt;&amp;gt; print(&amp;#34;Let&amp;#39;s go to&amp;#34;, place) メインプログラムのlunch.pyは、fastをインポートしている
fast.pyは、randomモジュールからchoice関数をインポートしている
メインプログラムと自作モジュールではインポートの方法が異なる
第一のインポートでは、fastモジュール全体をインポートしている pickを呼び出すためには、fastというプレフィックスをつけなければならない モジュールの名前でモジュールの内容を修飾することにより、名前の衝突が避けられる 第2のインポートでは、randomモジュールから直接choice関数をインポートしている（名前衝突がないことがわかっているため） 関数の中でimportしてもよい</description></item><item><title>【13】モジュールとimport文</title><link>https://dddsuz2.github.io/suzmemo/13%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%A8import%E6%96%87/</link><pubDate>Tue, 08 Aug 2023 17:13:33 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/13%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%A8import%E6%96%87/</guid><description> モジュールとは、Pythonコードをまとめたファイル モジュールのコードはimport文で参照する</description></item><item><title>【12.15】attrs</title><link>https://dddsuz2.github.io/suzmemo/12.15attrs/</link><pubDate>Tue, 08 Aug 2023 15:13:59 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/12.15attrs/</guid><description> attrsを使ってオブジェクトを定義するのがいいらしい The One Python Library Everyone Needs曰く　</description></item><item><title>【12.14】データクラス</title><link>https://dddsuz2.github.io/suzmemo/12.14%E3%83%87%E3%83%BC%E3%82%BF%E3%82%AF%E3%83%A9%E3%82%B9/</link><pubDate>Tue, 08 Aug 2023 15:05:16 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/12.14%E3%83%87%E3%83%BC%E3%82%BF%E3%82%AF%E3%83%A9%E3%82%B9/</guid><description>データ格納のためのオブジェクト
メソッドは定義されない
旧来のオブジェクト
&amp;gt;&amp;gt;&amp;gt; class TeenyClass: ... def __init__(self, name): ... self.name = name ... &amp;gt;&amp;gt;&amp;gt; teeny = TeenyClass(&amp;#39;itsy&amp;#39;) &amp;gt;&amp;gt;&amp;gt; teeny.name &amp;#39;itsy&amp;#39; データクラスを使った場合 &amp;gt;&amp;gt;&amp;gt; from dataclasses import dataclass &amp;gt;&amp;gt;&amp;gt; @dataclass ... class TeenyDataClass: ... name: str ... &amp;gt;&amp;gt;&amp;gt; teeny = TeenyDataClass(&amp;#39;bitsy&amp;#39;) &amp;gt;&amp;gt;&amp;gt; teeny.name &amp;#39;bitsy&amp;#39; データクラスオブジェクトを作る場合は、クラスで定義された順序で実引数を渡していくか、名前付き引数を使う（こちらの場合は、順序はどうでもいい） &amp;gt;&amp;gt;&amp;gt; from dataclasses import dataclass &amp;gt;&amp;gt;&amp;gt; @dataclass ... class AnimalClass: ... name: str ... habitat: str ... teeth: int = 0 ... &amp;gt;&amp;gt;&amp;gt; snowman = AnimalClass(&amp;#39;yeti&amp;#39;, &amp;#39;Himalayas&amp;#39;, 46) &amp;gt;&amp;gt;&amp;gt; duck = AnimalClass(habitat=&amp;#39;lake&amp;#39;, name=&amp;#39;duck&amp;#39;) &amp;gt;&amp;gt;&amp;gt; snowman AnimalClass(name=&amp;#39;yeti&amp;#39;, habitat=&amp;#39;Himalayas&amp;#39;, teeth=46) &amp;gt;&amp;gt;&amp;gt; duck AnimalClass(name=&amp;#39;duck&amp;#39;, habitat=&amp;#39;lake&amp;#39;, teeth=0) &amp;gt;&amp;gt;&amp;gt; duck.</description></item><item><title>【12.13】名前付きタプル</title><link>https://dddsuz2.github.io/suzmemo/12.13%E5%90%8D%E5%89%8D%E4%BB%98%E3%81%8D%E3%82%BF%E3%83%97%E3%83%AB/</link><pubDate>Tue, 08 Aug 2023 14:59:10 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/12.13%E5%90%8D%E5%89%8D%E4%BB%98%E3%81%8D%E3%82%BF%E3%83%97%E3%83%AB/</guid><description> 名前付きタプルはタプルのサブクラス 位置だけでなく名前でも値にアクセスできる &amp;gt;&amp;gt;&amp;gt; from collections import namedtuple &amp;gt;&amp;gt;&amp;gt; Duck = namedtuple(&amp;#39;Duck&amp;#39;, &amp;#39;bill tail&amp;#39;) &amp;gt;&amp;gt;&amp;gt; duck = Duck(&amp;#39;wide orange&amp;#39;, &amp;#39;long&amp;#39;) &amp;gt;&amp;gt;&amp;gt; duck Duck(bill=&amp;#39;wide orange&amp;#39;, tail=&amp;#39;long&amp;#39;) &amp;gt;&amp;gt;&amp;gt; duck.bill &amp;#39;wide orange&amp;#39; &amp;gt;&amp;gt;&amp;gt; duck.tail &amp;#39;long&amp;#39; 名前付きタプルは辞書からも作ることができる &amp;gt;&amp;gt;&amp;gt; parts = {&amp;#39;bill&amp;#39;: &amp;#39;wide orange&amp;#39;, &amp;#39;tail&amp;#39;: &amp;#39;long&amp;#39;} &amp;gt;&amp;gt;&amp;gt; duck2 = Duck(**parts) &amp;gt;&amp;gt;&amp;gt; duck2 Duck(bill=&amp;#39;wide orange&amp;#39;, tail=&amp;#39;long&amp;#39;) イミュータブルなオブジェクトのように見え、そのようにふるまう オブジェクトよりも空間的、時間的に効率が良い 辞書スタイルの角括弧ではなく、ドット記法で属性にアクセスできる 辞書のキーとして使える</description></item><item><title>【12.12】オブジェクトとその他のものの使い分け</title><link>https://dddsuz2.github.io/suzmemo/12.12%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%A8%E3%81%9D%E3%81%AE%E4%BB%96%E3%81%AE%E3%82%82%E3%81%AE%E3%81%AE%E4%BD%BF%E3%81%84%E5%88%86%E3%81%91/</link><pubDate>Tue, 08 Aug 2023 14:53:04 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/12.12%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%A8%E3%81%9D%E3%81%AE%E4%BB%96%E3%81%AE%E3%82%82%E3%81%AE%E3%81%AE%E4%BD%BF%E3%81%84%E5%88%86%E3%81%91/</guid><description> 動作（メソッド）は同じだが、内部状態（属性）は異なる複数のインスタンスをを必要とする場合、オブジェクトを使う クラスは継承をサポートするが、モジュールはサポートしない 何かを1つだけ必要とするときには、モジュールが良い Pythonモジュールは何度参照されても、1個のコピーしかロードされない シングルトンとして使える 複数の値をもつ変数があり、それらを複数の関数に引数として渡せるときは、それをクラスとして定義した方が良い場合がある 問題にとって最も単純な方法を使う</description></item><item><title>【12.11】集約とコンポジション</title><link>https://dddsuz2.github.io/suzmemo/12.11%E9%9B%86%E7%B4%84%E3%81%A8%E3%82%B3%E3%83%B3%E3%83%9D%E3%82%B8%E3%82%B7%E3%83%A7%E3%83%B3/</link><pubDate>Tue, 08 Aug 2023 14:47:23 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/12.11%E9%9B%86%E7%B4%84%E3%81%A8%E3%82%B3%E3%83%B3%E3%83%9D%E3%82%B8%E3%82%B7%E3%83%A7%E3%83%B3/</guid><description>継承よりも集約やコンポジション（合成）の方がいい場合がある コンポジション あるものが別のものの一部になっている場合 &amp;gt;&amp;gt;&amp;gt; class Bill: ... def __init__(self, description): ... self.description = description ... &amp;gt;&amp;gt;&amp;gt; class Tail: ... def __init__(self, length): ... self.length = length ... &amp;gt;&amp;gt;&amp;gt; class Duck: ... def __init__(self, bill, tail): ... self.bill = bill ... self.tail = tail ... def about(self): ... print(&amp;#39;This duck has a&amp;#39;, self.bill.description, ... &amp;#39;bill and a&amp;#39;, self.tail.length, &amp;#39;tail&amp;#39;) ... &amp;gt;&amp;gt;&amp;gt; a_tail = Tail(&amp;#39;long&amp;#39;) &amp;gt;&amp;gt;&amp;gt; a_bill = Bill(&amp;#39;wide orange&amp;#39;) &amp;gt;&amp;gt;&amp;gt; duck = Duck(a_bill, a_tail) &amp;gt;&amp;gt;&amp;gt; duck.</description></item><item><title>【12.10】特殊メソッド</title><link>https://dddsuz2.github.io/suzmemo/12.10%E7%89%B9%E6%AE%8A%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89/</link><pubDate>Tue, 08 Aug 2023 14:29:11 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/12.10%E7%89%B9%E6%AE%8A%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89/</guid><description>a = 3 + 8のようなコードを入力したとき
+ の実装方法をどのようにして知るのか？ 文字列連結の+との違いをどうやって知るのか？ 特殊メソッドを使ってたどりつく マジックメソッドともいう 2つの単語を、大文字小文字の区別なく比較するequalsメソッドを考えてみる
&amp;gt;&amp;gt;&amp;gt; class Word: ... def __init__(self, text): ... self.text = text ... def equals(self, word2): ... return self.text.lower() == word2.text.lower() ... &amp;gt;&amp;gt;&amp;gt; first = Word(&amp;#39;ha&amp;#39;) &amp;gt;&amp;gt;&amp;gt; second = Word(&amp;#39;HA&amp;#39;) &amp;gt;&amp;gt;&amp;gt; third = Word(&amp;#39;eh&amp;#39;) &amp;gt;&amp;gt;&amp;gt; first.equals(second) True &amp;gt;&amp;gt;&amp;gt; first.equals(third) False equalsメソッドを__eq__に変更してみる &amp;gt;&amp;gt;&amp;gt; class Word: ... def __init__(self, text): ... self.text = text ... def __eq__(self, word2): ... return self.text.lower() == word2.</description></item><item><title>【12.9】ダックタイピング</title><link>https://dddsuz2.github.io/suzmemo/12.9%E3%83%80%E3%83%83%E3%82%AF%E3%82%BF%E3%82%A4%E3%83%94%E3%83%B3%E3%82%B0/</link><pubDate>Mon, 07 Aug 2023 16:59:23 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/12.9%E3%83%80%E3%83%83%E3%82%AF%E3%82%BF%E3%82%A4%E3%83%94%E3%83%B3%E3%82%B0/</guid><description>Pythonはポリモーフィズムの緩やかな実装を持つ
クラスの種類にかかわらず、メソッドの名前と引数に基づき、異なるオブジェクトに対して同じ操作を適用する 同じ__init__()メソッドを共有する3種類のQuoteクラスを定義してみる
who()は、保存されているperson文字列を単純に返す says()は、保存されているwordsにクラスごとに異なる記号を付けて返す &amp;gt;&amp;gt;&amp;gt; class Quote: ... def __init__(self, person, words): ... self.person = person ... self.words = words ... def who(self): ... return self.person ... def says(self): ... return self.words + &amp;#39;,&amp;#39; &amp;gt;&amp;gt;&amp;gt; class QuestionQuote(Quote): ... def says(self): ... return self.words + &amp;#39;?&amp;#39; ... &amp;gt;&amp;gt;&amp;gt; class ExclamationQuote(Quote): ... def says(self): ... return self.words + &amp;#39;!&amp;#39; ... __init__()メソッドのオーバライドをQuestionQuoteとExclamationQuoteでは行っていない インスタンス変数のpersonとwordのため、自動的に親クラスの__init__()を呼び出す &amp;gt;&amp;gt;&amp;gt; hunter = Quote(&amp;#39;Elmer Fudd&amp;#39;, &amp;#34;I&amp;#39;m hunting wabbits&amp;#34;) &amp;gt;&amp;gt;&amp;gt; print(hunter.</description></item><item><title>【12.8.3】静的メソッド</title><link>https://dddsuz2.github.io/suzmemo/12.8.3%E9%9D%99%E7%9A%84%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89/</link><pubDate>Mon, 07 Aug 2023 16:57:24 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/12.8.3%E9%9D%99%E7%9A%84%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89/</guid><description> クラスにもオブジェクトにも影響を与えないものを静的メソッドという &amp;gt;&amp;gt;&amp;gt; class CoyoteWeapon: ... @staticmethod ... def commercial(): ... print(&amp;#39;This CoyoteWeapon has been brought to you by Acme&amp;#39;) ... &amp;gt;&amp;gt;&amp;gt; CoyoteWeapon.commercial() This CoyoteWeapon has been brought to you by Acme 静的メソッドは、オブジェクトを作らずに実行できる</description></item><item><title>【12.8.2】クラスメソッド</title><link>https://dddsuz2.github.io/suzmemo/12.8.2%E3%82%AF%E3%83%A9%E3%82%B9%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89/</link><pubDate>Mon, 07 Aug 2023 16:53:10 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/12.8.2%E3%82%AF%E3%83%A9%E3%82%B9%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89/</guid><description> クラスメソッドはクラス全体に変更を与える クラスに加えた変更は、全てのオブジェクトに影響を与える メソッドの第一引数は、クラス自体そのもの &amp;gt;&amp;gt;&amp;gt; class A: ... count = 0 ... def __init__(self): ... A.count += 1 ... def exclaim(self): ... print(&amp;#34;I&amp;#39;m an A!&amp;#34;) ... @classmethod ... def kids(cls): ... print(&amp;#34;A has&amp;#34;, cls.count, &amp;#34;little objects.&amp;#34;) ... &amp;gt;&amp;gt;&amp;gt; easy_a = A() &amp;gt;&amp;gt;&amp;gt; breezy_a = A() &amp;gt;&amp;gt;&amp;gt; wheezy_a = A() &amp;gt;&amp;gt;&amp;gt; A.kids() A has 3 little objects. self.count(インスタンス属性)ではなく、A.count(クラス属性)を参照している cls.countでもA.countでも意味は同じ</description></item><item><title>【12.8.1】インスタンスメソッド</title><link>https://dddsuz2.github.io/suzmemo/12.8.1%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89/</link><pubDate>Mon, 07 Aug 2023 16:44:43 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/12.8.1%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89/</guid><description> クラス定義の中でメソッドの第一引数がselfになっていたら、それはインスタンスメソッド メソッドが呼び出されると、Pythonはメソッドにオブジェクトを与える</description></item><item><title>【12.8】メソッドのタイプ</title><link>https://dddsuz2.github.io/suzmemo/12.8%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%AE%E3%82%BF%E3%82%A4%E3%83%97/</link><pubDate>Mon, 07 Aug 2023 16:41:37 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/12.8%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%AE%E3%82%BF%E3%82%A4%E3%83%97/</guid><description>メソッド
クラス自体の一部になっているもの クラスから作られたオブジェクトの一部になっているもの そのどちらでもない デコレータがついていないメソッドはインスタンスメソッド
第一引数は個別のインスタンスを参照するselfでなければならない @classmethodデコレータがついているメソッドはクラスメソッド
第一引数はクラス自体を参照するclsでなければならない @staticmethodがついているメソッドは静的メソッドであり、第一引数はオブジェクトやクラス以外のものになる</description></item><item><title>【12.7.3】クラスの属性とインスタンスの属性</title><link>https://dddsuz2.github.io/suzmemo/12.7.3%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E5%B1%9E%E6%80%A7%E3%81%A8%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%81%AE%E5%B1%9E%E6%80%A7/</link><pubDate>Mon, 07 Aug 2023 16:34:09 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/12.7.3%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E5%B1%9E%E6%80%A7%E3%81%A8%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%81%AE%E5%B1%9E%E6%80%A7/</guid><description>クラスには属性を追加できる 追加された属性は、クラスから作られたインスタンスにそのまま受け継がれる &amp;gt;&amp;gt;&amp;gt; class Fruit: ... color = &amp;#39;red&amp;#39; ... &amp;gt;&amp;gt;&amp;gt; blueberry = Fruit() &amp;gt;&amp;gt;&amp;gt; Fruit.color &amp;#39;red&amp;#39; &amp;gt;&amp;gt;&amp;gt; blueberry.color &amp;#39;red&amp;#39; インスタンスの属性の値を変更しても、クラスの属性に影響は及ばない &amp;gt;&amp;gt;&amp;gt; blueberry.color = &amp;#39;blue&amp;#39; &amp;gt;&amp;gt;&amp;gt; blueberry.color &amp;#39;blue&amp;#39; &amp;gt;&amp;gt;&amp;gt; Fruit.color &amp;#39;red&amp;#39; あとでクラス属性を変更しても、既存のインスタンスには影響を与えない しかし、新しいオブジェクトには影響を及ぼす オブジェクトがイミュータブルの時だけかも&amp;hellip; &amp;gt;&amp;gt;&amp;gt; Fruit.color = &amp;#39;orange&amp;#39; &amp;gt;&amp;gt;&amp;gt; Fruit.color &amp;#39;orange&amp;#39; &amp;gt;&amp;gt;&amp;gt; blueberry.color &amp;#39;blue&amp;#39; &amp;gt;&amp;gt;&amp;gt; new_fruit = Fruit() &amp;gt;&amp;gt;&amp;gt; new_fruit.color &amp;#39;orange&amp;#39; &amp;gt;&amp;gt;&amp;gt; class test: ... x = [1, 2, 3, 4] ... &amp;gt;&amp;gt;&amp;gt; test_1 = test() &amp;gt;&amp;gt;&amp;gt; test_1.x [1, 2, 3, 4] &amp;gt;&amp;gt;&amp;gt; test.</description></item><item><title>【12.7.2】属性を隠すための名前マングリング</title><link>https://dddsuz2.github.io/suzmemo/12.7.2%E5%B1%9E%E6%80%A7%E3%82%92%E9%9A%A0%E3%81%99%E3%81%9F%E3%82%81%E3%81%AE%E5%90%8D%E5%89%8D%E3%83%9E%E3%83%B3%E3%82%B0%E3%83%AA%E3%83%B3%E3%82%B0/</link><pubDate>Mon, 07 Aug 2023 16:29:05 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/12.7.2%E5%B1%9E%E6%80%A7%E3%82%92%E9%9A%A0%E3%81%99%E3%81%9F%E3%82%81%E3%81%AE%E5%90%8D%E5%89%8D%E3%83%9E%E3%83%B3%E3%82%B0%E3%83%AA%E3%83%B3%E3%82%B0/</guid><description>先頭に__をつけることで、クラス定義の外からは見えないように属性を定義できる &amp;gt;&amp;gt;&amp;gt; class Duck: ... def __init__(self, input_name): ... self.__name = input_name ... @property ... def name(self): ... print(&amp;#39;inside the getter&amp;#39;) ... return self.__name ... @name.setter ... def name(self, input_name): ... print(&amp;#39;inside the setter&amp;#39;) ... self.__name = input_name ... &amp;gt;&amp;gt;&amp;gt; fowl = Duck(&amp;#39;Howard&amp;#39;) &amp;gt;&amp;gt;&amp;gt; fowl.name inside the getter &amp;#39;Howard&amp;#39; &amp;gt;&amp;gt;&amp;gt; fowl.name = &amp;#39;Donald&amp;#39; inside the setter &amp;gt;&amp;gt;&amp;gt; fowl.name inside the getter &amp;#39;Donald&amp;#39; &amp;gt;&amp;gt;&amp;gt; fowl.__name Traceback (most recent call last): File &amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;, line 1, in &amp;lt;module&amp;gt; AttributeError: &amp;#39;Duck&amp;#39; object has no attribute &amp;#39;__name&amp;#39; 実際に属性が非公開になっているわけではない 外部コードが名前を偶然当てたりしないようなものになるように名前をマングリング（変形）する &amp;gt;&amp;gt;&amp;gt; fowl.</description></item><item><title>【12.7.1】計算された値のためのプロパティ</title><link>https://dddsuz2.github.io/suzmemo/12.7.1%E8%A8%88%E7%AE%97%E3%81%95%E3%82%8C%E3%81%9F%E5%80%A4%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3/</link><pubDate>Mon, 07 Aug 2023 16:24:16 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/12.7.1%E8%A8%88%E7%AE%97%E3%81%95%E3%82%8C%E3%81%9F%E5%80%A4%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3/</guid><description> プロパティは計算された値も返すことができる &amp;gt;&amp;gt;&amp;gt; class Circle: ... def __init__(self, radius): ... self.radius = radius ... @property ... def diameter(self): ... return 2 * self.radius ... &amp;gt;&amp;gt;&amp;gt; c = Circle(5) &amp;gt;&amp;gt;&amp;gt; c.radius 5 &amp;gt;&amp;gt;&amp;gt; c.diameter 10 &amp;gt;&amp;gt;&amp;gt; c.radius = 7 &amp;gt;&amp;gt;&amp;gt; c.diameter 14 &amp;gt;&amp;gt;&amp;gt; c.diameter = 20 Traceback (most recent call last): File &amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;, line 1, in &amp;lt;module&amp;gt; AttributeError: can&amp;#39;t set attribute プロパティセッターを定義しなければ、外部からプロパティを設定することはできない プロパティは、属性の定義を書き換えても、呼び出しているコードには手をつけなくても良いため便利</description></item><item><title>【12.7】属性へのアクセス</title><link>https://dddsuz2.github.io/suzmemo/12.7%E5%B1%9E%E6%80%A7%E3%81%B8%E3%81%AE%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9/</link><pubDate>Mon, 07 Aug 2023 13:59:30 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/12.7%E5%B1%9E%E6%80%A7%E3%81%B8%E3%81%AE%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9/</guid><description>Pythonの属性とメソッドはパブリックである
直接アクセス
&amp;gt;&amp;gt;&amp;gt; class Duck: ... def __init__(self, input_name): ... self.name = input_name ... &amp;gt;&amp;gt;&amp;gt; fowl = Duck(&amp;#39;Daffy&amp;#39;) &amp;gt;&amp;gt;&amp;gt; fowl.name &amp;#39;Daffy&amp;#39; &amp;gt;&amp;gt;&amp;gt; fowl.name = &amp;#39;Daphne&amp;#39; &amp;gt;&amp;gt;&amp;gt; fowl.name &amp;#39;Daphne&amp;#39; 属性を直接変更できてしまう
オブジェクト指向言語において、外部から直接アクセスできない非公開のオブジェクト属性をサポートしている場合
そのような非公開属性の値を読み書きするゲッター、セッターメソッドを書く Pythonは非公開属性を持っていないが、属性名を非公開っぽくわかりにくくした上でゲッター、セッターを書くことができる &amp;gt;&amp;gt;&amp;gt; class Duck: ... def __init__(self, input_name): ... self.hidden_name = input_name ... def get_name(self): ... print(&amp;#39;inside the getter&amp;#39;) ... return self.hidden_name ... def set_name(self, input_name): ... print(&amp;#39;inside the setter&amp;#39;) ... self.hidden_name = input_name ... &amp;gt;&amp;gt;&amp;gt; don = Duck(&amp;#39;Donald&amp;#39;) &amp;gt;&amp;gt;&amp;gt; don.</description></item><item><title>【12.6】selfの自己弁護</title><link>https://dddsuz2.github.io/suzmemo/12.6self%E3%81%AE%E8%87%AA%E5%B7%B1%E5%BC%81%E8%AD%B7/</link><pubDate>Mon, 07 Aug 2023 13:56:22 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/12.6self%E3%81%AE%E8%87%AA%E5%B7%B1%E5%BC%81%E8%AD%B7/</guid><description> インスタンスメソッドの第一引数としてselfを組み込まなければならない &amp;gt;&amp;gt;&amp;gt; a_car = Car() &amp;gt;&amp;gt;&amp;gt; a_car.exclaim() I&amp;#39;m a Car! 一連の流れ a_carオブジェクトのクラス（Car）を探す Carクラスのexclaim()メソッドにself引数としてa_carオブジェクトを渡す Car.exclaim(a_car)と同じ</description></item><item><title>【12.5.6】ミックスイン</title><link>https://dddsuz2.github.io/suzmemo/12.5.6%E3%83%9F%E3%83%83%E3%82%AF%E3%82%B9%E3%82%A4%E3%83%B3/</link><pubDate>Mon, 07 Aug 2023 13:50:15 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/12.5.6%E3%83%9F%E3%83%83%E3%82%AF%E3%82%B9%E3%82%A4%E3%83%B3/</guid><description> クラス定義にヘルパーとして使うだけの親クラスを組み込むことができる 他の親クラスとはメソッドを共有しない このような親クラスをミックスインと呼ぶ ロギングなどの副次的なタスクを追加するために使われることがある &amp;gt;&amp;gt;&amp;gt; import pprint &amp;gt;&amp;gt;&amp;gt; class PrettyMixin: ... def dump(self): ... pprint.pprint(vars(self)) ... &amp;gt;&amp;gt;&amp;gt; class Thing(PrettyMixin): ... pass ... &amp;gt;&amp;gt;&amp;gt; t = Thing() &amp;gt;&amp;gt;&amp;gt; t.name = &amp;#34;Nyarlathotep&amp;#34; &amp;gt;&amp;gt;&amp;gt; t.feature = &amp;#39;ichor&amp;#39; &amp;gt;&amp;gt;&amp;gt; t.age = &amp;#39;eldritch&amp;#39; &amp;gt;&amp;gt;&amp;gt; t.dump() {&amp;#39;age&amp;#39;: &amp;#39;eldritch&amp;#39;, &amp;#39;feature&amp;#39;: &amp;#39;ichor&amp;#39;, &amp;#39;name&amp;#39;: &amp;#39;Nyarlathotep&amp;#39;}</description></item><item><title>【12.5.5】多重継承</title><link>https://dddsuz2.github.io/suzmemo/12.5.5%E5%A4%9A%E9%87%8D%E7%B6%99%E6%89%BF/</link><pubDate>Mon, 07 Aug 2023 13:40:31 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/12.5.5%E5%A4%9A%E9%87%8D%E7%B6%99%E6%89%BF/</guid><description>オブジェクトは複数の親クラスを継承できる Pythonの継承は、メソッド解決順序によって決まる 個々のPythonクラスは、そのクラスのオブジェクトがメソッドや属性を探す時に参照するクラスのリストを返すmro()というメソッドを持つ それらのクラスのタプルを格納する__mro__という属性もある &amp;gt;&amp;gt;&amp;gt; class Animal: ... def says(self): ... return &amp;#39;I speak!&amp;#39; ... &amp;gt;&amp;gt;&amp;gt; class Horse(Animal): ... def says(self): ... return &amp;#39;Neigh!&amp;#39; ... &amp;gt;&amp;gt;&amp;gt; class Donkey(Animal): ... def says(self): ... return &amp;#39;Hee-haw!&amp;#39; ... &amp;gt;&amp;gt;&amp;gt; class Mule(Donkey, Horse): ... pass ... &amp;gt;&amp;gt;&amp;gt; class Hinny(Horse, Donkey): ... pass ... &amp;gt;&amp;gt;&amp;gt; Mule.mro() [&amp;lt;class &amp;#39;__main__.Mule&amp;#39;&amp;gt;, &amp;lt;class &amp;#39;__main__.Donkey&amp;#39;&amp;gt;, &amp;lt;class &amp;#39;__main__.Horse&amp;#39;&amp;gt;, &amp;lt;class &amp;#39;__main__.Animal&amp;#39;&amp;gt;, &amp;lt;class &amp;#39;object&amp;#39;&amp;gt;] &amp;gt;&amp;gt;&amp;gt; Hinny.mro() [&amp;lt;class &amp;#39;__main__.Hinny&amp;#39;&amp;gt;, &amp;lt;class &amp;#39;__main__.Horse&amp;#39;&amp;gt;, &amp;lt;class &amp;#39;__main__.Donkey&amp;#39;&amp;gt;, &amp;lt;class &amp;#39;__main__.</description></item><item><title>【12.5.4】superによる親への支援要請</title><link>https://dddsuz2.github.io/suzmemo/12.5.4super%E3%81%AB%E3%82%88%E3%82%8B%E8%A6%AA%E3%81%B8%E3%81%AE%E6%94%AF%E6%8F%B4%E8%A6%81%E8%AB%8B/</link><pubDate>Mon, 07 Aug 2023 02:15:10 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/12.5.4super%E3%81%AB%E3%82%88%E3%82%8B%E8%A6%AA%E3%81%B8%E3%81%AE%E6%94%AF%E6%8F%B4%E8%A6%81%E8%AB%8B/</guid><description> 子クラスが親メソッドを呼び出したいとき super()を使う &amp;gt;&amp;gt;&amp;gt; class Person: ... def __init__(self, name): ... self.name = name ... &amp;gt;&amp;gt;&amp;gt; class EmailPerson(Person): ... def __init__(self, name, email): ... super().__init__(name) ... self.email = email ... super()が親クラスのPersonの定義を呼び出す super().__init__()によって、Person.__init__()が呼び出される self引数の受け渡しはPythonが勝手にやってくれる &amp;gt;&amp;gt;&amp;gt; bob = EmailPerson(&amp;#39;Bob Frapples&amp;#39;, &amp;#39;bob@frapples.com&amp;#39;) &amp;gt;&amp;gt;&amp;gt; bob.name &amp;#39;Bob Frapples&amp;#39; &amp;gt;&amp;gt;&amp;gt; bob.email &amp;#39;bob@frapples.com&amp;#39; なぜ、次のように新クラスを定義しないか 継承を使っている意味がなくなる Personの定義が将来変わっても、その変更を反映したものになる　&amp;gt;&amp;gt;&amp;gt; class EmailPerson(Person): ... def __init__(self, name, email): ... self.name = name ... self.email = email ...</description></item><item><title>【12.5.3】メソッドの追加</title><link>https://dddsuz2.github.io/suzmemo/12.5.3%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%AE%E8%BF%BD%E5%8A%A0/</link><pubDate>Mon, 07 Aug 2023 02:01:06 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/12.5.3%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%AE%E8%BF%BD%E5%8A%A0/</guid><description> 子クラスは親クラスになかったメソッドを追加することもできる &amp;gt;&amp;gt;&amp;gt; class Car: ... def exclaim(self): ... print(&amp;#34;I&amp;#39;m a Car!&amp;#34;) ... &amp;gt;&amp;gt;&amp;gt; class Yugo(Car): ... def exclaim(self): ... print(&amp;#34;I&amp;#39;m a Yugo! Much like a Car, but more Yugo-ish.&amp;#34;) ... def need_a_push(self): ... print(&amp;#34;A little help here?&amp;#34;) ... &amp;gt;&amp;gt;&amp;gt; give_me_a_car = Car() &amp;gt;&amp;gt;&amp;gt; give_me_a_yugo = Yugo() &amp;gt;&amp;gt;&amp;gt; give_me_a_yugo.need_a_push() A little help here?</description></item><item><title>【12.5.2】メソッドのオーバーライド</title><link>https://dddsuz2.github.io/suzmemo/12.5.2%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%AE%E3%82%AA%E3%83%BC%E3%83%90%E3%83%BC%E3%83%A9%E3%82%A4%E3%83%89/</link><pubDate>Mon, 07 Aug 2023 01:52:33 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/12.5.2%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%AE%E3%82%AA%E3%83%BC%E3%83%90%E3%83%BC%E3%83%A9%E3%82%A4%E3%83%89/</guid><description>親クラスのメソッドをオーバーライドすることが可能 &amp;gt;&amp;gt;&amp;gt; class Car: ... def exclaim(self): ... print(&amp;#34;I&amp;#39;m a Car!&amp;#34;) ... &amp;gt;&amp;gt;&amp;gt; class Yugo(Car): ... def exclaim(self): ... print(&amp;#34;I&amp;#39;m a Yugo! Much like a Car, but more Yugo-ish.&amp;#34;) ... &amp;gt;&amp;gt;&amp;gt; give_me_a_car = Car() &amp;gt;&amp;gt;&amp;gt; give_me_a_yugo = Yugo() &amp;gt;&amp;gt;&amp;gt; give_me_a_car.exclaim() I&amp;#39;m a Car! &amp;gt;&amp;gt;&amp;gt; give_me_a_yugo.exclaim() I&amp;#39;m a Yugo! Much like a Car, but more Yugo-ish. メソッドのオーバーライドは、__init__()を含むあらゆるメソッドで可能 &amp;gt;&amp;gt;&amp;gt; class Person: ... def __init__(self, name): ... self.name = name ... &amp;gt;&amp;gt;&amp;gt; class MDPerson(Person): .</description></item><item><title>【12.5.1】親クラスからの継承</title><link>https://dddsuz2.github.io/suzmemo/12.5.1%E8%A6%AA%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%8B%E3%82%89%E3%81%AE%E7%B6%99%E6%89%BF/</link><pubDate>Mon, 07 Aug 2023 01:45:10 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/12.5.1%E8%A6%AA%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%8B%E3%82%89%E3%81%AE%E7%B6%99%E6%89%BF/</guid><description> 新クラスでは、追加、変更したい部分だけを定義する オーバーライドされた古いクラスの動作は使われない 元のクラスは、親、スーパークラス、基底クラスと呼ばれる 新しいクラスは、子、サブクラス、派生クラスと呼ばれる 子クラスは親クラスを専門特化したものであり、is-a関係と呼ばれる &amp;gt;&amp;gt;&amp;gt; class Car: ... pass ... &amp;gt;&amp;gt;&amp;gt; class Yugo(Car): ... pass ... クラスがほかのクラスを継承したものかどうかは、issubclass()を使えば調べられる &amp;gt;&amp;gt;&amp;gt; issubclass(Yugo, Car) True &amp;gt;&amp;gt;&amp;gt; give_me_a_car = Car() &amp;gt;&amp;gt;&amp;gt; give_me_a_Yugo = Yugo() &amp;gt;&amp;gt;&amp;gt; give_me_a_car.exclaim() I&amp;#39;m a Car! &amp;gt;&amp;gt;&amp;gt; give_me_a_Yugo.exclaim() I&amp;#39;m a Car!</description></item><item><title>【12.5】継承</title><link>https://dddsuz2.github.io/suzmemo/12.5%E7%B6%99%E6%89%BF/</link><pubDate>Mon, 07 Aug 2023 01:42:52 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/12.5%E7%B6%99%E6%89%BF/</guid><description> 既存のクラスで必要なものがそろっている場合 書き換えると複雑になり、今まで動いていたものが壊れる可能性がある 継承を使う</description></item><item><title>【12.4】初期化</title><link>https://dddsuz2.github.io/suzmemo/12.4%E5%88%9D%E6%9C%9F%E5%8C%96/</link><pubDate>Mon, 07 Aug 2023 01:30:50 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/12.4%E5%88%9D%E6%9C%9F%E5%8C%96/</guid><description>作成時にオブジェクトの属性に値を代入したい場合 初期化のための特殊メソッド__init__()が必要になる &amp;gt;&amp;gt;&amp;gt; class Cat: ... def __init__(self): ... pass ... __init__()は、クラス定義から個々のオブジェクトを作るときに、それを初期化するメソッド 第一引数はselfでなければならない すべてのクラスが__init__()を持たなければならないわけではない self引数は、作られた個別のオブジェクト自体を参照する &amp;gt;&amp;gt;&amp;gt; class Cat: ... def __init__(self, name): ... self.name = name ... &amp;gt;&amp;gt;&amp;gt; furball = Cat(&amp;#39;Grumpy&amp;#39;) name引数として文字列を渡せば、Catクラスからオブジェクトを作れるようになる
Catクラスの定義を探し出す
メモリ内に新しいオブジェクトのインスタンスを生成する
selfとして新しく作ったオブジェクト、nameとしてもう1つの引数を(&amp;lsquo;Grumpy&amp;rsquo;)を渡して、オブジェクトの__init__()メソッドを呼び出す
nameの値をオブジェクトに格納する
その新しいオブジェクトを返す
オブジェクトにfurballという名前を与える</description></item><item><title>【12.3】メソッド</title><link>https://dddsuz2.github.io/suzmemo/12.3%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89/</link><pubDate>Mon, 07 Aug 2023 01:29:50 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/12.3%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89/</guid><description> メソッドとは、クラスやオブジェクトの中の関数のこと</description></item><item><title>【12.2】属性</title><link>https://dddsuz2.github.io/suzmemo/12.2%E5%B1%9E%E6%80%A7/</link><pubDate>Mon, 07 Aug 2023 01:24:03 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/12.2%E5%B1%9E%E6%80%A7/</guid><description> 属性とは何か？ クラスやオブジェクトの中の変数のこと &amp;gt;&amp;gt;&amp;gt; class Cat: ... pass ... &amp;gt;&amp;gt;&amp;gt; a_cat = Cat() &amp;gt;&amp;gt;&amp;gt; a_cat &amp;lt;__main__.Cat object at 0x7feb0fe4e550&amp;gt; &amp;gt;&amp;gt;&amp;gt; another_cat = Cat() &amp;gt;&amp;gt;&amp;gt; another_cat &amp;lt;__main__.Cat object at 0x7feb0f5119d0&amp;gt; オブジェクトを作成している間、あるいは作成した後に、属性を追加できる &amp;gt;&amp;gt;&amp;gt; a_cat.age = 3 &amp;gt;&amp;gt;&amp;gt; a_cat.name = &amp;#34;Mr. Fuzzybuttons&amp;#34; &amp;gt;&amp;gt;&amp;gt; a_cat.nemesis = another_cat &amp;gt;&amp;gt;&amp;gt; a_cat.age 3 &amp;gt;&amp;gt;&amp;gt; a_cat.name &amp;#39;Mr. Fuzzybuttons&amp;#39; &amp;gt;&amp;gt;&amp;gt; a_cat.nemesis &amp;lt;__main__.Cat object at 0x7feb0f5119d0&amp;gt; &amp;gt;&amp;gt;&amp;gt; a_cat.nemesis.name = &amp;#34;Mr. Bigglesworth&amp;#34; &amp;gt;&amp;gt;&amp;gt; a_cat.nemesis.name &amp;#39;Mr. Bigglesworth&amp;#39; &amp;gt;&amp;gt;&amp;gt; another_cat.name &amp;#39;Mr. Bigglesworth&amp;#39; 属性という時、通常はオブジェクトの属性を意味するが、クラス属性も存在する</description></item><item><title>【12.1】classによるクラスの定義</title><link>https://dddsuz2.github.io/suzmemo/12.1class%E3%81%AB%E3%82%88%E3%82%8B%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E5%AE%9A%E7%BE%A9/</link><pubDate>Mon, 07 Aug 2023 01:21:02 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/12.1class%E3%81%AB%E3%82%88%E3%82%8B%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E5%AE%9A%E7%BE%A9/</guid><description> 新しいオブジェクトを作るときには、そのオブジェクトの内容を規定するクラスを作らなければならない オブジェクトを箱とするなら、クラスは鋳型のようなもの &amp;gt;&amp;gt;&amp;gt; class Cat: ... pass オブジェクトは、関数と同じようにクラス名を呼び出して作る &amp;gt;&amp;gt;&amp;gt; a_cat = Cat() &amp;gt;&amp;gt;&amp;gt; another_cat = Cat()</description></item><item><title>【12】オブジェクトは何か</title><link>https://dddsuz2.github.io/suzmemo/12%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AF%E4%BD%95%E3%81%8B/</link><pubDate>Mon, 07 Aug 2023 01:16:18 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/12%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AF%E4%BD%95%E3%81%8B/</guid><description> オブジェクトとは何か？ データ（変数、属性と呼ばれる）とコード（関数）の両方を含むカスタムデータ構造 具体的な実例（インスタンス）を表現する 値7の整数オブジェクトは、整数クラスに属している 加算や乗算などのメソッドを持つ</description></item><item><title>【11.21.2】独自例外の作成</title><link>https://dddsuz2.github.io/suzmemo/11.21.2%E7%8B%AC%E8%87%AA%E4%BE%8B%E5%A4%96%E3%81%AE%E4%BD%9C%E6%88%90/</link><pubDate>Mon, 07 Aug 2023 00:26:10 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/11.21.2%E7%8B%AC%E8%87%AA%E4%BE%8B%E5%A4%96%E3%81%AE%E4%BD%9C%E6%88%90/</guid><description> 自分のプログラムで発生する特殊な例外のために、独自の例外も作成できる 例外はクラスであり、Exceptionクラスの子クラス &amp;gt;&amp;gt;&amp;gt; class UppercaseException(Exception): ... pass ... &amp;gt;&amp;gt;&amp;gt; words = [&amp;#39;eenie&amp;#39;, &amp;#39;meenie&amp;#39;, &amp;#39;miny&amp;#39;, &amp;#39;MO&amp;#39;] &amp;gt;&amp;gt;&amp;gt; for word in words: ... if word.isupper(): ... raise UppercaseException(word) ... Traceback (most recent call last): File &amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;, line 3, in &amp;lt;module&amp;gt; __main__.UppercaseException: MO raise文は、式として与えられた例外か、現在のスコープで最終的に有効となる例外を送出する 例外オブジェクト自体にアクセスして、情報を表示することもできる　</description></item><item><title>【11.21.1】tryとexceptによるエラー処理</title><link>https://dddsuz2.github.io/suzmemo/11.21.1try%E3%81%A8except%E3%81%AB%E3%82%88%E3%82%8B%E3%82%A8%E3%83%A9%E3%83%BC%E5%87%A6%E7%90%86/</link><pubDate>Mon, 07 Aug 2023 00:17:36 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/11.21.1try%E3%81%A8except%E3%81%AB%E3%82%88%E3%82%8B%E3%82%A8%E3%83%A9%E3%83%BC%E5%87%A6%E7%90%86/</guid><description>tryを使って例外が発生しそうな場所を囲み、exceptを使って例外処理を提供する &amp;gt;&amp;gt;&amp;gt; short_list = [1, 2, 3] &amp;gt;&amp;gt;&amp;gt; position = 5 &amp;gt;&amp;gt;&amp;gt; try: ... short_list[position] ... except: ... print(&amp;#39;Need a position between 0 and&amp;#39;, len(short_list) - 1, &amp;#39; but got&amp;#39;, position) ... Need a position between 0 and 2 but got 5 複数の例外が発生する可能性があるときには、それぞれのために別々の例外ハンドラを用意した方がいい except exceptiontype as nameのようにして、例外オブジェクトをname変数に格納できる &amp;gt;&amp;gt;&amp;gt; short_list = [1, 2, 3] &amp;gt;&amp;gt;&amp;gt; while True: ... value = input(&amp;#39;Position [q to quit]? &amp;#39;) ... if value == &amp;#39;q&amp;#39;: .</description></item><item><title>【11.21】例外</title><link>https://dddsuz2.github.io/suzmemo/11.21%E4%BE%8B%E5%A4%96/</link><pubDate>Mon, 07 Aug 2023 00:13:31 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/11.21%E4%BE%8B%E5%A4%96/</guid><description> Pythonではエラーを示すために例外を使っている 関数の戻り値を特別な値にしてエラーを示す言語もある 特定の条件の下で失敗するコードを実行しようとするときには、適切な例外ハンドラを作って、起こる可能性のあるエラーをキャッチする必要がある ある関数で例外が発生し、その関数で例外をキャッチしなｋれば、上位の関数の対応するハンドラがキャッチするまで例外は浮上していく　</description></item><item><title>【11.20】非同期関数</title><link>https://dddsuz2.github.io/suzmemo/11.20%E9%9D%9E%E5%90%8C%E6%9C%9F%E9%96%A2%E6%95%B0/</link><pubDate>Mon, 07 Aug 2023 00:11:21 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/11.20%E9%9D%9E%E5%90%8C%E6%9C%9F%E9%96%A2%E6%95%B0/</guid><description> 非同期関数とは？ 関数defの前にasyncがあれば、それは非同期関数である 関数呼び出しの前にawaitがあれば、その関数は非同期関数である 詳しくは付録Cで解説するらしい 最後まで完了する前に制御を移譲できる</description></item><item><title>【11.19】再帰</title><link>https://dddsuz2.github.io/suzmemo/11.19%E5%86%8D%E5%B8%B0/</link><pubDate>Mon, 07 Aug 2023 00:05:27 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/11.19%E5%86%8D%E5%B8%B0/</guid><description>関数が自分自身を呼び出すことを再帰と呼ぶ 再帰が深くなりすぎると、Pythonでは例外を送信してくれる 再帰は、リストのリストのリストのような「平坦ではない」データを処理するのに役立つ &amp;gt;&amp;gt;&amp;gt; def flatten(lol): ... for item in lol: ... if isinstance(item, list): ... for subitem in flatten(item): ... yield subitem ... else: ... yield item ... &amp;gt;&amp;gt;&amp;gt; lol = [1, 2, [3, 4, 5], [6, [7, 8, 9], []]] &amp;gt;&amp;gt;&amp;gt; flatten(lol) &amp;lt;generator object flatten at 0x7feb0fe41ba0&amp;gt; &amp;gt;&amp;gt;&amp;gt; list(flatten(lol)) [1, 2, 3, 4, 5, 6, 7, 8, 9] yield fromを使えば、flatten()を単純化できる &amp;gt;&amp;gt;&amp;gt; def flatten(lol): ... for item in lol: .</description></item><item><title>【11.18】名前の中の_と__</title><link>https://dddsuz2.github.io/suzmemo/11.18%E5%90%8D%E5%89%8D%E3%81%AE%E4%B8%AD%E3%81%AE_%E3%81%A8__/</link><pubDate>Mon, 07 Aug 2023 00:04:02 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/11.18%E5%90%8D%E5%89%8D%E3%81%AE%E4%B8%AD%E3%81%AE_%E3%81%A8__/</guid><description> 先頭と末尾が_になっている名前は、Pythonが使う変数として予約されている 関数の名前はfunction.__name__とfunction.__doc__に格納されている</description></item><item><title>【11.17】名前空間とスコープ</title><link>https://dddsuz2.github.io/suzmemo/11.17%E5%90%8D%E5%89%8D%E7%A9%BA%E9%96%93%E3%81%A8%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%97/</link><pubDate>Sun, 06 Aug 2023 23:39:30 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/11.17%E5%90%8D%E5%89%8D%E7%A9%BA%E9%96%93%E3%81%A8%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%97/</guid><description>Pythonプログラムは様々な名前空間を持つ 名前は名前空間の中で決まった意味を持つ 各関数は、それぞれ専用の名前空間を定義する ほかの名前空間にアクセスすることもできる プログラムのメイン部分は、グローバル名前空間を定義する この空間の変数は、グローバル変数と言われる グローバル変数は、関数内から参照できる &amp;gt;&amp;gt;&amp;gt; animal = &amp;#39;fruitbat&amp;#39; &amp;gt;&amp;gt;&amp;gt; def print_global(): ... print(&amp;#39;inside print_global:&amp;#39;, animal) ... &amp;gt;&amp;gt;&amp;gt; print(&amp;#39;at the top level:&amp;#39;, animal) at the top level: fruitbat &amp;gt;&amp;gt;&amp;gt; print_global() inside print_global: fruitbat 関数でグローバル変数を取得したうえで、さらに書き換えようとするとエラーが起きる &amp;gt;&amp;gt;&amp;gt; def change_and_print_global(): ... print(&amp;#39;inside change_and_print_global:&amp;#39;, animal) ... animal = &amp;#39;wombat&amp;#39; ... print(&amp;#39;after the change:&amp;#39;, animal) ... &amp;gt;&amp;gt;&amp;gt; change_and_print_global() Traceback (most recent call last): File &amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;, line 1, in &amp;lt;module&amp;gt; File &amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;, line 2, in change_and_print_global UnboundLocalError: local variable &amp;#39;animal&amp;#39; referenced before assignment 関数内でだけで有効な別の変数を書き換えようとしたと解釈されている 代入していない変数を先に参照したとしてエラーが出ている 参照しないで値をセットすると問題は起きない &amp;gt;&amp;gt;&amp;gt; animal = &amp;#39;fruitbat&amp;#39; &amp;gt;&amp;gt;&amp;gt; def change_local(): .</description></item><item><title>【11.16】デコレータ</title><link>https://dddsuz2.github.io/suzmemo/11.16%E3%83%87%E3%82%B3%E3%83%AC%E3%83%BC%E3%82%BF/</link><pubDate>Sun, 06 Aug 2023 23:28:53 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/11.16%E3%83%87%E3%82%B3%E3%83%AC%E3%83%BC%E3%82%BF/</guid><description>ソースコードを書き換えずに既存の関数に変更を加えたい場合 デコレータを使う 入力として関数を1つ取り、別の関数を返す関数 &amp;gt;&amp;gt;&amp;gt; def document_it(func): ... def new_function(*args, **kwargs): ... print(&amp;#39;Running function:&amp;#39;, func.__name__) ... print(&amp;#39;Positional arguments:&amp;#39;, args) ... print(&amp;#39;Keyword arguments:&amp;#39;, kwargs) ... result = func(*args, **kwargs) ... print(&amp;#39;Result:&amp;#39;, result) ... return result ... return new_function ... &amp;gt;&amp;gt;&amp;gt; def add_ints(a, b): ... return a + b ... &amp;gt;&amp;gt;&amp;gt; add_ints(3, 5) 8 &amp;gt;&amp;gt;&amp;gt; cooler_add_ints = document_it(add_ints) &amp;gt;&amp;gt;&amp;gt; cooler_add_ints(3, 5) Running function: add_ints Positional arguments: (3, 5) Keyword arguments: {} Result: 8 8 上記のcooler_add_intsのように、手作業でデコレーターの戻り値を代入しなくても、デコレートしたい関数の直前に@decorator_nameを追加する &amp;gt;&amp;gt;&amp;gt; @document_it .</description></item><item><title>【11.15.2】ジェネレータ内包表記</title><link>https://dddsuz2.github.io/suzmemo/11.15.2%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%AC%E3%83%BC%E3%82%BF%E5%86%85%E5%8C%85%E8%A1%A8%E8%A8%98/</link><pubDate>Sun, 06 Aug 2023 23:27:07 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/11.15.2%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%AC%E3%83%BC%E3%82%BF%E5%86%85%E5%8C%85%E8%A1%A8%E8%A8%98/</guid><description> 丸カッコで囲む &amp;gt;&amp;gt;&amp;gt; genobj = (pair for pair in zip([&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;], [&amp;#39;1&amp;#39;, &amp;#39;2&amp;#39;])) &amp;gt;&amp;gt;&amp;gt; genobj &amp;lt;generator object &amp;lt;genexpr&amp;gt; at 0x7feb0fe419e0&amp;gt; &amp;gt;&amp;gt;&amp;gt; for thing in genobj: ... print(thing) ... (&amp;#39;a&amp;#39;, &amp;#39;1&amp;#39;) (&amp;#39;b&amp;#39;, &amp;#39;2&amp;#39;)</description></item><item><title>【11.15.1】ジェネレータ関数</title><link>https://dddsuz2.github.io/suzmemo/11.15.1%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%AC%E3%83%BC%E3%82%BF%E9%96%A2%E6%95%B0/</link><pubDate>Sun, 06 Aug 2023 23:21:32 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/11.15.1%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%AC%E3%83%BC%E3%82%BF%E9%96%A2%E6%95%B0/</guid><description> 大きくなる可能性があるシーケンスを作りたいときは、ジェネレータ関数を書けばよい 値をreturnで返すかわりに、yield文で返す &amp;gt;&amp;gt;&amp;gt; def my_range(first=0, last=10, step=1): ... number = first ... while number &amp;lt; last: ... yield number ... number += step ... &amp;gt;&amp;gt;&amp;gt; my_range &amp;lt;function my_range at 0x7feb0f525040&amp;gt; &amp;gt;&amp;gt;&amp;gt; ranger = my_range(1, 5) &amp;gt;&amp;gt;&amp;gt; ranger &amp;lt;generator object my_range at 0x7feb0fe41a50&amp;gt; &amp;gt;&amp;gt;&amp;gt; for x in ranger: ... print(x) ... 1 2 3 my_rangeからはジェネレータオブジェクトが返っている ジェネレータは1度しか実行できない その場で値を作り、イテレータを返して一度に1つずつ値をかえしてくるため ジェネレータを再起動したり、バックアップしたりすることはできない &amp;gt;&amp;gt;&amp;gt; for try_again in ranger: ... print(try_again) ...</description></item><item><title>【11.15】ジェネレータ</title><link>https://dddsuz2.github.io/suzmemo/11.15%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%AC%E3%83%BC%E3%82%BF/</link><pubDate>Sun, 06 Aug 2023 23:19:46 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/11.15%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%AC%E3%83%BC%E3%82%BF/</guid><description> ジェネレータは、Pythonのシーケンスを作成するオブジェクト ジェネレータを使うことで、シーケンス全体を一度に作ってメモリに格納しなくても、シーケンスを反復処理できる ジェネレータは、イテレータのデータソースになることが多い range()はジェネレータの1種</description></item><item><title>【11.14】無名関数（ラムダ関数）</title><link>https://dddsuz2.github.io/suzmemo/11.14%E7%84%A1%E5%90%8D%E9%96%A2%E6%95%B0%E3%83%A9%E3%83%A0%E3%83%80%E9%96%A2%E6%95%B0/</link><pubDate>Sun, 06 Aug 2023 23:13:41 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/11.14%E7%84%A1%E5%90%8D%E9%96%A2%E6%95%B0%E3%83%A9%E3%83%A0%E3%83%80%E9%96%A2%E6%95%B0/</guid><description> ラムダ関数とは 1つの文で表現される無名関数 &amp;gt;&amp;gt;&amp;gt; def edit_story(words, func): ... for word in words: ... print(func(word)) ... &amp;gt;&amp;gt;&amp;gt; stairs = [&amp;#39;thud&amp;#39;, &amp;#39;meow&amp;#39;, &amp;#39;thud&amp;#39;, &amp;#39;hiss&amp;#39;] &amp;gt;&amp;gt;&amp;gt; def enliven(word): ... return word.capitalize() + &amp;#39;!&amp;#39; ... &amp;gt;&amp;gt;&amp;gt; edit_story(stairs, enliven) Thud! Meow! Thud! Hiss! 上記のコードから、enliven(word)関数をlambdaに取り替える &amp;gt;&amp;gt;&amp;gt; edit_story(stairs, lambda word: word.capitalize() + &amp;#39;!&amp;#39;) Thud! Meow! Thud! Hiss! ラムダは、ゼロ個以上のカンマ区切りの実引数をとり、その後ろにコロンをつける。 今回の場合、wordという1個の引数をとる</description></item><item><title>【11.13】クロージャー</title><link>https://dddsuz2.github.io/suzmemo/11.13%E3%82%AF%E3%83%AD%E3%83%BC%E3%82%B8%E3%83%A3%E3%83%BC/</link><pubDate>Sun, 06 Aug 2023 23:07:15 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/11.13%E3%82%AF%E3%83%AD%E3%83%BC%E3%82%B8%E3%83%A3%E3%83%BC/</guid><description> 関数内関数はクロージャーとして機能する クロージャーとは ほかの関数によって動的に生成される関数 自分の外で作られた変数の値を変えたり、覚えたりできる &amp;gt;&amp;gt;&amp;gt; def knights2(saying): ... def inner2(): ... return f&amp;#34;We are the knights who say: &amp;#39;{saying}&amp;#39;&amp;#34; ... return inner2 inner2()関数は、sayingの値を知っており、それを覚える return inner2では、inner2関数のコピーを返す 引数によって動的に生成されるinner2は一種のクロージャになっている &amp;gt;&amp;gt;&amp;gt; a = knights2(&amp;#39;Duck&amp;#39;) &amp;gt;&amp;gt;&amp;gt; b = knights2(&amp;#39;Hasenpfeffer&amp;#39;) &amp;gt;&amp;gt;&amp;gt; type(a) &amp;lt;class &amp;#39;function&amp;#39;&amp;gt; &amp;gt;&amp;gt;&amp;gt; type(b) &amp;lt;class &amp;#39;function&amp;#39;&amp;gt; &amp;gt;&amp;gt;&amp;gt; a &amp;lt;function knights2.&amp;lt;locals&amp;gt;.inner2 at 0x7feb0f51cd30&amp;gt; &amp;gt;&amp;gt;&amp;gt; b &amp;lt;function knights2.&amp;lt;locals&amp;gt;.inner2 at 0x7feb0f51cdc0&amp;gt; &amp;gt;&amp;gt;&amp;gt; a() &amp;#34;We are the knights who say: &amp;#39;Duck&amp;#39;&amp;#34; &amp;gt;&amp;gt;&amp;gt; b() &amp;#34;We are the knights who say: &amp;#39;Hasenpfeffer&amp;#39;&amp;#34; aとbを呼び出すと、これらのクロージャーは自分が作られた時に使われていたsayingの内容を覚えている</description></item><item><title>【11.12】関数内関数</title><link>https://dddsuz2.github.io/suzmemo/11.12%E9%96%A2%E6%95%B0%E5%86%85%E9%96%A2%E6%95%B0/</link><pubDate>Sun, 06 Aug 2023 23:03:41 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/11.12%E9%96%A2%E6%95%B0%E5%86%85%E9%96%A2%E6%95%B0/</guid><description> 関数はほかの関数の中で定義することができる 関数内で複数回実行される複雑な処理を実行したいときに役立つ &amp;gt;&amp;gt;&amp;gt; def outer(a, b): ... def inner(c, d): ... return c + d ... return inner(a, b) ... &amp;gt;&amp;gt;&amp;gt; outer(4, 7) 11 &amp;gt;&amp;gt;&amp;gt; def knights(saying): ... def inner(quote): ... return f&amp;#34;We are the knights who say: &amp;#39;{quote}&amp;#39;&amp;#34; ... return inner(saying) ... &amp;gt;&amp;gt;&amp;gt; knights(&amp;#39;Ni!&amp;#39;) &amp;#34;We are the knights who say: &amp;#39;Ni!&amp;#39;&amp;#34;</description></item><item><title>【11.11】第一級オブジェクトとしての関数</title><link>https://dddsuz2.github.io/suzmemo/11.11%E7%AC%AC%E4%B8%80%E7%B4%9A%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%A8%E3%81%97%E3%81%A6%E3%81%AE%E9%96%A2%E6%95%B0/</link><pubDate>Sun, 06 Aug 2023 22:30:29 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/11.11%E7%AC%AC%E4%B8%80%E7%B4%9A%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%A8%E3%81%97%E3%81%A6%E3%81%AE%E9%96%A2%E6%95%B0/</guid><description> Pythonでは全てのものがオブジェクト 関数もオブジェクトである 関数は第1級のオブジェクト 変数に関数を代入したり、他の関数の引数として関数を使ったり、関数からの戻り値として関数を返したりできる 関数は、リスト、タプル、集合、辞書の要素に含められる イミュータブルなので、辞書のキーにすることもできる &amp;gt;&amp;gt;&amp;gt; def answer(): ... print(42) ... &amp;gt;&amp;gt;&amp;gt; answer() 42 &amp;gt;&amp;gt;&amp;gt; def run_something(func): ... func() ... &amp;gt;&amp;gt;&amp;gt; run_something(answer) 42 &amp;gt;&amp;gt;&amp;gt; def add_args(arg1, arg2): ... print(arg1 + arg2) ... &amp;gt;&amp;gt;&amp;gt; type(add_args) &amp;lt;class &amp;#39;function&amp;#39;&amp;gt; &amp;gt;&amp;gt;&amp;gt; def run_something_with_args(func, arg1, arg2): ... func(arg1, arg2) ... &amp;gt;&amp;gt;&amp;gt; run_something_with_args(add_args, 5, 9) 14 &amp;gt;&amp;gt;&amp;gt; def sum_args(*args): ... return sum(args) ... &amp;gt;&amp;gt;&amp;gt; def run_with_positional_args(func, *args): ... return func(*args) ... &amp;gt;&amp;gt;&amp;gt; run_with_positional_args(sum_args, 1, 2, 3, 4) 10</description></item><item><title>【11.10】docstring</title><link>https://dddsuz2.github.io/suzmemo/11.10docstring/</link><pubDate>Sun, 06 Aug 2023 22:25:22 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/11.10docstring/</guid><description> 関数本体の先頭に組み込まれた文字列で、関数定義にドキュメントをつけられる docstringと呼ぶ help()関数を呼び出せば表示される &amp;gt;&amp;gt;&amp;gt; def echo(anything): ... &amp;#34;&amp;#34;&amp;#34;echoは、与えられた入力引数を返す&amp;#34;&amp;#34;&amp;#34; ... return anything ...</description></item><item><title>【11.9】ミュータブル引数とイミュータブル引数</title><link>https://dddsuz2.github.io/suzmemo/11.9%E3%83%9F%E3%83%A5%E3%83%BC%E3%82%BF%E3%83%96%E3%83%AB%E5%BC%95%E6%95%B0%E3%81%A8%E3%82%A4%E3%83%9F%E3%83%A5%E3%83%BC%E3%82%BF%E3%83%96%E3%83%AB%E5%BC%95%E6%95%B0/</link><pubDate>Sun, 06 Aug 2023 22:23:15 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/11.9%E3%83%9F%E3%83%A5%E3%83%BC%E3%82%BF%E3%83%96%E3%83%AB%E5%BC%95%E6%95%B0%E3%81%A8%E3%82%A4%E3%83%9F%E3%83%A5%E3%83%BC%E3%82%BF%E3%83%96%E3%83%AB%E5%BC%95%E6%95%B0/</guid><description> 実引数がミュータブルなら、関数内で対応する仮引数を介して書き換えられる可能性がある &amp;gt;&amp;gt;&amp;gt; outside = [&amp;#39;one&amp;#39;, &amp;#39;fine&amp;#39;, &amp;#39;day&amp;#39;] &amp;gt;&amp;gt;&amp;gt; def mangle(arg): ... arg[1] = &amp;#39;terrible!&amp;#39; ... &amp;gt;&amp;gt;&amp;gt; outside [&amp;#39;one&amp;#39;, &amp;#39;fine&amp;#39;, &amp;#39;day&amp;#39;] &amp;gt;&amp;gt;&amp;gt; mangle(outside) &amp;gt;&amp;gt;&amp;gt; outside [&amp;#39;one&amp;#39;, &amp;#39;terrible!&amp;#39;, &amp;#39;day&amp;#39;]</description></item><item><title>【11.8】**によるキーワード引数の分解、接合（辞書化）</title><link>https://dddsuz2.github.io/suzmemo/11.8%E3%81%AB%E3%82%88%E3%82%8B%E3%82%AD%E3%83%BC%E3%83%AF%E3%83%BC%E3%83%89%E5%BC%95%E6%95%B0%E3%81%AE%E5%88%86%E8%A7%A3%E6%8E%A5%E5%90%88%E8%BE%9E%E6%9B%B8%E5%8C%96/</link><pubDate>Sun, 06 Aug 2023 22:14:05 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/11.8%E3%81%AB%E3%82%88%E3%82%8B%E3%82%AD%E3%83%BC%E3%83%AF%E3%83%BC%E3%83%89%E5%BC%95%E6%95%B0%E3%81%AE%E5%88%86%E8%A7%A3%E6%8E%A5%E5%90%88%E8%BE%9E%E6%9B%B8%E5%8C%96/</guid><description> 2つのアスタリスクを使うことで、キーワード引数を1個の辞書にまとめることができる 引数の名前は辞書のキー、引数の値は辞書のバリューになる &amp;gt;&amp;gt;&amp;gt; def print_kwargs(**kwargs): ... print(&amp;#39;Keyword arguments:&amp;#39;, kwargs) ... &amp;gt;&amp;gt;&amp;gt; print_kwargs() Keyword arguments: {} &amp;gt;&amp;gt;&amp;gt; print_kwargs(wine=&amp;#39;merlot&amp;#39;, entree=&amp;#39;mutton&amp;#39;, dessert=&amp;#39;macaroon&amp;#39;) Keyword arguments: {&amp;#39;wine&amp;#39;: &amp;#39;merlot&amp;#39;, &amp;#39;entree&amp;#39;: &amp;#39;mutton&amp;#39;, &amp;#39;dessert&amp;#39;: &amp;#39;macaroon&amp;#39;}</description></item><item><title>【11.7】*による位置引数の分解、接合（タプル化）</title><link>https://dddsuz2.github.io/suzmemo/11.7%E3%81%AB%E3%82%88%E3%82%8B%E4%BD%8D%E7%BD%AE%E5%BC%95%E6%95%B0%E3%81%AE%E5%88%86%E8%A7%A3%E6%8E%A5%E5%90%88%E3%82%BF%E3%83%97%E3%83%AB%E5%8C%96/</link><pubDate>Sun, 06 Aug 2023 21:51:10 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/11.7%E3%81%AB%E3%82%88%E3%82%8B%E4%BD%8D%E7%BD%AE%E5%BC%95%E6%95%B0%E3%81%AE%E5%88%86%E8%A7%A3%E6%8E%A5%E5%90%88%E3%82%BF%E3%83%97%E3%83%AB%E5%8C%96/</guid><description> 関数定義の中で、仮引数の一部として*を使うと、可変個の位置引数がタプルにまとめられる 関数呼び出しと関数定義でしか使えない &amp;gt;&amp;gt;&amp;gt; def print_args(*args): ... print(&amp;#39;Positional tuple:&amp;#39;, args) ... &amp;gt;&amp;gt;&amp;gt; print_args() Positional tuple: () &amp;gt;&amp;gt;&amp;gt; print_args(3, 2, 1, &amp;#39;wait!&amp;#39;, &amp;#39;uh...&amp;#39;) Positional tuple: (3, 2, 1, &amp;#39;wait!&amp;#39;, &amp;#39;uh...&amp;#39;) 関数にタプル実引数を渡すと、関数は渡されたタプル実引数をタプル仮引数に対応付ける 関数に位置実引数を渡し、関数内でそれらを*args仮引数に「接合」できる タプル実引数argsを関数内で仮引数*argsに「分解」させて関数内でタプル仮引数argsに接合し直すことができる &amp;gt;&amp;gt;&amp;gt; print_args(2, 5, 7, &amp;#39;x&amp;#39;) Positional tuple: (2, 5, 7, &amp;#39;x&amp;#39;) &amp;gt;&amp;gt;&amp;gt; args = (2, 5, 7, &amp;#39;x&amp;#39;) &amp;gt;&amp;gt;&amp;gt; print_args(args) Positional tuple: ((2, 5, 7, &amp;#39;x&amp;#39;),) &amp;gt;&amp;gt;&amp;gt; print_args(*args) Positional tuple: (2, 5, 7, &amp;#39;x&amp;#39;) 関数呼び出しの*argsはタプルargsをカンマ区切りの位置仮引数に分解する 関数定義の*argsは、全ての位置実引数を単一のタプル仮引数argsに接合する 関数呼び出しの*argsは、値が分解することから、吐き出し引数 関数定義のargsは、値を接合するところから、吸い込み引数</description></item><item><title>【11.6】デフォルト引数値の指定</title><link>https://dddsuz2.github.io/suzmemo/11.6%E3%83%87%E3%83%95%E3%82%A9%E3%83%AB%E3%83%88%E5%BC%95%E6%95%B0%E5%80%A4%E3%81%AE%E6%8C%87%E5%AE%9A/</link><pubDate>Sun, 06 Aug 2023 21:28:29 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/11.6%E3%83%87%E3%83%95%E3%82%A9%E3%83%AB%E3%83%88%E5%BC%95%E6%95%B0%E5%80%A4%E3%81%AE%E6%8C%87%E5%AE%9A/</guid><description> 仮引数にはデフォルト値を指定できる 呼び出し元が対応する実引数を渡してこなかったときに使われる &amp;gt;&amp;gt;&amp;gt; def menu(wine, entree, dessert=&amp;#39;pudding&amp;#39;): ... return {&amp;#39;wine&amp;#39;: wine, &amp;#39;entree&amp;#39;: entree, &amp;#39;dessert&amp;#39;: dessert} ... &amp;gt;&amp;gt;&amp;gt; menu(&amp;#39;chardonnay&amp;#39;, &amp;#39;chicken&amp;#39;) {&amp;#39;wine&amp;#39;: &amp;#39;chardonnay&amp;#39;, &amp;#39;entree&amp;#39;: &amp;#39;chicken&amp;#39;, &amp;#39;dessert&amp;#39;: &amp;#39;pudding&amp;#39;} &amp;gt;&amp;gt;&amp;gt; def buggy(arg, result=[]): ... result.append(arg) ... print(result) ... &amp;gt;&amp;gt;&amp;gt; buggy(&amp;#39;a&amp;#39;) [&amp;#39;a&amp;#39;] &amp;gt;&amp;gt;&amp;gt; buggy(&amp;#39;b&amp;#39;) [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;] 2番目のコードで、リストが空なのは呼び出された1回目の時だけ</description></item><item><title>【11.5】キーワード引数</title><link>https://dddsuz2.github.io/suzmemo/11.5%E3%82%AD%E3%83%BC%E3%83%AF%E3%83%BC%E3%83%89%E5%BC%95%E6%95%B0/</link><pubDate>Sun, 06 Aug 2023 21:25:36 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/11.5%E3%82%AD%E3%83%BC%E3%83%AF%E3%83%BC%E3%83%89%E5%BC%95%E6%95%B0/</guid><description> 位置引数の間違いを避けるため、対応する仮引数の名前を指定して実引数を渡すものをキーワード引数という &amp;gt;&amp;gt;&amp;gt; menu(entree=&amp;#39;beef&amp;#39;, dessert=&amp;#39;bagel&amp;#39;, wine=&amp;#39;bordeaux&amp;#39;) {&amp;#39;wine&amp;#39;: &amp;#39;bordeaux&amp;#39;, &amp;#39;entree&amp;#39;: &amp;#39;beef&amp;#39;, &amp;#39;dessert&amp;#39;: &amp;#39;bagel&amp;#39;} &amp;gt;&amp;gt;&amp;gt; menu(&amp;#39;frontenac&amp;#39;, dessert=&amp;#39;flan&amp;#39;, entree=&amp;#39;fish&amp;#39;) {&amp;#39;wine&amp;#39;: &amp;#39;frontenac&amp;#39;, &amp;#39;entree&amp;#39;: &amp;#39;fish&amp;#39;, &amp;#39;dessert&amp;#39;: &amp;#39;flan&amp;#39;}</description></item><item><title>【11.4】位置引数</title><link>https://dddsuz2.github.io/suzmemo/11.4%E4%BD%8D%E7%BD%AE%E5%BC%95%E6%95%B0/</link><pubDate>Sun, 06 Aug 2023 21:22:45 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/11.4%E4%BD%8D%E7%BD%AE%E5%BC%95%E6%95%B0/</guid><description> 関数の引数の先頭から順番に対応する位置の仮引数にコピーされるものを位置引数という 個々の位置の意味を覚えておかなければならない &amp;gt;&amp;gt;&amp;gt; def menu(wine, entree, dessert): ... return {&amp;#39;wine&amp;#39;: wine, &amp;#39;entree&amp;#39;: entree, &amp;#39;dessert&amp;#39;: dessert} ... &amp;gt;&amp;gt;&amp;gt; menu(&amp;#39;chardonnay&amp;#39;, &amp;#39;chicken&amp;#39;, &amp;#39;cake&amp;#39;) {&amp;#39;wine&amp;#39;: &amp;#39;chardonnay&amp;#39;, &amp;#39;entree&amp;#39;: &amp;#39;chicken&amp;#39;, &amp;#39;dessert&amp;#39;: &amp;#39;cake&amp;#39;}</description></item><item><title>【11.3】Noneについて</title><link>https://dddsuz2.github.io/suzmemo/11.3none%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</link><pubDate>Sun, 06 Aug 2023 21:14:52 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/11.3none%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</guid><description>Noneはブール値として評価すると偽になる ブール値のFalseと同じではない ブール値のFalseとNoneを区別するには、Pythonのis演算子を使うとよい 空文字列、空リスト、空辞書、空集合、などはすべてFalseだが、Noneとは等しくない &amp;gt;&amp;gt;&amp;gt; thing = None &amp;gt;&amp;gt;&amp;gt; if thing: ... print(&amp;#34;It&amp;#39;s some thing&amp;#34;) ... else: ... print(&amp;#34;It&amp;#39;s no thing&amp;#34;) ... It&amp;#39;s no thing &amp;gt;&amp;gt;&amp;gt; thing = None &amp;gt;&amp;gt;&amp;gt; if thing is None: ... print(&amp;#34;It&amp;#39;s nothing&amp;#34;) ... else: ... print(&amp;#34;It&amp;#39;s something&amp;#34;) ... It&amp;#39;s nothing &amp;gt;&amp;gt;&amp;gt; def whatis(thing): ... if thing is None: ... print(thing, &amp;#34;is None&amp;#34;) ... elif thing: ... print(thing, &amp;#34;is True&amp;#34;) ... else: ... print(thing, &amp;#34;is False&amp;#34;) .</description></item><item><title>【11.2】実引数と仮引数</title><link>https://dddsuz2.github.io/suzmemo/11.2%E5%AE%9F%E5%BC%95%E6%95%B0%E3%81%A8%E4%BB%AE%E5%BC%95%E6%95%B0/</link><pubDate>Sun, 06 Aug 2023 21:02:23 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/11.2%E5%AE%9F%E5%BC%95%E6%95%B0%E3%81%A8%E4%BB%AE%E5%BC%95%E6%95%B0/</guid><description> 関数を呼び出す時に関数に渡す値を実引数という 英語ではargument 実引数を渡して関数を呼び出すとき、それらの値は関数内の仮引数にコピーされる 英語ではparameter &amp;gt;&amp;gt;&amp;gt; def echo(anything): ... return anything + &amp;#39; &amp;#39; + anything ... &amp;gt;&amp;gt;&amp;gt; echo(&amp;#39;Rumplestiltskin&amp;#39;) &amp;#39;Rumplestiltskin Rumplestiltskin&amp;#39;</description></item><item><title>【11.1】defによる関数の定義</title><link>https://dddsuz2.github.io/suzmemo/11.1def%E3%81%AB%E3%82%88%E3%82%8B%E9%96%A2%E6%95%B0%E3%81%AE%E5%AE%9A%E7%BE%A9/</link><pubDate>Sun, 06 Aug 2023 20:18:35 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/11.1def%E3%81%AB%E3%82%88%E3%82%8B%E9%96%A2%E6%95%B0%E3%81%AE%E5%AE%9A%E7%BE%A9/</guid><description> Pythonで関数を定義するには、defと入力し、関数名と引数を書き、最後に:を書く &amp;gt;&amp;gt;&amp;gt; def do_nothing(): ... pass ... 関数の呼び出し 関数名(引数)という感じで関数を呼び出せる</description></item><item><title>【11】関数</title><link>https://dddsuz2.github.io/suzmemo/11%E9%96%A2%E6%95%B0/</link><pubDate>Sun, 06 Aug 2023 20:14:01 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/11%E9%96%A2%E6%95%B0/</guid><description>何度も使うような手続きをまとめるものが関数
ほかのコードから切り離され、名前をつけたコード 関数は任意の型、任意の個数の入力引数を取り、任意の型、任意の個数の結果を出力する 関数が明示的にreturnを呼び出さなければ、呼び出し元は戻り値としてNoneを受け取る</description></item><item><title>【10.6】frozensetによるイミュータブルな集合の作成</title><link>https://dddsuz2.github.io/suzmemo/10.6frozenset%E3%81%AB%E3%82%88%E3%82%8B%E3%82%A4%E3%83%9F%E3%83%A5%E3%83%BC%E3%82%BF%E3%83%96%E3%83%AB%E3%81%AA%E9%9B%86%E5%90%88%E3%81%AE%E4%BD%9C%E6%88%90/</link><pubDate>Sun, 06 Aug 2023 20:09:36 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/10.6frozenset%E3%81%AB%E3%82%88%E3%82%8B%E3%82%A4%E3%83%9F%E3%83%A5%E3%83%BC%E3%82%BF%E3%83%96%E3%83%AB%E3%81%AA%E9%9B%86%E5%90%88%E3%81%AE%E4%BD%9C%E6%88%90/</guid><description> 書き換えられない集合を作りたいときには、イテラブル引数を指定して、frozenset()を呼び出す &amp;gt;&amp;gt;&amp;gt; frozenset([3, 2, 1]) frozenset({1, 2, 3}) &amp;gt;&amp;gt;&amp;gt; frozenset(set([2, 1, 3])) frozenset({1, 2, 3}) &amp;gt;&amp;gt;&amp;gt; fs = frozenset([3, 2, 1]) &amp;gt;&amp;gt;&amp;gt; fs frozenset({1, 2, 3}) &amp;gt;&amp;gt;&amp;gt; fs.add(4) Traceback (most recent call last): File &amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;, line 1, in &amp;lt;module&amp;gt; AttributeError: &amp;#39;frozenset&amp;#39; object has no attribute &amp;#39;add&amp;#39;</description></item><item><title>【10.5】集合内包表記</title><link>https://dddsuz2.github.io/suzmemo/10.5%E9%9B%86%E5%90%88%E5%86%85%E5%8C%85%E8%A1%A8%E8%A8%98/</link><pubDate>Sun, 06 Aug 2023 20:07:22 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/10.5%E9%9B%86%E5%90%88%E5%86%85%E5%8C%85%E8%A1%A8%E8%A8%98/</guid><description> 集合にも内包表記がある { expression for expression in iterable } if文も使える &amp;gt;&amp;gt;&amp;gt; a_set = {number for number in range(1, 6) if number % 3 == 1} &amp;gt;&amp;gt;&amp;gt; a_set {1, 4}</description></item><item><title>【10.4】組み合わせと集合演算</title><link>https://dddsuz2.github.io/suzmemo/10.4%E7%B5%84%E3%81%BF%E5%90%88%E3%82%8F%E3%81%9B%E3%81%A8%E9%9B%86%E5%90%88%E6%BC%94%E7%AE%97/</link><pubDate>Sun, 06 Aug 2023 18:54:49 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/10.4%E7%B5%84%E3%81%BF%E5%90%88%E3%82%8F%E3%81%9B%E3%81%A8%E9%9B%86%E5%90%88%E6%BC%94%E7%AE%97/</guid><description>&amp;amp;演算を使うことで、集合の要素の組み合わせについてチェックできる 積集合演算子 &amp;gt;&amp;gt;&amp;gt; for name, contents in drinks.items(): ... if contents &amp;amp; {&amp;#39;vermouth&amp;#39;, &amp;#39;orange juice&amp;#39;}: ... print(name) ... martini manhattan screwdriver &amp;gt;&amp;gt;&amp;gt; a = {1, 2} &amp;gt;&amp;gt;&amp;gt; b = {2, 3} &amp;gt;&amp;gt;&amp;gt; a &amp;amp; b {2} &amp;gt;&amp;gt;&amp;gt; a.intersection(b) {2} |演算を使うことで、和集合を調べられる &amp;gt;&amp;gt;&amp;gt; a | b {1, 2, 3} &amp;gt;&amp;gt;&amp;gt; a.union(b) {1, 2, 3} &amp;gt;&amp;gt;&amp;gt; bruss | wruss {&amp;#39;vodka&amp;#39;, &amp;#39;cream&amp;#39;, &amp;#39;kahlua&amp;#39;} 差集合は-またはdiffrence()でえられる &amp;gt;&amp;gt;&amp;gt; a - b {1} &amp;gt;&amp;gt;&amp;gt; bruss - wruss set() &amp;gt;&amp;gt;&amp;gt; wruss - bruss {&amp;#39;cream&amp;#39;} 対称差（排他的論理和）は^またはsymmetric_diffrence()を使う &amp;gt;&amp;gt;&amp;gt; a ^ b {1, 3} &amp;gt;&amp;gt;&amp;gt; a.</description></item><item><title>【10.3】inによる値の有無のテスト</title><link>https://dddsuz2.github.io/suzmemo/10.3in%E3%81%AB%E3%82%88%E3%82%8B%E5%80%A4%E3%81%AE%E6%9C%89%E7%84%A1%E3%81%AE%E3%83%86%E3%82%B9%E3%83%88/</link><pubDate>Sun, 06 Aug 2023 18:49:57 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/10.3in%E3%81%AB%E3%82%88%E3%82%8B%E5%80%A4%E3%81%AE%E6%9C%89%E7%84%A1%E3%81%AE%E3%83%86%E3%82%B9%E3%83%88/</guid><description> 波括弧で囲まれている時 key: value ペアになっていれば辞書 ただ値を並べたものであれば集合 &amp;gt;&amp;gt;&amp;gt; drinks = { ... &amp;#39;martini&amp;#39;: {&amp;#39;vodka&amp;#39;, &amp;#39;vermouth&amp;#39;}, ... &amp;#39;black russian&amp;#39;: {&amp;#39;vodka&amp;#39;, &amp;#39;kahlua&amp;#39;}, ... &amp;#39;white russian&amp;#39;: {&amp;#39;cream&amp;#39;, &amp;#39;kahlua&amp;#39;, &amp;#39;vodka&amp;#39;}, ... &amp;#39;manhattan&amp;#39;: {&amp;#39;rye&amp;#39;, &amp;#39;vermouth&amp;#39;, &amp;#39;bitters&amp;#39;}, ... &amp;#39;screwdriver&amp;#39;: {&amp;#39;orange juice&amp;#39;, &amp;#39;vodka&amp;#39;} ... } &amp;gt;&amp;gt;&amp;gt; for name, contents in drinks.items(): ... if &amp;#39;vodka&amp;#39; in contents: ... print(name) ... martini black russian white russian screwdriver</description></item><item><title>【10.2】removeによる要素の削除</title><link>https://dddsuz2.github.io/suzmemo/10.2remove%E3%81%AB%E3%82%88%E3%82%8B%E8%A6%81%E7%B4%A0%E3%81%AE%E5%89%8A%E9%99%A4/</link><pubDate>Sun, 06 Aug 2023 18:48:08 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/10.2remove%E3%81%AB%E3%82%88%E3%82%8B%E8%A6%81%E7%B4%A0%E3%81%AE%E5%89%8A%E9%99%A4/</guid><description> remove()で値を指定して集合の要素を削除できる &amp;gt;&amp;gt;&amp;gt; s = set((1, 2, 3)) &amp;gt;&amp;gt;&amp;gt; s {1, 2, 3} &amp;gt;&amp;gt;&amp;gt; s.remove(3) &amp;gt;&amp;gt;&amp;gt; s {1, 2}</description></item><item><title>【10.1】addによる要素の追加</title><link>https://dddsuz2.github.io/suzmemo/10.1add%E3%81%AB%E3%82%88%E3%82%8B%E8%A6%81%E7%B4%A0%E3%81%AE%E8%BF%BD%E5%8A%A0/</link><pubDate>Sun, 06 Aug 2023 18:46:51 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/10.1add%E3%81%AB%E3%82%88%E3%82%8B%E8%A6%81%E7%B4%A0%E3%81%AE%E8%BF%BD%E5%8A%A0/</guid><description> 集合に要素を追加したいときには、add()メソッドを使う &amp;gt;&amp;gt;&amp;gt; s = set((1, 2, 3)) &amp;gt;&amp;gt;&amp;gt; s {1, 2, 3} &amp;gt;&amp;gt;&amp;gt; s.add(4) &amp;gt;&amp;gt;&amp;gt; s {1, 2, 3, 4}</description></item><item><title>【10】集合</title><link>https://dddsuz2.github.io/suzmemo/10%E9%9B%86%E5%90%88/</link><pubDate>Sun, 06 Aug 2023 18:39:51 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/10%E9%9B%86%E5%90%88/</guid><description> 集合は、バリューを捨ててキーだけを残した辞書のようなもの
和集合 A または B 積集合 A かつ B set()による生成
または波括弧で生成できる &amp;gt;&amp;gt;&amp;gt; empty_set = set() &amp;gt;&amp;gt;&amp;gt; empty_set set() &amp;gt;&amp;gt;&amp;gt; even_numbers = {0, 2, 4, 6, 8} &amp;gt;&amp;gt;&amp;gt; even_numbers {0, 2, 4, 6, 8} &amp;gt;&amp;gt;&amp;gt; odd_numbers = {1, 3, 5, 7, 9} &amp;gt;&amp;gt;&amp;gt; odd_numbers {1, 3, 5, 7, 9} set()による変換 辞書を渡した場合は、キーだけが使われる &amp;gt;&amp;gt;&amp;gt; set(&amp;#39;letters&amp;#39;) {&amp;#39;e&amp;#39;, &amp;#39;t&amp;#39;, &amp;#39;r&amp;#39;, &amp;#39;s&amp;#39;, &amp;#39;l&amp;#39;} &amp;gt;&amp;gt;&amp;gt; set([&amp;#39;Dasher&amp;#39;, &amp;#39;Dancer&amp;#39;, &amp;#39;Prancer&amp;#39;, &amp;#39;Mason-Dixon&amp;#39;]) {&amp;#39;Prancer&amp;#39;, &amp;#39;Dasher&amp;#39;, &amp;#39;Dancer&amp;#39;, &amp;#39;Mason-Dixon&amp;#39;} &amp;gt;&amp;gt;&amp;gt; set((&amp;#39;Ummagumma&amp;#39;, &amp;#39;Echoes&amp;#39;, &amp;#39;Atom Heart Mother&amp;#39;)) {&amp;#39;Echoes&amp;#39;, &amp;#39;Atom Heart Mother&amp;#39;, &amp;#39;Ummagumma&amp;#39;} &amp;gt;&amp;gt;&amp;gt; set({&amp;#39;apple&amp;#39;: &amp;#39;red&amp;#39;, &amp;#39;orange&amp;#39;: &amp;#39;orange&amp;#39;, &amp;#39;cherry&amp;#39;: &amp;#39;red&amp;#39;}) {&amp;#39;cherry&amp;#39;, &amp;#39;apple&amp;#39;, &amp;#39;orange&amp;#39;} forとinにより反復処理ができる</description></item><item><title>【9.15】辞書内包表記</title><link>https://dddsuz2.github.io/suzmemo/9.15%E8%BE%9E%E6%9B%B8%E5%86%85%E5%8C%85%E8%A1%A8%E8%A8%98/</link><pubDate>Sun, 06 Aug 2023 03:18:23 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/9.15%E8%BE%9E%E6%9B%B8%E5%86%85%E5%8C%85%E8%A1%A8%E8%A8%98/</guid><description> 辞書にも内包表記がある [key_expression: value_expression for expression in iterable] &amp;gt;&amp;gt;&amp;gt; letter_counts = {letter: word.count(letter) for letter in word} &amp;gt;&amp;gt;&amp;gt; letter_counts {&amp;#39;l&amp;#39;: 1, &amp;#39;e&amp;#39;: 2, &amp;#39;t&amp;#39;: 2, &amp;#39;r&amp;#39;: 1, &amp;#39;s&amp;#39;: 1} &amp;gt;&amp;gt;&amp;gt; letter_counts = {letter: word.count(letter) for letter in set(word)} &amp;gt;&amp;gt;&amp;gt; letter_counts {&amp;#39;e&amp;#39;: 2, &amp;#39;t&amp;#39;: 2, &amp;#39;r&amp;#39;: 1, &amp;#39;s&amp;#39;: 1, &amp;#39;l&amp;#39;: 1} &amp;gt;&amp;gt;&amp;gt; vowels = &amp;#39;aeiou&amp;#39; &amp;gt;&amp;gt;&amp;gt; word = &amp;#39;onomatopoeia&amp;#39; &amp;gt;&amp;gt;&amp;gt; vowel_counts = {letter: word.count(letter) for letter in set(word) if letter in vowels} &amp;gt;&amp;gt;&amp;gt; vowel_counts {&amp;#39;e&amp;#39;: 1, &amp;#39;i&amp;#39;: 1, &amp;#39;a&amp;#39;: 2, &amp;#39;o&amp;#39;: 4}</description></item><item><title>【9.14】deepcopyによるコピー</title><link>https://dddsuz2.github.io/suzmemo/9.14deepcopy%E3%81%AB%E3%82%88%E3%82%8B%E3%82%B3%E3%83%94%E3%83%BC/</link><pubDate>Sun, 06 Aug 2023 03:09:02 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/9.14deepcopy%E3%81%AB%E3%82%88%E3%82%8B%E3%82%B3%E3%83%94%E3%83%BC/</guid><description>辞書のバリューがミュータブルなオブジェクトである場合、deepcopy()を使う &amp;gt;&amp;gt;&amp;gt; signals = {&amp;#39;green&amp;#39;: &amp;#39;go&amp;#39;, ... &amp;#39;yellow&amp;#39;: &amp;#39;go faster&amp;#39;, ... &amp;#39;red&amp;#39;: [&amp;#39;stop&amp;#39;, &amp;#39;smile&amp;#39;]} &amp;gt;&amp;gt;&amp;gt; signals_copy = signals.copy() &amp;gt;&amp;gt;&amp;gt; signals_copy {&amp;#39;green&amp;#39;: &amp;#39;go&amp;#39;, &amp;#39;yellow&amp;#39;: &amp;#39;go faster&amp;#39;, &amp;#39;red&amp;#39;: [&amp;#39;stop&amp;#39;, &amp;#39;smile&amp;#39;]} &amp;gt;&amp;gt;&amp;gt; signals[&amp;#39;red&amp;#39;][1] = &amp;#39;sweat&amp;#39; &amp;gt;&amp;gt;&amp;gt; signals {&amp;#39;green&amp;#39;: &amp;#39;go&amp;#39;, &amp;#39;yellow&amp;#39;: &amp;#39;go faster&amp;#39;, &amp;#39;red&amp;#39;: [&amp;#39;stop&amp;#39;, &amp;#39;sweat&amp;#39;]} &amp;gt;&amp;gt;&amp;gt; signals_copy {&amp;#39;green&amp;#39;: &amp;#39;go&amp;#39;, &amp;#39;yellow&amp;#39;: &amp;#39;go faster&amp;#39;, &amp;#39;red&amp;#39;: [&amp;#39;stop&amp;#39;, &amp;#39;sweat&amp;#39;]} &amp;gt;&amp;gt;&amp;gt; import copy &amp;gt;&amp;gt;&amp;gt; signals = {&amp;#39;green&amp;#39;: &amp;#39;go&amp;#39;, &amp;#39;yellow&amp;#39;: &amp;#39;go faster&amp;#39;, &amp;#39;red&amp;#39;: [&amp;#39;stop&amp;#39;, &amp;#39;smile&amp;#39;]} &amp;gt;&amp;gt;&amp;gt; signals = copy.</description></item><item><title>【9.13】copyによるコピー</title><link>https://dddsuz2.github.io/suzmemo/9.13copy%E3%81%AB%E3%82%88%E3%82%8B%E3%82%B3%E3%83%94%E3%83%BC/</link><pubDate>Sun, 06 Aug 2023 03:01:39 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/9.13copy%E3%81%AB%E3%82%88%E3%82%8B%E3%82%B3%E3%83%94%E3%83%BC/</guid><description> キー/バリューペアをコピーしたい場合は、copy()を使う 浅いコピーが行われる 辞書のバリューがイミュータブルであるときのみ正しく（直感的に正しく？）動作する そうでない場合、deepcopy()を使う &amp;gt;&amp;gt;&amp;gt; signals {&amp;#39;green&amp;#39;: &amp;#39;go&amp;#39;, &amp;#39;yellow&amp;#39;: &amp;#39;go faster&amp;#39;, &amp;#39;red&amp;#39;: &amp;#39;smile for the camera&amp;#39;} &amp;gt;&amp;gt;&amp;gt; original_signals = signals.copy() &amp;gt;&amp;gt;&amp;gt; signals[&amp;#39;blue&amp;#39;] = &amp;#39;confuse everyone&amp;#39; &amp;gt;&amp;gt;&amp;gt; signals {&amp;#39;green&amp;#39;: &amp;#39;go&amp;#39;, &amp;#39;yellow&amp;#39;: &amp;#39;go faster&amp;#39;, &amp;#39;red&amp;#39;: &amp;#39;smile for the camera&amp;#39;, &amp;#39;blue&amp;#39;: &amp;#39;confuse everyone&amp;#39;} &amp;gt;&amp;gt;&amp;gt; original_signals {&amp;#39;green&amp;#39;: &amp;#39;go&amp;#39;, &amp;#39;yellow&amp;#39;: &amp;#39;go faster&amp;#39;, &amp;#39;red&amp;#39;: &amp;#39;smile for the camera&amp;#39;}</description></item><item><title>【9.12】inを使ったキーの有無のテスト</title><link>https://dddsuz2.github.io/suzmemo/9.12in%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9F%E3%82%AD%E3%83%BC%E3%81%AE%E6%9C%89%E7%84%A1%E3%81%AE%E3%83%86%E3%82%B9%E3%83%88/</link><pubDate>Sun, 06 Aug 2023 02:57:32 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/9.12in%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9F%E3%82%AD%E3%83%BC%E3%81%AE%E6%9C%89%E7%84%A1%E3%81%AE%E3%83%86%E3%82%B9%E3%83%88/</guid><description> 辞書にあるキーが含まれているかどうかを確認するには、inを使う &amp;gt;&amp;gt;&amp;gt; signals {&amp;#39;green&amp;#39;: &amp;#39;go&amp;#39;, &amp;#39;yellow&amp;#39;: &amp;#39;go faster&amp;#39;, &amp;#39;red&amp;#39;: &amp;#39;smile for the camera&amp;#39;} &amp;gt;&amp;gt;&amp;gt; &amp;#39;green&amp;#39; in signals True &amp;gt;&amp;gt;&amp;gt; &amp;#39;blown&amp;#39; in signals False &amp;gt;&amp;gt;&amp;gt; &amp;#39;go&amp;#39; in signals False</description></item><item><title>【9.11】clearによるすべての要素の削除</title><link>https://dddsuz2.github.io/suzmemo/9.11clear%E3%81%AB%E3%82%88%E3%82%8B%E3%81%99%E3%81%B9%E3%81%A6%E3%81%AE%E8%A6%81%E7%B4%A0%E3%81%AE%E5%89%8A%E9%99%A4/</link><pubDate>Sun, 06 Aug 2023 02:56:21 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/9.11clear%E3%81%AB%E3%82%88%E3%82%8B%E3%81%99%E3%81%B9%E3%81%A6%E3%81%AE%E8%A6%81%E7%B4%A0%E3%81%AE%E5%89%8A%E9%99%A4/</guid><description> 辞書から全てのキーとバリューを削除するには、clear()を使うか、空辞書を代入する &amp;gt;&amp;gt;&amp;gt; pythons.clear() &amp;gt;&amp;gt;&amp;gt; pythons {}</description></item><item><title>【9.10】popによる指定したキーを持つ要素の取得と削除</title><link>https://dddsuz2.github.io/suzmemo/9.10pop%E3%81%AB%E3%82%88%E3%82%8B%E6%8C%87%E5%AE%9A%E3%81%97%E3%81%9F%E3%82%AD%E3%83%BC%E3%82%92%E6%8C%81%E3%81%A4%E8%A6%81%E7%B4%A0%E3%81%AE%E5%8F%96%E5%BE%97%E3%81%A8%E5%89%8A%E9%99%A4/</link><pubDate>Sun, 06 Aug 2023 02:52:54 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/9.10pop%E3%81%AB%E3%82%88%E3%82%8B%E6%8C%87%E5%AE%9A%E3%81%97%E3%81%9F%E3%82%AD%E3%83%BC%E3%82%92%E6%8C%81%E3%81%A4%E8%A6%81%E7%B4%A0%E3%81%AE%E5%8F%96%E5%BE%97%E3%81%A8%E5%89%8A%E9%99%A4/</guid><description> pop()はget()とdelを組み合わせたような動作をする pop()に第二引数としてデフォルトバリューを与えると、キーがなくても例外は起こらない &amp;gt;&amp;gt;&amp;gt; len(pythons) 6 &amp;gt;&amp;gt;&amp;gt; pythons.pop(&amp;#39;Palin&amp;#39;) &amp;#39;Michael&amp;#39; &amp;gt;&amp;gt;&amp;gt; len(pythons) 5</description></item><item><title>【9.9】delによる指定したキーをもつ要素の削除</title><link>https://dddsuz2.github.io/suzmemo/9.9del%E3%81%AB%E3%82%88%E3%82%8B%E6%8C%87%E5%AE%9A%E3%81%97%E3%81%9F%E3%82%AD%E3%83%BC%E3%82%92%E3%82%82%E3%81%A4%E8%A6%81%E7%B4%A0%E3%81%AE%E5%89%8A%E9%99%A4/</link><pubDate>Sun, 06 Aug 2023 02:51:03 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/9.9del%E3%81%AB%E3%82%88%E3%82%8B%E6%8C%87%E5%AE%9A%E3%81%97%E3%81%9F%E3%82%AD%E3%83%BC%E3%82%92%E3%82%82%E3%81%A4%E8%A6%81%E7%B4%A0%E3%81%AE%E5%89%8A%E9%99%A4/</guid><description> delでキーを指定して要素を削除できる &amp;gt;&amp;gt;&amp;gt; del pythons[&amp;#39;Marx&amp;#39;] &amp;gt;&amp;gt;&amp;gt; pythons {&amp;#39;Chapman&amp;#39;: &amp;#39;Graham&amp;#39;, &amp;#39;Cleese&amp;#39;: &amp;#39;John&amp;#39;, &amp;#39;Idle&amp;#39;: &amp;#39;Eric&amp;#39;, &amp;#39;Jones&amp;#39;: &amp;#39;Terry&amp;#39;, &amp;#39;Palin&amp;#39;: &amp;#39;Michael&amp;#39;, &amp;#39;Gilliam&amp;#39;: &amp;#39;Gerry&amp;#39;, &amp;#39;Howard&amp;#39;: &amp;#39;Moe&amp;#39;} &amp;gt;&amp;gt;&amp;gt; del pythons[&amp;#39;Howard&amp;#39;] &amp;gt;&amp;gt;&amp;gt; pythons {&amp;#39;Chapman&amp;#39;: &amp;#39;Graham&amp;#39;, &amp;#39;Cleese&amp;#39;: &amp;#39;John&amp;#39;, &amp;#39;Idle&amp;#39;: &amp;#39;Eric&amp;#39;, &amp;#39;Jones&amp;#39;: &amp;#39;Terry&amp;#39;, &amp;#39;Palin&amp;#39;: &amp;#39;Michael&amp;#39;, &amp;#39;Gilliam&amp;#39;: &amp;#39;Gerry&amp;#39;}</description></item><item><title>【9.8】updateによる辞書の結合</title><link>https://dddsuz2.github.io/suzmemo/9.8update%E3%81%AB%E3%82%88%E3%82%8B%E8%BE%9E%E6%9B%B8%E3%81%AE%E7%B5%90%E5%90%88/</link><pubDate>Sun, 06 Aug 2023 02:47:19 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/9.8update%E3%81%AB%E3%82%88%E3%82%8B%E8%BE%9E%E6%9B%B8%E3%81%AE%E7%B5%90%E5%90%88/</guid><description> update()を使うことで、辞書のキーとバリューを別の辞書にコピーできる 第2の辞書が第1の辞書に含まれているのと同じキーを持っている場合は、第2の辞書のバリューが残る &amp;gt;&amp;gt;&amp;gt; pythons {&amp;#39;Chapman&amp;#39;: &amp;#39;Graham&amp;#39;, &amp;#39;Cleese&amp;#39;: &amp;#39;John&amp;#39;, &amp;#39;Idle&amp;#39;: &amp;#39;Eric&amp;#39;, &amp;#39;Jones&amp;#39;: &amp;#39;Terry&amp;#39;, &amp;#39;Palin&amp;#39;: &amp;#39;Michael&amp;#39;, &amp;#39;Gilliam&amp;#39;: &amp;#39;Gerry&amp;#39;} &amp;gt;&amp;gt;&amp;gt; others = {&amp;#39;Marx&amp;#39;: &amp;#39;Groucho&amp;#39;, &amp;#39;Howard&amp;#39;: &amp;#39;Moe&amp;#39;} &amp;gt;&amp;gt;&amp;gt; pythons.update(others) &amp;gt;&amp;gt;&amp;gt; pythons {&amp;#39;Chapman&amp;#39;: &amp;#39;Graham&amp;#39;, &amp;#39;Cleese&amp;#39;: &amp;#39;John&amp;#39;, &amp;#39;Idle&amp;#39;: &amp;#39;Eric&amp;#39;, &amp;#39;Jones&amp;#39;: &amp;#39;Terry&amp;#39;, &amp;#39;Palin&amp;#39;: &amp;#39;Michael&amp;#39;, &amp;#39;Gilliam&amp;#39;: &amp;#39;Gerry&amp;#39;, &amp;#39;Marx&amp;#39;: &amp;#39;Groucho&amp;#39;, &amp;#39;Howard&amp;#39;: &amp;#39;Moe&amp;#39;} &amp;gt;&amp;gt;&amp;gt; first = {&amp;#39;a&amp;#39;: 1, &amp;#39;b&amp;#39;: 2} &amp;gt;&amp;gt;&amp;gt; second = {&amp;#39;b&amp;#39;: &amp;#39;platypus&amp;#39;} &amp;gt;&amp;gt;&amp;gt; first.update(second) &amp;gt;&amp;gt;&amp;gt; first {&amp;#39;a&amp;#39;: 1, &amp;#39;b&amp;#39;: &amp;#39;platypus&amp;#39;}</description></item><item><title>【9.7】**による辞書の結合</title><link>https://dddsuz2.github.io/suzmemo/9.7%E3%81%AB%E3%82%88%E3%82%8B%E8%BE%9E%E6%9B%B8%E3%81%AE%E7%B5%90%E5%90%88/</link><pubDate>Sun, 06 Aug 2023 02:36:58 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/9.7%E3%81%AB%E3%82%88%E3%82%8B%E8%BE%9E%E6%9B%B8%E3%81%AE%E7%B5%90%E5%90%88/</guid><description> **を使って辞書のマージができる (Python 3.5以降) 実体ではなく参照をコピーする浅いコピーであることに注意する 新しい辞書を作りたい場合は、deepcopyを使用するといい &amp;gt;&amp;gt;&amp;gt; first = {&amp;#39;a&amp;#39;: &amp;#39;agony&amp;#39;, &amp;#39;b&amp;#39;: &amp;#39;bliss&amp;#39;} &amp;gt;&amp;gt;&amp;gt; second = {&amp;#39;b&amp;#39;: &amp;#39;begals&amp;#39;, &amp;#39;c&amp;#39;: &amp;#39;candy&amp;#39;} &amp;gt;&amp;gt;&amp;gt; {**first, **second} {&amp;#39;a&amp;#39;: &amp;#39;agony&amp;#39;, &amp;#39;b&amp;#39;: &amp;#39;begals&amp;#39;, &amp;#39;c&amp;#39;: &amp;#39;candy&amp;#39;} &amp;gt;&amp;gt;&amp;gt; third = {&amp;#39;d&amp;#39;: &amp;#39;donuts&amp;#39;} &amp;gt;&amp;gt;&amp;gt; {**first, **third, **second} {&amp;#39;a&amp;#39;: &amp;#39;agony&amp;#39;, &amp;#39;b&amp;#39;: &amp;#39;begals&amp;#39;, &amp;#39;d&amp;#39;: &amp;#39;donuts&amp;#39;, &amp;#39;c&amp;#39;: &amp;#39;candy&amp;#39;}</description></item><item><title>【9.6】itemsによる全てのキーとバリューペアの取得</title><link>https://dddsuz2.github.io/suzmemo/9.6items%E3%81%AB%E3%82%88%E3%82%8B%E5%85%A8%E3%81%A6%E3%81%AE%E3%82%AD%E3%83%BC%E3%81%A8%E3%83%90%E3%83%AA%E3%83%A5%E3%83%BC%E3%83%9A%E3%82%A2%E3%81%AE%E5%8F%96%E5%BE%97/</link><pubDate>Sun, 06 Aug 2023 02:32:18 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/9.6items%E3%81%AB%E3%82%88%E3%82%8B%E5%85%A8%E3%81%A6%E3%81%AE%E3%82%AD%E3%83%BC%E3%81%A8%E3%83%90%E3%83%AA%E3%83%A5%E3%83%BC%E3%83%9A%E3%82%A2%E3%81%AE%E5%8F%96%E5%BE%97/</guid><description> すべてのキー/バリューペアを取り出したい場合は、items()関数を使う &amp;gt;&amp;gt;&amp;gt; list(signals.items()) [(&amp;#39;green&amp;#39;, &amp;#39;go&amp;#39;), (&amp;#39;yellow&amp;#39;, &amp;#39;go faster&amp;#39;), (&amp;#39;red&amp;#39;, &amp;#39;smile for the camera&amp;#39;)]</description></item><item><title>【9.5】valuesによるすべてのバリューの取得</title><link>https://dddsuz2.github.io/suzmemo/9.5values%E3%81%AB%E3%82%88%E3%82%8B%E3%81%99%E3%81%B9%E3%81%A6%E3%81%AE%E3%83%90%E3%83%AA%E3%83%A5%E3%83%BC%E3%81%AE%E5%8F%96%E5%BE%97/</link><pubDate>Sun, 06 Aug 2023 02:30:47 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/9.5values%E3%81%AB%E3%82%88%E3%82%8B%E3%81%99%E3%81%B9%E3%81%A6%E3%81%AE%E3%83%90%E3%83%AA%E3%83%A5%E3%83%BC%E3%81%AE%E5%8F%96%E5%BE%97/</guid><description> values()で辞書のすべてのバリューを取得できる &amp;gt;&amp;gt;&amp;gt; list(signals.values()) [&amp;#39;go&amp;#39;, &amp;#39;go faster&amp;#39;, &amp;#39;smile for the camera&amp;#39;]</description></item><item><title>【9.4】keysによるすべてのキーの取得</title><link>https://dddsuz2.github.io/suzmemo/9.4keys%E3%81%AB%E3%82%88%E3%82%8B%E3%81%99%E3%81%B9%E3%81%A6%E3%81%AE%E3%82%AD%E3%83%BC%E3%81%AE%E5%8F%96%E5%BE%97/</link><pubDate>Sun, 06 Aug 2023 02:28:29 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/9.4keys%E3%81%AB%E3%82%88%E3%82%8B%E3%81%99%E3%81%B9%E3%81%A6%E3%81%AE%E3%82%AD%E3%83%BC%E3%81%AE%E5%8F%96%E5%BE%97/</guid><description> keys()を使えば、辞書のすべてのキーが取得できる &amp;gt;&amp;gt;&amp;gt; signals = {&amp;#39;green&amp;#39;: &amp;#39;go&amp;#39;, &amp;#39;yellow&amp;#39;: &amp;#39;go faster&amp;#39;, &amp;#39;red&amp;#39;: &amp;#39;smile for the camera&amp;#39;} &amp;gt;&amp;gt;&amp;gt; signals.keys() dict_keys([&amp;#39;green&amp;#39;, &amp;#39;yellow&amp;#39;, &amp;#39;red&amp;#39;])</description></item><item><title>【9.3】[key]かgetによる要素の取得</title><link>https://dddsuz2.github.io/suzmemo/9.3key%E3%81%8Bget%E3%81%AB%E3%82%88%E3%82%8B%E8%A6%81%E7%B4%A0%E3%81%AE%E5%8F%96%E5%BE%97/</link><pubDate>Sun, 06 Aug 2023 02:22:33 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/9.3key%E3%81%8Bget%E3%81%AB%E3%82%88%E3%82%8B%E8%A6%81%E7%B4%A0%E3%81%AE%E5%8F%96%E5%BE%97/</guid><description> 辞書型の要素の取得 辞書とキーを指定して、対応するバリューを取り出す キーが辞書になければ、例外が発生する このような例外を避けるためには、inを使ってあらかじめキーがあるかどうか確かめておく get()メソッドを使えば、キー、オプションのバリューを指定し、キーがあればそのバリューが返される キーがない場合、何も表示されない &amp;gt;&amp;gt;&amp;gt; pythons {&amp;#39;Chapman&amp;#39;: &amp;#39;Graham&amp;#39;, &amp;#39;Cleese&amp;#39;: &amp;#39;John&amp;#39;, &amp;#39;Idle&amp;#39;: &amp;#39;Eric&amp;#39;, &amp;#39;Jones&amp;#39;: &amp;#39;Terry&amp;#39;, &amp;#39;Palin&amp;#39;: &amp;#39;Michael&amp;#39;, &amp;#39;Gilliam&amp;#39;: &amp;#39;Gerry&amp;#39;} &amp;gt;&amp;gt;&amp;gt; pythons.get(&amp;#39;John&amp;#39;) &amp;gt;&amp;gt;&amp;gt; pythons.get(&amp;#39;Jones&amp;#39;) &amp;#39;Terry&amp;#39; &amp;gt;&amp;gt;&amp;gt; pythons.get(&amp;#39;Eric&amp;#39;) &amp;gt;&amp;gt;&amp;gt; pythons.get(&amp;#39;aaa&amp;#39;, &amp;#39;Not a Python&amp;#39;) &amp;#39;Not a Python&amp;#39;</description></item><item><title>【9.2】[key]による要素の追加、削除</title><link>https://dddsuz2.github.io/suzmemo/9.2key%E3%81%AB%E3%82%88%E3%82%8B%E8%A6%81%E7%B4%A0%E3%81%AE%E8%BF%BD%E5%8A%A0%E5%89%8A%E9%99%A4/</link><pubDate>Sun, 06 Aug 2023 02:18:46 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/9.2key%E3%81%AB%E3%82%88%E3%82%8B%E8%A6%81%E7%B4%A0%E3%81%AE%E8%BF%BD%E5%8A%A0%E5%89%8A%E9%99%A4/</guid><description> 辞書に要素を追加する場合 キーを使って要素を参照し、バリューを代入する &amp;gt;&amp;gt;&amp;gt; pythons = { ... &amp;#39;Chapman&amp;#39;: &amp;#39;Graham&amp;#39;, ... &amp;#39;Cleese&amp;#39;: &amp;#39;John&amp;#39;, ... &amp;#39;Idle&amp;#39;: &amp;#39;Eric&amp;#39;, ... &amp;#39;Jones&amp;#39;: &amp;#39;Terry&amp;#39;, ... &amp;#39;Palin&amp;#39;: &amp;#39;Michael&amp;#39;, ... } &amp;gt;&amp;gt;&amp;gt; pythons {&amp;#39;Chapman&amp;#39;: &amp;#39;Graham&amp;#39;, &amp;#39;Cleese&amp;#39;: &amp;#39;John&amp;#39;, &amp;#39;Idle&amp;#39;: &amp;#39;Eric&amp;#39;, &amp;#39;Jones&amp;#39;: &amp;#39;Terry&amp;#39;, &amp;#39;Palin&amp;#39;: &amp;#39;Michael&amp;#39;} &amp;gt;&amp;gt;&amp;gt; pythons[&amp;#39;Gilliam&amp;#39;] = &amp;#39;Gerry&amp;#39; &amp;gt;&amp;gt;&amp;gt; pythons {&amp;#39;Chapman&amp;#39;: &amp;#39;Graham&amp;#39;, &amp;#39;Cleese&amp;#39;: &amp;#39;John&amp;#39;, &amp;#39;Idle&amp;#39;: &amp;#39;Eric&amp;#39;, &amp;#39;Jones&amp;#39;: &amp;#39;Terry&amp;#39;, &amp;#39;Palin&amp;#39;: &amp;#39;Michael&amp;#39;, &amp;#39;Gilliam&amp;#39;: &amp;#39;Gerry&amp;#39;}</description></item><item><title>【9.1】dictによる変換</title><link>https://dddsuz2.github.io/suzmemo/9.1dict%E3%81%AB%E3%82%88%E3%82%8B%E5%A4%89%E6%8F%9B/</link><pubDate>Sun, 06 Aug 2023 02:14:24 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/9.1dict%E3%81%AB%E3%82%88%E3%82%8B%E5%A4%89%E6%8F%9B/</guid><description> 2要素のシーケンスを含むものなら何でもdict()関数で辞書型に変換できる &amp;gt;&amp;gt;&amp;gt; lol = [[&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;], [&amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;], [&amp;#39;e&amp;#39;, &amp;#39;f&amp;#39;]] &amp;gt;&amp;gt;&amp;gt; dict(lol) {&amp;#39;a&amp;#39;: &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;: &amp;#39;d&amp;#39;, &amp;#39;e&amp;#39;: &amp;#39;f&amp;#39;} &amp;gt;&amp;gt;&amp;gt; lot = [(&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;), (&amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;), (&amp;#39;e&amp;#39;, &amp;#39;f&amp;#39;)] &amp;gt;&amp;gt;&amp;gt; dict(lot) {&amp;#39;a&amp;#39;: &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;: &amp;#39;d&amp;#39;, &amp;#39;e&amp;#39;: &amp;#39;f&amp;#39;} &amp;gt;&amp;gt;&amp;gt; tol = ([&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;], [&amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;], [&amp;#39;e&amp;#39;, &amp;#39;f&amp;#39;]) &amp;gt;&amp;gt;&amp;gt; dict(tol) {&amp;#39;a&amp;#39;: &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;: &amp;#39;d&amp;#39;, &amp;#39;e&amp;#39;: &amp;#39;f&amp;#39;} &amp;gt;&amp;gt;&amp;gt; los = [&amp;#39;ab&amp;#39;, &amp;#39;cd&amp;#39;, &amp;#39;ef&amp;#39;] &amp;gt;&amp;gt;&amp;gt; dict(los) {&amp;#39;a&amp;#39;: &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;: &amp;#39;d&amp;#39;, &amp;#39;e&amp;#39;: &amp;#39;f&amp;#39;} &amp;gt;&amp;gt;&amp;gt; tos = (&amp;#39;ab&amp;#39;, &amp;#39;cd&amp;#39;, &amp;#39;ef&amp;#39;) &amp;gt;&amp;gt;&amp;gt; dict(tos) {&amp;#39;a&amp;#39;: &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;: &amp;#39;d&amp;#39;, &amp;#39;e&amp;#39;: &amp;#39;f&amp;#39;}</description></item><item><title>【9】辞書</title><link>https://dddsuz2.github.io/suzmemo/9%E8%BE%9E%E6%9B%B8/</link><pubDate>Sun, 06 Aug 2023 02:06:17 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/9%E8%BE%9E%E6%9B%B8/</guid><description>辞書は、要素のバリュー（値）に一意なキーを与える
値の代入に、オフセットは使わない 辞書のキーはイミュータブルなオブジェクトでなければならない {}による生成
&amp;gt;&amp;gt;&amp;gt; empty_dict = {} &amp;gt;&amp;gt;&amp;gt; empty_dict {} &amp;gt;&amp;gt;&amp;gt; bierce = { &amp;#34;day&amp;#34;: &amp;#34;A period of twenty-four hours, mostly, misspent&amp;#34;, ... &amp;#34;positive&amp;#34;: &amp;#34;Mistaken at the top of one&amp;#39;s voice&amp;#34;, ... &amp;#34;misfortune&amp;#34;: &amp;#34;The kind of fortune that never misses&amp;#34;, ... } &amp;gt;&amp;gt;&amp;gt; bierce {&amp;#39;day&amp;#39;: &amp;#39;A period of twenty-four hours, mostly, misspent&amp;#39;, &amp;#39;positive&amp;#39;: &amp;#34;Mistaken at the top of one&amp;#39;s voice&amp;#34;, &amp;#39;misfortune&amp;#39;: &amp;#39;The kind of fortune that never misses&amp;#39;} dictによる生成 &amp;gt;&amp;gt;&amp;gt; acme_customer = dict(first=&amp;#34;Wile&amp;#34;, middle=&amp;#34;E&amp;#34;, last=&amp;#34;Coyote&amp;#34;) &amp;gt;&amp;gt;&amp;gt; acme_customer {&amp;#39;first&amp;#39;: &amp;#39;Wile&amp;#39;, &amp;#39;middle&amp;#39;: &amp;#39;E&amp;#39;, &amp;#39;last&amp;#39;: &amp;#39;Coyote&amp;#39;} リストと同様に、辞書に変更を加えると、その遺書を参照しているすべての名前に影響が及ぶ</description></item><item><title>【8.1.5】タプルとリストの比較</title><link>https://dddsuz2.github.io/suzmemo/8.1.5%E3%82%BF%E3%83%97%E3%83%AB%E3%81%A8%E3%83%AA%E3%82%B9%E3%83%88%E3%81%AE%E6%AF%94%E8%BC%83/</link><pubDate>Sat, 05 Aug 2023 23:14:38 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/8.1.5%E3%82%BF%E3%83%97%E3%83%AB%E3%81%A8%E3%83%AA%E3%82%B9%E3%83%88%E3%81%AE%E6%AF%94%E8%BC%83/</guid><description>リストと比べたときのタプルのメリット
タプルは、消費スペースが小さい
タプルの要素は、誤って書き換える危険がない
タプルは辞書のキーとして使える
名前付きタプルは、オブジェクトの代用品となる
タプル内包表記は存在しない
ミュータブル型には内包表記があるが、イミュータブル型にはそんなものはない　</description></item><item><title>【8.2.20】リスト内表記の使い方</title><link>https://dddsuz2.github.io/suzmemo/8.2.20%E3%83%AA%E3%82%B9%E3%83%88%E5%86%85%E8%A1%A8%E8%A8%98%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9/</link><pubDate>Sat, 05 Aug 2023 23:03:57 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/8.2.20%E3%83%AA%E3%82%B9%E3%83%88%E5%86%85%E8%A1%A8%E8%A8%98%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9/</guid><description>リスト内表記の形式 [expression for item in iterable] &amp;gt;&amp;gt;&amp;gt; number_list = [number for number in range(1, 6)] &amp;gt;&amp;gt;&amp;gt; number_list [1, 2, 3, 4, 5] &amp;gt;&amp;gt;&amp;gt; number_list = [number - 1 for number in range(1, 6)] &amp;gt;&amp;gt;&amp;gt; number_list [0, 1, 2, 3, 4] &amp;gt;&amp;gt;&amp;gt; number_list = [number for number in range(1, 6) if number % 2 == 1] &amp;gt;&amp;gt;&amp;gt; number_list [1, 3, 5] &amp;gt;&amp;gt;&amp;gt; rows = range(1, 4) &amp;gt;&amp;gt;&amp;gt; cols = range(1, 3) &amp;gt;&amp;gt;&amp;gt; cells = [(row, col) for in rows for col in cols] &amp;gt;&amp;gt;&amp;gt; cells = [(row, col) for row in rows for col in cols] &amp;gt;&amp;gt;&amp;gt; for cell in cells: .</description></item><item><title>【8.2.19】zipによる複数のシーケンスの反復処理</title><link>https://dddsuz2.github.io/suzmemo/8.2.19zip%E3%81%AB%E3%82%88%E3%82%8B%E8%A4%87%E6%95%B0%E3%81%AE%E3%82%B7%E3%83%BC%E3%82%B1%E3%83%B3%E3%82%B9%E3%81%AE%E5%8F%8D%E5%BE%A9%E5%87%A6%E7%90%86/</link><pubDate>Sat, 05 Aug 2023 22:54:32 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/8.2.19zip%E3%81%AB%E3%82%88%E3%82%8B%E8%A4%87%E6%95%B0%E3%81%AE%E3%82%B7%E3%83%BC%E3%82%B1%E3%83%B3%E3%82%B9%E3%81%AE%E5%8F%8D%E5%BE%A9%E5%87%A6%E7%90%86/</guid><description> zip()を使えば、複数のシーケンスを並行して反復処理できる 最も短いシーケンスの処理をし尽くしたときに止まる zip()から返ってくる値は、タプルやリストに変換できる &amp;gt;&amp;gt;&amp;gt; english = &amp;#39;monday&amp;#39;, &amp;#39;tuesday&amp;#39;, &amp;#39;wednesday&amp;#39; &amp;gt;&amp;gt;&amp;gt; french = &amp;#39;lundi&amp;#39;, &amp;#39;mardi&amp;#39;, &amp;#39;mercredi&amp;#39; &amp;gt;&amp;gt;&amp;gt; list(zip(english, french)) [(&amp;#39;monday&amp;#39;, &amp;#39;lundi&amp;#39;), (&amp;#39;tuesday&amp;#39;, &amp;#39;mardi&amp;#39;), (&amp;#39;wednesday&amp;#39;, &amp;#39;mercredi&amp;#39;)] &amp;gt;&amp;gt;&amp;gt; dict(zip(english, french)) {&amp;#39;monday&amp;#39;: &amp;#39;lundi&amp;#39;, &amp;#39;tuesday&amp;#39;: &amp;#39;mardi&amp;#39;, &amp;#39;wednesday&amp;#39;: &amp;#39;mercredi&amp;#39;}</description></item><item><title>【8.2.18】forとinによる反復処理</title><link>https://dddsuz2.github.io/suzmemo/8.2.18for%E3%81%A8in%E3%81%AB%E3%82%88%E3%82%8B%E5%8F%8D%E5%BE%A9%E5%87%A6%E7%90%86/</link><pubDate>Sat, 05 Aug 2023 22:49:02 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/8.2.18for%E3%81%A8in%E3%81%AB%E3%82%88%E3%82%8B%E5%8F%8D%E5%BE%A9%E5%87%A6%E7%90%86/</guid><description> 大体前に書いたforとinによる反復処理と同じ breakによるループの終了 breakされずに終了した場合のelse などが使える</description></item><item><title>【8.2.17】deepcopyによるすべての要素のコピー</title><link>https://dddsuz2.github.io/suzmemo/8.2.17deepcopy%E3%81%AB%E3%82%88%E3%82%8B%E3%81%99%E3%81%B9%E3%81%A6%E3%81%AE%E8%A6%81%E7%B4%A0%E3%81%AE%E3%82%B3%E3%83%94%E3%83%BC/</link><pubDate>Sat, 05 Aug 2023 22:34:03 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/8.2.17deepcopy%E3%81%AB%E3%82%88%E3%82%8B%E3%81%99%E3%81%B9%E3%81%A6%E3%81%AE%E8%A6%81%E7%B4%A0%E3%81%AE%E3%82%B3%E3%83%94%E3%83%BC/</guid><description>copy()関数は、リストの要素がすべてイミュータブルである場合にうまく機能する ミュータブルな値（リスト、集合、辞書）の場合は参照である オリジナルかコピーのどちらかに変更を加えると、両方に変更が反映される &amp;gt;&amp;gt;&amp;gt; a = [1, 2, [8, 9]] &amp;gt;&amp;gt;&amp;gt; b = a.copy() &amp;gt;&amp;gt;&amp;gt; c = list(a) &amp;gt;&amp;gt;&amp;gt; d = a[:] &amp;gt;&amp;gt;&amp;gt; a [1, 2, [8, 9]] &amp;gt;&amp;gt;&amp;gt; b [1, 2, [8, 9]] &amp;gt;&amp;gt;&amp;gt; c [1, 2, [8, 9]] &amp;gt;&amp;gt;&amp;gt; d [1, 2, [8, 9]] &amp;gt;&amp;gt;&amp;gt; a[2][1] = 10 &amp;gt;&amp;gt;&amp;gt; a [1, 2, [8, 10]] &amp;gt;&amp;gt;&amp;gt; b [1, 2, [8, 10]] &amp;gt;&amp;gt;&amp;gt; c [1, 2, [8, 10]] &amp;gt;&amp;gt;&amp;gt; d [1, 2, [8, 10]] a[2]の値はリストなので、その要素は書き換えられる b, c, dを作るために使ったリストのコピーは全て浅いコピー（shallow copy） これを解決するには、deepcopy()関数を使う &amp;gt;&amp;gt;&amp;gt; import copy &amp;gt;&amp;gt;&amp;gt; a = [1, 2, [8, 9]] &amp;gt;&amp;gt;&amp;gt; b = copy.</description></item><item><title>【8.2.16】copy,list,スライスによるコピー</title><link>https://dddsuz2.github.io/suzmemo/8.2.16copylist%E3%82%B9%E3%83%A9%E3%82%A4%E3%82%B9%E3%81%AB%E3%82%88%E3%82%8B%E3%82%B3%E3%83%94%E3%83%BC/</link><pubDate>Sat, 05 Aug 2023 22:28:20 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/8.2.16copylist%E3%82%B9%E3%83%A9%E3%82%A4%E3%82%B9%E3%81%AB%E3%82%88%E3%82%8B%E3%82%B3%E3%83%94%E3%83%BC/</guid><description> リストの値を独立の新しいリストにコピーする リストのcopy()メソッド list()関数 リストスライス[:] &amp;gt;&amp;gt;&amp;gt; a = [1, 2, 3] &amp;gt;&amp;gt;&amp;gt; b = a.copy() &amp;gt;&amp;gt;&amp;gt; c = list(a) &amp;gt;&amp;gt;&amp;gt; d = a[:] これらのb, c, dは全て値のコピー &amp;gt;&amp;gt;&amp;gt; a [&amp;#39;integer lists are boring&amp;#39;, 2, 3] &amp;gt;&amp;gt;&amp;gt; b [1, 2, 3] &amp;gt;&amp;gt;&amp;gt; c [1, 2, 3] &amp;gt;&amp;gt;&amp;gt; d [1, 2, 3]</description></item><item><title>【8.2.15】=によるリストの代入</title><link>https://dddsuz2.github.io/suzmemo/8.2.15%E3%81%AB%E3%82%88%E3%82%8B%E3%83%AA%E3%82%B9%E3%83%88%E3%81%AE%E4%BB%A3%E5%85%A5/</link><pubDate>Sat, 05 Aug 2023 22:25:28 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/8.2.15%E3%81%AB%E3%82%88%E3%82%8B%E3%83%AA%E3%82%B9%E3%83%88%E3%81%AE%E4%BB%A3%E5%85%A5/</guid><description> 1つのリストを複数の変数に代入すると、その中の1つでリストを書き換えたときに他も書き換えられる 2つのタグについている糸はどちらも同じ箱につながっている &amp;gt;&amp;gt;&amp;gt; a = [1, 2, 3] &amp;gt;&amp;gt;&amp;gt; a [1, 2, 3] &amp;gt;&amp;gt;&amp;gt; b = a &amp;gt;&amp;gt;&amp;gt; b [1, 2, 3] &amp;gt;&amp;gt;&amp;gt; a[0] = &amp;#39;suprise&amp;#39; &amp;gt;&amp;gt;&amp;gt; a [&amp;#39;suprise&amp;#39;, 2, 3] &amp;gt;&amp;gt;&amp;gt; b [&amp;#39;suprise&amp;#39;, 2, 3]</description></item><item><title>【8.2.14】sort,sortedによる並び替え</title><link>https://dddsuz2.github.io/suzmemo/8.2.14sortsorted%E3%81%AB%E3%82%88%E3%82%8B%E4%B8%A6%E3%81%B3%E6%9B%BF%E3%81%88/</link><pubDate>Sat, 05 Aug 2023 22:21:38 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/8.2.14sortsorted%E3%81%AB%E3%82%88%E3%82%8B%E4%B8%A6%E3%81%B3%E6%9B%BF%E3%81%88/</guid><description> リストを値の順序で並び替える場合 リスト関数のsort()は、インプレースにリスト自体をソートする ソート元自体のリストが変更される インプレース 元のデータを直接変更する操作を指すらしい 組み込み関数のsorted()は、ソートされたリストのコピーを返す ソート元自体のリストは変更されない reverse=Trueを指定すれば降順になる</description></item><item><title>【8.2.13】joinによる文字列への変換</title><link>https://dddsuz2.github.io/suzmemo/8.2.13join%E3%81%AB%E3%82%88%E3%82%8B%E6%96%87%E5%AD%97%E5%88%97%E3%81%B8%E3%81%AE%E5%A4%89%E6%8F%9B/</link><pubDate>Sat, 05 Aug 2023 21:44:19 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/8.2.13join%E3%81%AB%E3%82%88%E3%82%8B%E6%96%87%E5%AD%97%E5%88%97%E3%81%B8%E3%81%AE%E5%A4%89%E6%8F%9B/</guid><description> join()を使ってリストを文字列に変換できる joinの引数は文字列か文字列のイテラブル &amp;gt;&amp;gt;&amp;gt; &amp;#39;,&amp;#39;.join(maxes) &amp;#39;Groucho,Gummo,Harpo,Zeppo,Gummo,Karl,Gummo,Karl&amp;#39;</description></item><item><title>【8.2.12】countによる値の個数の計算</title><link>https://dddsuz2.github.io/suzmemo/8.2.12count%E3%81%AB%E3%82%88%E3%82%8B%E5%80%A4%E3%81%AE%E5%80%8B%E6%95%B0%E3%81%AE%E8%A8%88%E7%AE%97/</link><pubDate>Sat, 05 Aug 2023 21:42:07 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/8.2.12count%E3%81%AB%E3%82%88%E3%82%8B%E5%80%A4%E3%81%AE%E5%80%8B%E6%95%B0%E3%81%AE%E8%A8%88%E7%AE%97/</guid><description> 値がリストに何個含まれているか計算するにはcountを使う &amp;gt;&amp;gt;&amp;gt; maxes.count(&amp;#39;Gummo&amp;#39;) 3</description></item><item><title>【8.2.11】inによる値の有無のテスト</title><link>https://dddsuz2.github.io/suzmemo/8.2.11in%E3%81%AB%E3%82%88%E3%82%8B%E5%80%A4%E3%81%AE%E6%9C%89%E7%84%A1%E3%81%AE%E3%83%86%E3%82%B9%E3%83%88/</link><pubDate>Sat, 05 Aug 2023 21:39:06 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/8.2.11in%E3%81%AB%E3%82%88%E3%82%8B%E5%80%A4%E3%81%AE%E6%9C%89%E7%84%A1%E3%81%AE%E3%83%86%E3%82%B9%E3%83%88/</guid><description> リストに値が存在するかどうかをテストするには、inを使う &amp;gt;&amp;gt;&amp;gt; &amp;#39;Groucho&amp;#39; in maxes True &amp;gt;&amp;gt;&amp;gt; &amp;#39;Bob&amp;#39; in maxes False</description></item><item><title>【8.2.10】indexで要素の値から要素のオフセットを調べることができる</title><link>https://dddsuz2.github.io/suzmemo/8.2.10index%E3%81%A7%E8%A6%81%E7%B4%A0%E3%81%AE%E5%80%A4%E3%81%8B%E3%82%89%E8%A6%81%E7%B4%A0%E3%81%AE%E3%82%AA%E3%83%95%E3%82%BB%E3%83%83%E3%83%88%E3%82%92%E8%AA%BF%E3%81%B9%E3%82%8B%E3%81%93%E3%81%A8%E3%81%8C%E3%81%A7%E3%81%8D%E3%82%8B/</link><pubDate>Sat, 05 Aug 2023 21:36:27 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/8.2.10index%E3%81%A7%E8%A6%81%E7%B4%A0%E3%81%AE%E5%80%A4%E3%81%8B%E3%82%89%E8%A6%81%E7%B4%A0%E3%81%AE%E3%82%AA%E3%83%95%E3%82%BB%E3%83%83%E3%83%88%E3%82%92%E8%AA%BF%E3%81%B9%E3%82%8B%E3%81%93%E3%81%A8%E3%81%8C%E3%81%A7%E3%81%8D%E3%82%8B/</guid><description> index()を使うことで、要素の値からその要素のリスト内でのオフセットを調べることができる 複数ある場合は、最初の要素のオフセットだけが返される &amp;gt;&amp;gt;&amp;gt; maxes [&amp;#39;Groucho&amp;#39;, &amp;#39;Gummo&amp;#39;, &amp;#39;Harpo&amp;#39;, &amp;#39;Zeppo&amp;#39;, &amp;#39;Gummo&amp;#39;, &amp;#39;Karl&amp;#39;, &amp;#39;Gummo&amp;#39;, &amp;#39;Karl&amp;#39;] &amp;gt;&amp;gt;&amp;gt; maxes.index(&amp;#39;Zeppo&amp;#39;) 3 &amp;gt;&amp;gt;&amp;gt; maxes.index(&amp;#39;Gummo&amp;#39;) 1</description></item><item><title>【8.2.9】clearによるすべての要素の削除</title><link>https://dddsuz2.github.io/suzmemo/8.2.9clear%E3%81%AB%E3%82%88%E3%82%8B%E3%81%99%E3%81%B9%E3%81%A6%E3%81%AE%E8%A6%81%E7%B4%A0%E3%81%AE%E5%89%8A%E9%99%A4/</link><pubDate>Sat, 05 Aug 2023 21:33:20 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/8.2.9clear%E3%81%AB%E3%82%88%E3%82%8B%E3%81%99%E3%81%B9%E3%81%A6%E3%81%AE%E8%A6%81%E7%B4%A0%E3%81%AE%E5%89%8A%E9%99%A4/</guid><description> clearを使うことで、すべての要素をリストから削除できる &amp;gt;&amp;gt;&amp;gt; work_quotes = [1, 2, 3, 4, 5, 6, 7] &amp;gt;&amp;gt;&amp;gt; work_quotes [1, 2, 3, 4, 5, 6, 7] &amp;gt;&amp;gt;&amp;gt; work_quotes.clear() &amp;gt;&amp;gt;&amp;gt; work_quotes []</description></item><item><title>【8.2.8】popでオフセットを指定して要素を取り出し削除する</title><link>https://dddsuz2.github.io/suzmemo/8.2.8pop%E3%81%A7%E3%82%AA%E3%83%95%E3%82%BB%E3%83%83%E3%83%88%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%97%E3%81%A6%E8%A6%81%E7%B4%A0%E3%82%92%E5%8F%96%E3%82%8A%E5%87%BA%E3%81%97%E5%89%8A%E9%99%A4%E3%81%99%E3%82%8B/</link><pubDate>Sat, 05 Aug 2023 21:31:22 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/8.2.8pop%E3%81%A7%E3%82%AA%E3%83%95%E3%82%BB%E3%83%83%E3%83%88%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%97%E3%81%A6%E8%A6%81%E7%B4%A0%E3%82%92%E5%8F%96%E3%82%8A%E5%87%BA%E3%81%97%E5%89%8A%E9%99%A4%E3%81%99%E3%82%8B/</guid><description> pop()を使うことで、リストから要素を取り出し、同時にリストからその要素を削除できる 引数を指定しなければ、オフセットとして-1が使われる つまり末尾だね &amp;gt;&amp;gt;&amp;gt; maxes [&amp;#39;Groucho&amp;#39;, &amp;#39;Chico&amp;#39;, &amp;#39;Gummo&amp;#39;, &amp;#39;Harpo&amp;#39;, &amp;#39;Zeppo&amp;#39;, &amp;#39;Gummo&amp;#39;, &amp;#39;Karl&amp;#39;, &amp;#39;Gummo&amp;#39;, &amp;#39;Karl&amp;#39;] &amp;gt;&amp;gt;&amp;gt; maxes.pop(1) &amp;#39;Chico&amp;#39; &amp;gt;&amp;gt;&amp;gt; maxes [&amp;#39;Groucho&amp;#39;, &amp;#39;Gummo&amp;#39;, &amp;#39;Harpo&amp;#39;, &amp;#39;Zeppo&amp;#39;, &amp;#39;Gummo&amp;#39;, &amp;#39;Karl&amp;#39;, &amp;#39;Gummo&amp;#39;, &amp;#39;Karl&amp;#39;]</description></item><item><title>【8.2.7】delによるオフセットを指定した要素の削除</title><link>https://dddsuz2.github.io/suzmemo/8.2.7del%E3%81%AB%E3%82%88%E3%82%8B%E3%82%AA%E3%83%95%E3%82%BB%E3%83%83%E3%83%88%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%97%E3%81%9F%E8%A6%81%E7%B4%A0%E3%81%AE%E5%89%8A%E9%99%A4/</link><pubDate>Sat, 05 Aug 2023 21:27:48 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/8.2.7del%E3%81%AB%E3%82%88%E3%82%8B%E3%82%AA%E3%83%95%E3%82%BB%E3%83%83%E3%83%88%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%97%E3%81%9F%E8%A6%81%E7%B4%A0%E3%81%AE%E5%89%8A%E9%99%A4/</guid><description> delによってオフセットを指定してリストから要素を削除できる delはPythonの文であり、リストのメソッドではない 代入の逆であり、Pythonオブジェクトから名前を切り離す その名前がオブジェクトの最後の参照なら、オブジェクトのメモリを開放する &amp;gt;&amp;gt;&amp;gt; maxes [&amp;#39;Groucho&amp;#39;, &amp;#39;Chico&amp;#39;, &amp;#39;Gummo&amp;#39;, &amp;#39;Harpo&amp;#39;, &amp;#39;Zeppo&amp;#39;, &amp;#39;Gummo&amp;#39;, &amp;#39;Karl&amp;#39;, &amp;#39;Gummo&amp;#39;, &amp;#39;Karl&amp;#39;, [&amp;#39;Gummo&amp;#39;, &amp;#39;Karl&amp;#39;]] &amp;gt;&amp;gt;&amp;gt; maxes[-1] [&amp;#39;Gummo&amp;#39;, &amp;#39;Karl&amp;#39;] &amp;gt;&amp;gt;&amp;gt; del maxes[-1] &amp;gt;&amp;gt;&amp;gt; maxes [&amp;#39;Groucho&amp;#39;, &amp;#39;Chico&amp;#39;, &amp;#39;Gummo&amp;#39;, &amp;#39;Harpo&amp;#39;, &amp;#39;Zeppo&amp;#39;, &amp;#39;Gummo&amp;#39;, &amp;#39;Karl&amp;#39;, &amp;#39;Gummo&amp;#39;, &amp;#39;Karl&amp;#39;]</description></item><item><title>【8.2.6】スライスによる要素の書き換え</title><link>https://dddsuz2.github.io/suzmemo/8.2.6%E3%82%B9%E3%83%A9%E3%82%A4%E3%82%B9%E3%81%AB%E3%82%88%E3%82%8B%E8%A6%81%E7%B4%A0%E3%81%AE%E6%9B%B8%E3%81%8D%E6%8F%9B%E3%81%88/</link><pubDate>Sat, 05 Aug 2023 21:20:08 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/8.2.6%E3%82%B9%E3%83%A9%E3%82%A4%E3%82%B9%E3%81%AB%E3%82%88%E3%82%8B%E8%A6%81%E7%B4%A0%E3%81%AE%E6%9B%B8%E3%81%8D%E6%8F%9B%E3%81%88/</guid><description>スライスによる要素の書き換え スライスを使ってサブリストに値を代入することができる &amp;gt;&amp;gt;&amp;gt; numbers = [1, 2, 3, 4] &amp;gt;&amp;gt;&amp;gt; numbers[1:3] = [8, 9] &amp;gt;&amp;gt;&amp;gt; numbers [1, 8, 9, 4] リストに代入しようとしている右辺値は、左辺のスライスと要素数が等しくなくてもよい &amp;gt;&amp;gt;&amp;gt; numbers = [1, 2, 3, 4] &amp;gt;&amp;gt;&amp;gt; numbers[1:3] = [7, 8, 9] &amp;gt;&amp;gt;&amp;gt; numbers [1, 7, 8, 9, 4] &amp;gt;&amp;gt;&amp;gt; numbers[1:3] = [] &amp;gt;&amp;gt;&amp;gt; numbers [1, 9, 4] 右辺値はリストでなくてもよい Pythonのイテラブルなら何でもよい &amp;gt;&amp;gt;&amp;gt; numbers = [1, 2, 3, 4] &amp;gt;&amp;gt;&amp;gt; numbers[1:3] = (98, 99, 100) &amp;gt;&amp;gt;&amp;gt; numbers [1, 98, 99, 100, 4] &amp;gt;&amp;gt;&amp;gt; numbers = [1, 2, 3, 4] &amp;gt;&amp;gt;&amp;gt; numbers[1:3] = &amp;#39;wat?</description></item><item><title>【8.2.5】extendまたは+=によるリストの連結</title><link>https://dddsuz2.github.io/suzmemo/8.2.5extend%E3%81%BE%E3%81%9F%E3%81%AF-%E3%81%AB%E3%82%88%E3%82%8B%E3%83%AA%E3%82%B9%E3%83%88%E3%81%AE%E9%80%A3%E7%B5%90/</link><pubDate>Sat, 05 Aug 2023 21:08:44 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/8.2.5extend%E3%81%BE%E3%81%9F%E3%81%AF-%E3%81%AB%E3%82%88%E3%82%8B%E3%83%AA%E3%82%B9%E3%83%88%E3%81%AE%E9%80%A3%E7%B5%90/</guid><description> extend()を使うことで、リストを1つにまとめることができる +=でも同じことができる append()を使うと、全ての要素が1個のリストとして追加されてしまう &amp;gt;&amp;gt;&amp;gt; others = [&amp;#39;Gummo&amp;#39;, &amp;#39;Karl&amp;#39;] &amp;gt;&amp;gt;&amp;gt; maxes.extend(others) &amp;gt;&amp;gt;&amp;gt; maxes [&amp;#39;Groucho&amp;#39;, &amp;#39;Chico&amp;#39;, &amp;#39;Gummo&amp;#39;, &amp;#39;Harpo&amp;#39;, &amp;#39;Zeppo&amp;#39;, &amp;#39;Gummo&amp;#39;, &amp;#39;Karl&amp;#39;] &amp;gt;&amp;gt;&amp;gt; maxes += others &amp;gt;&amp;gt;&amp;gt; maxes [&amp;#39;Groucho&amp;#39;, &amp;#39;Chico&amp;#39;, &amp;#39;Gummo&amp;#39;, &amp;#39;Harpo&amp;#39;, &amp;#39;Zeppo&amp;#39;, &amp;#39;Gummo&amp;#39;, &amp;#39;Karl&amp;#39;, &amp;#39;Gummo&amp;#39;, &amp;#39;Karl&amp;#39;] &amp;gt;&amp;gt;&amp;gt; maxes.append(others) &amp;gt;&amp;gt;&amp;gt; maxes [&amp;#39;Groucho&amp;#39;, &amp;#39;Chico&amp;#39;, &amp;#39;Gummo&amp;#39;, &amp;#39;Harpo&amp;#39;, &amp;#39;Zeppo&amp;#39;, &amp;#39;Gummo&amp;#39;, &amp;#39;Karl&amp;#39;, &amp;#39;Gummo&amp;#39;, &amp;#39;Karl&amp;#39;, [&amp;#39;Gummo&amp;#39;, &amp;#39;Karl&amp;#39;]]</description></item><item><title>【8.2.4】*による全要素の繰り返し</title><link>https://dddsuz2.github.io/suzmemo/8.2.4%E3%81%AB%E3%82%88%E3%82%8B%E5%85%A8%E8%A6%81%E7%B4%A0%E3%81%AE%E7%B9%B0%E3%82%8A%E8%BF%94%E3%81%97/</link><pubDate>Sat, 05 Aug 2023 21:07:19 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/8.2.4%E3%81%AB%E3%82%88%E3%82%8B%E5%85%A8%E8%A6%81%E7%B4%A0%E3%81%AE%E7%B9%B0%E3%82%8A%E8%BF%94%E3%81%97/</guid><description> リストでも*で文字列やタプルを繰り返すことができる &amp;gt;&amp;gt;&amp;gt; [&amp;#39;blah&amp;#39;] * 3 [&amp;#39;blah&amp;#39;, &amp;#39;blah&amp;#39;, &amp;#39;blah&amp;#39;]</description></item><item><title>【8.2.3】insertによるオフセットを指定した要素の追加</title><link>https://dddsuz2.github.io/suzmemo/8.2.3insert%E3%81%AB%E3%82%88%E3%82%8B%E3%82%AA%E3%83%95%E3%82%BB%E3%83%83%E3%83%88%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%97%E3%81%9F%E8%A6%81%E7%B4%A0%E3%81%AE%E8%BF%BD%E5%8A%A0/</link><pubDate>Sat, 05 Aug 2023 21:04:55 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/8.2.3insert%E3%81%AB%E3%82%88%E3%82%8B%E3%82%AA%E3%83%95%E3%82%BB%E3%83%83%E3%83%88%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%97%E3%81%9F%E8%A6%81%E7%B4%A0%E3%81%AE%E8%BF%BD%E5%8A%A0/</guid><description> append()では、末尾にしか要素を追加できない オフセットを指定して、要素を追加したいときにはinsert()を使う &amp;gt;&amp;gt;&amp;gt; maxes.insert(2, &amp;#39;Gummo&amp;#39;) &amp;gt;&amp;gt;&amp;gt; maxes [&amp;#39;Groucho&amp;#39;, &amp;#39;Chico&amp;#39;, &amp;#39;Gummo&amp;#39;, &amp;#39;Harpo&amp;#39;, &amp;#39;Zeppo&amp;#39;]</description></item><item><title>【8.2.2】appendによる末尾への要素の追加</title><link>https://dddsuz2.github.io/suzmemo/8.2.2append%E3%81%AB%E3%82%88%E3%82%8B%E6%9C%AB%E5%B0%BE%E3%81%B8%E3%81%AE%E8%A6%81%E7%B4%A0%E3%81%AE%E8%BF%BD%E5%8A%A0/</link><pubDate>Sat, 05 Aug 2023 21:01:09 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/8.2.2append%E3%81%AB%E3%82%88%E3%82%8B%E6%9C%AB%E5%B0%BE%E3%81%B8%E3%81%AE%E8%A6%81%E7%B4%A0%E3%81%AE%E8%BF%BD%E5%8A%A0/</guid><description> append()を使うことで、リストに要素を一つずつ追加できる &amp;gt;&amp;gt;&amp;gt; maxes = [&amp;#39;Groucho&amp;#39;, &amp;#39;Chico&amp;#39;, &amp;#39;Harpo&amp;#39;] &amp;gt;&amp;gt;&amp;gt; maxes.append(&amp;#39;Zeppo&amp;#39;) &amp;gt;&amp;gt;&amp;gt; maxes [&amp;#39;Groucho&amp;#39;, &amp;#39;Chico&amp;#39;, &amp;#39;Harpo&amp;#39;, &amp;#39;Zeppo&amp;#39;]</description></item><item><title>【8.2.1】splitによる文字列からのリストの作成</title><link>https://dddsuz2.github.io/suzmemo/8.2.1split%E3%81%AB%E3%82%88%E3%82%8B%E6%96%87%E5%AD%97%E5%88%97%E3%81%8B%E3%82%89%E3%81%AE%E3%83%AA%E3%82%B9%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90/</link><pubDate>Sat, 05 Aug 2023 20:51:25 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/8.2.1split%E3%81%AB%E3%82%88%E3%82%8B%E6%96%87%E5%AD%97%E5%88%97%E3%81%8B%E3%82%89%E3%81%AE%E3%83%AA%E3%82%B9%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90/</guid><description>split()関数を使って、何らかのセパレータ文字列に基づいて文字列を分割してリストにできる
&amp;gt;&amp;gt;&amp;gt; talk_like_a_pirate_day = &amp;#39;9/19/2019&amp;#39; &amp;gt;&amp;gt;&amp;gt; talk_like_a_pirate_day.split(&amp;#39;/&amp;#39;) [&amp;#39;9&amp;#39;, &amp;#39;19&amp;#39;, &amp;#39;2019&amp;#39;]</description></item><item><title>【8.2】リスト</title><link>https://dddsuz2.github.io/suzmemo/8.2%E3%83%AA%E3%82%B9%E3%83%88/</link><pubDate>Sat, 05 Aug 2023 20:45:41 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/8.2%E3%83%AA%E3%82%B9%E3%83%88/</guid><description> リスト
要素を順番に管理したいとき、順序と内容が変わる場合があるときに向いている 順番がどうでも良い時は集合の方が向いているかもしれない リストはミュータブル 直接変更できる []による作成
&amp;gt;&amp;gt;&amp;gt; empty_list = [] &amp;gt;&amp;gt;&amp;gt; weekdays = [&amp;#39;Monday&amp;#39;, &amp;#39;Tuesday&amp;#39;, &amp;#39;Wednesday&amp;#39;, &amp;#39;Thursday&amp;#39;, &amp;#39;Friday&amp;#39;] list()による生成、置き換え タプルなどからリストを生成できる &amp;gt;&amp;gt;&amp;gt; another_empty_list = list() &amp;gt;&amp;gt;&amp;gt; another_empty_list [] [offset]を使えばリストから個々の要素を取り出せる
書き換えも可能(ミュータブルなので) スライスを使うことでも、要素の取り出しや書き換えができる
【5.6.1】スライス リストの比較
比較演算子を使って直接比較できる 両方のリストをたどって、同じオフセットの要素を比較する</description></item><item><title>【8.1.4】tupleの書き換え</title><link>https://dddsuz2.github.io/suzmemo/8.1.4tuple%E3%81%AE%E6%9B%B8%E3%81%8D%E6%8F%9B%E3%81%88/</link><pubDate>Sat, 05 Aug 2023 16:57:37 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/8.1.4tuple%E3%81%AE%E6%9B%B8%E3%81%8D%E6%8F%9B%E3%81%88/</guid><description> タプルはイミュータブルであるため、既存のタプルを書き換えることはできない 連結は可能 &amp;gt;&amp;gt;&amp;gt; t1 = (&amp;#39;Fee&amp;#39;, &amp;#39;Fie&amp;#39;, &amp;#39;Foe&amp;#39;) &amp;gt;&amp;gt;&amp;gt; t2 = (&amp;#39;Flop&amp;#39;,) &amp;gt;&amp;gt;&amp;gt; t1 + t2 (&amp;#39;Fee&amp;#39;, &amp;#39;Fie&amp;#39;, &amp;#39;Foe&amp;#39;, &amp;#39;Flop&amp;#39;) &amp;gt;&amp;gt;&amp;gt; t1 += t2 &amp;gt;&amp;gt;&amp;gt; t1 (&amp;#39;Fee&amp;#39;, &amp;#39;Fie&amp;#39;, &amp;#39;Foe&amp;#39;, &amp;#39;Flop&amp;#39;) 最初のt1と最後のt1は同じではない t1とt2が指す、もとのタプルから新しいタプルを作り、t1という名前を与えている 新しい値を指しているかどうかは、id()を使えばわかる &amp;gt;&amp;gt;&amp;gt; id(t1) 140401424604544 &amp;gt;&amp;gt;&amp;gt; t1 += t2 &amp;gt;&amp;gt;&amp;gt; id(t1) 140401424883200</description></item><item><title>【8.1.3】tupleの操作</title><link>https://dddsuz2.github.io/suzmemo/8.1.3tuple%E3%81%AE%E6%93%8D%E4%BD%9C/</link><pubDate>Sat, 05 Aug 2023 16:53:56 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/8.1.3tuple%E3%81%AE%E6%93%8D%E4%BD%9C/</guid><description> +による連結が可能 &amp;gt;&amp;gt;&amp;gt; (&amp;#39;Groucho&amp;#39;,) + (&amp;#39;Chico&amp;#39;, &amp;#39;Harpo&amp;#39;) (&amp;#39;Groucho&amp;#39;, &amp;#39;Chico&amp;#39;, &amp;#39;Harpo&amp;#39;) *による繰り返し &amp;gt;&amp;gt;&amp;gt; (&amp;#39;yada&amp;#39;,) * 3 (&amp;#39;yada&amp;#39;, &amp;#39;yada&amp;#39;, &amp;#39;yada&amp;#39;) タプルの比較 &amp;gt;&amp;gt;&amp;gt; a = (7, 2) &amp;gt;&amp;gt;&amp;gt; b = (7, 2, 9) &amp;gt;&amp;gt;&amp;gt; a == b False &amp;gt;&amp;gt;&amp;gt; a &amp;lt;= b True &amp;gt;&amp;gt;&amp;gt; a &amp;lt; b True forとinによる反復処理 &amp;gt;&amp;gt;&amp;gt; words = (&amp;#34;freash&amp;#34;, &amp;#34;out&amp;#34;, &amp;#34;of&amp;#34;, &amp;#34;ideas&amp;#34;) &amp;gt;&amp;gt;&amp;gt; for word in words: ... print(word) ... freash out of ideas</description></item><item><title>【8.1.2】tupleによる生成</title><link>https://dddsuz2.github.io/suzmemo/8.1.2tuple%E3%81%AB%E3%82%88%E3%82%8B%E7%94%9F%E6%88%90/</link><pubDate>Sat, 05 Aug 2023 16:50:35 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/8.1.2tuple%E3%81%AB%E3%82%88%E3%82%8B%E7%94%9F%E6%88%90/</guid><description> tuple()関数を使えば、他のデータ型からもタプルを作れる &amp;gt;&amp;gt;&amp;gt; marx_list = [&amp;#39;Groucho&amp;#39;, &amp;#39;Chico&amp;#39;, &amp;#39;Harpo&amp;#39;] &amp;gt;&amp;gt;&amp;gt; tuple(marx_list) (&amp;#39;Groucho&amp;#39;, &amp;#39;Chico&amp;#39;, &amp;#39;Harpo&amp;#39;)</description></item><item><title>【8.1.1】タプルのアンパック</title><link>https://dddsuz2.github.io/suzmemo/8.1.1%E3%82%BF%E3%83%97%E3%83%AB%E3%81%AE%E3%82%A2%E3%83%B3%E3%83%91%E3%83%83%E3%82%AF/</link><pubDate>Sat, 05 Aug 2023 16:50:11 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/8.1.1%E3%82%BF%E3%83%97%E3%83%AB%E3%81%AE%E3%82%A2%E3%83%B3%E3%83%91%E3%83%83%E3%82%AF/</guid><description> タプルは、一度に複数の変数に代入できる これをタプルのアンパックと呼ぶ これを使えば、一時変数を使わずに1つの文で値を交換できる &amp;gt;&amp;gt;&amp;gt; markx_tuple = (&amp;#39;Groucho&amp;#39;, &amp;#39;Chico&amp;#39;, &amp;#39;Harpo&amp;#39;) &amp;gt;&amp;gt;&amp;gt; a, b, c = markx_tuple &amp;gt;&amp;gt;&amp;gt; a &amp;#39;Groucho&amp;#39; &amp;gt;&amp;gt;&amp;gt; b &amp;#39;Chico&amp;#39; &amp;gt;&amp;gt;&amp;gt; c &amp;#39;Harpo&amp;#39; &amp;gt;&amp;gt;&amp;gt; password = &amp;#39;swordfish&amp;#39; &amp;gt;&amp;gt;&amp;gt; icecream = &amp;#39;tuttifrutti&amp;#39; &amp;gt;&amp;gt;&amp;gt; password, icecream = icecream, password &amp;gt;&amp;gt;&amp;gt; password &amp;#39;tuttifrutti&amp;#39; &amp;gt;&amp;gt;&amp;gt; icecream &amp;#39;swordfish&amp;#39;</description></item><item><title>【8.1】タプル</title><link>https://dddsuz2.github.io/suzmemo/8.1%E3%82%BF%E3%83%97%E3%83%AB/</link><pubDate>Sat, 05 Aug 2023 16:07:35 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/8.1%E3%82%BF%E3%83%97%E3%83%AB/</guid><description> 発音
グイド・ヴァン・ロッサムは月水金にはトゥープル、火木土にはタプルと発音しているらしい 日曜日にはそんな話はしない カンマと()による作成
()を使って空のタプルが作成できる 1個以上の要素を持つタプル 個々の要素をカンマで区切る 要素が1個のタプルも末尾にカンマをつけて作る カッコで囲んでもよい カンマを忘れた場合、別のオブジェクトになってしまう 要素が複数ある場合、全ての要素の後ろにカンマをつける 最後の要素の後ろのカンマは省略可 Pythonでは、タプルをエコー表示（標準出力で表示）するときにカッコを追加する 定義では不要なことが多いが、カッコを使った方がわかりやすい カッコがないタプルを関数の引数として渡すものはできない &amp;gt;&amp;gt;&amp;gt; empty_tuple = () &amp;gt;&amp;gt;&amp;gt; empty_tuple () &amp;gt;&amp;gt;&amp;gt; one_markx = &amp;#39;Groucho&amp;#39;, &amp;gt;&amp;gt;&amp;gt; one_markx (&amp;#39;Groucho&amp;#39;,) &amp;gt;&amp;gt;&amp;gt; one_markx = (&amp;#39;Groucho&amp;#39;,) &amp;gt;&amp;gt;&amp;gt; one_markx (&amp;#39;Groucho&amp;#39;,) &amp;gt;&amp;gt;&amp;gt; one_markx = (&amp;#39;Groucho&amp;#39;) &amp;gt;&amp;gt;&amp;gt; one_markx &amp;#39;Groucho&amp;#39; &amp;gt;&amp;gt;&amp;gt; type(one_markx) &amp;lt;class &amp;#39;str&amp;#39;&amp;gt; &amp;gt;&amp;gt;&amp;gt; markx_tuple = (&amp;#39;Groucho&amp;#39;, &amp;#39;Chico&amp;#39;, &amp;#39;Harpo&amp;#39;) &amp;gt;&amp;gt;&amp;gt; markx_tuple (&amp;#39;Groucho&amp;#39;, &amp;#39;Chico&amp;#39;, &amp;#39;Harpo&amp;#39;) &amp;gt;&amp;gt;&amp;gt; one_marx = &amp;#39;Groucho&amp;#39;, &amp;gt;&amp;gt;&amp;gt; type(one_marx) &amp;lt;class &amp;#39;tuple&amp;#39;&amp;gt; &amp;gt;&amp;gt;&amp;gt; type(&amp;#39;Groucho&amp;#39;,) &amp;lt;class &amp;#39;str&amp;#39;&amp;gt; &amp;gt;&amp;gt;&amp;gt; type((&amp;#39;Groucho&amp;#39;,)) &amp;lt;class &amp;#39;tuple&amp;#39;&amp;gt;</description></item><item><title>【7.3.1】シーケンスって何？</title><link>https://dddsuz2.github.io/suzmemo/7.3.1%E3%82%B7%E3%83%BC%E3%82%B1%E3%83%B3%E3%82%B9%E3%81%A3%E3%81%A6%E4%BD%95/</link><pubDate>Sat, 05 Aug 2023 16:02:49 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/7.3.1%E3%82%B7%E3%83%BC%E3%82%B1%E3%83%B3%E3%82%B9%E3%81%A3%E3%81%A6%E4%BD%95/</guid><description> 順番に並んだひと続きのデータや手順のこと またはそのデータを取り扱う方式</description></item><item><title>【8】タプルとリスト</title><link>https://dddsuz2.github.io/suzmemo/8%E3%82%BF%E3%83%97%E3%83%AB%E3%81%A8%E3%83%AA%E3%82%B9%E3%83%88/</link><pubDate>Sat, 05 Aug 2023 16:00:41 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/8%E3%82%BF%E3%83%97%E3%83%AB%E3%81%A8%E3%83%AA%E3%82%B9%E3%83%88/</guid><description> 基本データ型は原子 ブール値、整数、浮動小数点、文字列 タプルとリストは分子のようなもの ほとんどのプログラミング言語では、ひとまとまりのデータに対して、要素のシーケンスを作ることができる インデックスで開始から末尾まで取り出しできる タプルとリストという2種類のシーケンス構造 0個以上の要素を持つことができる 要素は型が異なっていてもよい 個々の要素は任意のPythonオブジェクトでよい ほんまか？ ほんまや&amp;hellip; &amp;gt;&amp;gt;&amp;gt; list.append(2) &amp;gt;&amp;gt;&amp;gt; list.append(&amp;#34;3&amp;#34;) &amp;gt;&amp;gt;&amp;gt; print(list) [2, &amp;#39;3&amp;#39;] リストとタプルで2つある理由 タプルはイミュータブル 要素は書き換えられない リストはミュータブル 要素の挿入と削除を行うことができる</description></item><item><title>【7.3】rangeによる数値シーケンスの生成</title><link>https://dddsuz2.github.io/suzmemo/7.3range%E3%81%AB%E3%82%88%E3%82%8B%E6%95%B0%E5%80%A4%E3%82%B7%E3%83%BC%E3%82%B1%E3%83%B3%E3%82%B9%E3%81%AE%E7%94%9F%E6%88%90/</link><pubDate>Sat, 05 Aug 2023 15:43:51 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/7.3range%E3%81%AB%E3%82%88%E3%82%8B%E6%95%B0%E5%80%A4%E3%82%B7%E3%83%BC%E3%82%B1%E3%83%B3%E3%82%B9%E3%81%AE%E7%94%9F%E6%88%90/</guid><description>range()関数を使うことで、指定した範囲の数値のシーケンスを返すことができる
あらかじめリストやタプルなどの大きなデータ構造を作って、そこに値を格納する必要もない range(start, stop, step)のように、スライスとよく似た形式で使う 指定しない場合、startはゼロから stopは唯一必須 -1を指定することで、stopを逆順にできる zip()と同様に、range()はイテラブルなオブジェクトを返す for ... inで反復処理する リストなどのシーケンスに変換する &amp;gt;&amp;gt;&amp;gt; for x in range (0, 3): ... print(x) ... 0 1 2 &amp;gt;&amp;gt;&amp;gt; list(range(0, 3)) [0, 1, 2] &amp;gt;&amp;gt;&amp;gt; for x in range(2, -1, -1): ... print(x) ... 2 1 0 &amp;gt;&amp;gt;&amp;gt; list(range(2, -1, -1)) [2, 1, 0] &amp;gt;&amp;gt;&amp;gt; list(range(0, 11, 2)) [0, 2, 4, 6, 8, 10]</description></item><item><title>【7.2】breakによる中断</title><link>https://dddsuz2.github.io/suzmemo/7.2break%E3%81%AB%E3%82%88%E3%82%8B%E4%B8%AD%E6%96%AD/</link><pubDate>Sat, 05 Aug 2023 15:40:59 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/7.2break%E3%81%AB%E3%82%88%E3%82%8B%E4%B8%AD%E6%96%AD/</guid><description>whileループでもfor文と同様に、breakを使うことでループを中断できる
&amp;gt;&amp;gt;&amp;gt; word = &amp;#39;thud&amp;#39; &amp;gt;&amp;gt;&amp;gt; for letter in word: ... if letter == &amp;#39;u&amp;#39;: ... break ... print(letter) ... t h continueとかelseによるbreakのチェックも使えるよ♡</description></item><item><title>【7.1】イテレータとは</title><link>https://dddsuz2.github.io/suzmemo/7.1%E3%82%A4%E3%83%86%E3%83%AC%E3%83%BC%E3%82%BF%E3%81%A8%E3%81%AF/</link><pubDate>Sat, 05 Aug 2023 15:38:25 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/7.1%E3%82%A4%E3%83%86%E3%83%AC%E3%83%BC%E3%82%BF%E3%81%A8%E3%81%AF/</guid><description> イテレータ イテレーションごとにリスト、辞書などから要素を1つずつ取り出して返すもの イテレータを使う理由 データ構造がどれくらいのサイズなのか、どのように実装されているのかを知らなくても、データ構造の各要素を反復できるから その場で作ったデータを受け付けることもできるため、メモリに収まり切らないようなデータストリームも処理できる</description></item><item><title>【7】forとinによる反復処理</title><link>https://dddsuz2.github.io/suzmemo/7for%E3%81%A8in%E3%81%AB%E3%82%88%E3%82%8B%E5%8F%8D%E5%BE%A9%E5%87%A6%E7%90%86/</link><pubDate>Sat, 05 Aug 2023 15:35:25 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/7for%E3%81%A8in%E3%81%AB%E3%82%88%E3%82%8B%E5%8F%8D%E5%BE%A9%E5%87%A6%E7%90%86/</guid><description>Pythonはイテレータを頻繁に使う とりあえず文字列をループで処理してみる
&amp;gt;&amp;gt;&amp;gt; word = &amp;#39;thud&amp;#39; &amp;gt;&amp;gt;&amp;gt; offset = 0 &amp;gt;&amp;gt;&amp;gt; while offset &amp;lt; len(word): ... print(word[offset]) ... offset += 1 ... t h u d よりパイソニックなコード
&amp;gt;&amp;gt;&amp;gt; for letter in word: ... print(letter) ... t h u d</description></item><item><title>【6.3】elseによるbreakのチェック</title><link>https://dddsuz2.github.io/suzmemo/6.3else%E3%81%AB%E3%82%88%E3%82%8Bbreak%E3%81%AE%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF/</link><pubDate>Sat, 05 Aug 2023 15:29:54 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/6.3else%E3%81%AB%E3%82%88%E3%82%8Bbreak%E3%81%AE%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF/</guid><description>whileループの後にelseを書いた場合
whileループが正常終了したら、制御がオプションのelseに渡される whileループの中で何かを探したが、それが見つからなかったときなどに使う &amp;gt;&amp;gt;&amp;gt; numbers = [1, 3, 5] &amp;gt;&amp;gt;&amp;gt; position = 0 &amp;gt;&amp;gt;&amp;gt; while position &amp;lt; len(numbers): ... number = numbers[position] ... if number % 2 == 0: ... print(&amp;#39;Found even number&amp;#39;, number) ... break ... position += 1 ... else: ... print(&amp;#34;No even number found&amp;#34;) ... No even number found</description></item><item><title>【6.2】continueによる次のイテレーションの開始</title><link>https://dddsuz2.github.io/suzmemo/6.2continue%E3%81%AB%E3%82%88%E3%82%8B%E6%AC%A1%E3%81%AE%E3%82%A4%E3%83%86%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E9%96%8B%E5%A7%8B/</link><pubDate>Sat, 05 Aug 2023 15:26:27 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/6.2continue%E3%81%AB%E3%82%88%E3%82%8B%E6%AC%A1%E3%81%AE%E3%82%A4%E3%83%86%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E9%96%8B%E5%A7%8B/</guid><description>ループを抜けるのではなく、次のイテレーションを直ちに始めたいという場合
continue文を使う &amp;gt;&amp;gt;&amp;gt; while True: ... value = input(&amp;#34;Integer, please [q to quit]: &amp;#34;) ... if value == &amp;#39;q&amp;#39;: ... break ... number = int(value) ... if number % 2 == 0: ... continue ... print(number, &amp;#34;squared is&amp;#34;, number * number) ... Integer, please [q to quit]: 1 1 squared is 1 Integer, please [q to quit]: 2 Integer, please [q to quit]: 3 3 squared is 9 Integer, please [q to quit]: 4 Integer, please [q to quit]: 5 5 squared is 25 Integer, please [q to quit]: 6 Integer, please [q to quit]: 7 7 squared is 49 Integer, please [q to quit]:</description></item><item><title>【6.1】breakによるループの中断</title><link>https://dddsuz2.github.io/suzmemo/6.1break%E3%81%AB%E3%82%88%E3%82%8B%E3%83%AB%E3%83%BC%E3%83%97%E3%81%AE%E4%B8%AD%E6%96%AD/</link><pubDate>Sat, 05 Aug 2023 15:22:30 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/6.1break%E3%81%AB%E3%82%88%E3%82%8B%E3%83%AB%E3%83%BC%E3%83%97%E3%81%AE%E4%B8%AD%E6%96%AD/</guid><description>何かが起こるまでループを続けたいが、それがいつになるかわからない時
break文を持つ無限ループが使える &amp;gt;&amp;gt;&amp;gt; while True: ... stuff = input(&amp;#34;String to capitalize [type q to quit]: &amp;#34;) ... if stuff == &amp;#34;q&amp;#34;: ... break ... print(stuff.capitalize()) ... String to capitalize [type q to quit]: test Test String to capitalize [type q to quit]: hey, it works Hey, it works String to capitalize [type q to quit]: q</description></item><item><title>【6】whileによるループ</title><link>https://dddsuz2.github.io/suzmemo/6while%E3%81%AB%E3%82%88%E3%82%8B%E3%83%AB%E3%83%BC%E3%83%97/</link><pubDate>Sat, 05 Aug 2023 15:19:28 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/6while%E3%81%AB%E3%82%88%E3%82%8B%E3%83%AB%E3%83%BC%E3%83%97/</guid><description> whileによる反復処理 &amp;gt;&amp;gt;&amp;gt; count = 1 &amp;gt;&amp;gt;&amp;gt; while count &amp;lt;= 5: ... print(count) ... count += 1 ... 1 2 3 4 5</description></item><item><title>【5.8.3】f文字列</title><link>https://dddsuz2.github.io/suzmemo/5.8.3f%E6%96%87%E5%AD%97%E5%88%97/</link><pubDate>Sat, 05 Aug 2023 02:38:37 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/5.8.3f%E6%96%87%E5%AD%97%E5%88%97/</guid><description>先頭のクォートの前にfかFを入れる 波括弧で変数名か式を囲み、その値を文字列に差し込む 式も入れられる &amp;gt;&amp;gt;&amp;gt; thing = &amp;#39;wereduck&amp;#39; &amp;gt;&amp;gt;&amp;gt; place = &amp;#39;werepond&amp;#39; &amp;gt;&amp;gt;&amp;gt; f&amp;#39;The {thing} is in the {place}&amp;#39; &amp;#39;The wereduck is in the werepond&amp;#39; &amp;gt;&amp;gt;&amp;gt; f&amp;#39;The {thing.capitalize()} is in the {place.rjust(20)}&amp;#39; &amp;#39;The Wereduck is in the werepond&amp;#39; &amp;gt;&amp;gt;&amp;gt; f&amp;#39;The {thing:&amp;gt;20} is in the {place:.^20}&amp;#39; &amp;#39;The wereduck is in the ......werepond......&amp;#39; &amp;gt;&amp;gt;&amp;gt; f&amp;#39;The {thing =} is in the {place =}&amp;#39; &amp;#34;The thing =&amp;#39;wereduck&amp;#39; is in the place =&amp;#39;werepond&amp;#39;&amp;#34; &amp;gt;&amp;gt;&amp;gt; f&amp;#39;The {thing[-4:] =} is in the {place.</description></item><item><title>【5.8.2】新しいスタイルのフォーマット</title><link>https://dddsuz2.github.io/suzmemo/5.8.2%E6%96%B0%E3%81%97%E3%81%84%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB%E3%81%AE%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%83%E3%83%88/</link><pubDate>Sat, 05 Aug 2023 02:28:13 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/5.8.2%E6%96%B0%E3%81%97%E3%81%84%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB%E3%81%AE%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%83%E3%83%88/</guid><description>format_string.format(data)という形式になっている
&amp;gt;&amp;gt;&amp;gt; thing = &amp;#39;woodchuck&amp;#39; &amp;gt;&amp;gt;&amp;gt; &amp;#39;{}&amp;#39;.format(thing) &amp;#39;woodchuck&amp;#39; &amp;gt;&amp;gt;&amp;gt; place = &amp;#39;lake&amp;#39; &amp;gt;&amp;gt;&amp;gt; &amp;#39;The {} is in the {}.&amp;#39;.format(thing, place) &amp;#39;The woodchuck is in the lake.&amp;#39; &amp;gt;&amp;gt;&amp;gt; &amp;#39;The {1} is in the {0}.&amp;#39;.format(thing, place) &amp;#39;The lake is in the woodchuck.&amp;#39; &amp;gt;&amp;gt;&amp;gt; &amp;#39;The {thing} is in the {place}.&amp;#39;.format(thing=&amp;#39;duck&amp;#39;, place=&amp;#39;buthtub&amp;#39;) &amp;#39;The duck is in the buthtub.&amp;#39; &amp;gt;&amp;gt;&amp;gt; d = {&amp;#39;thing&amp;#39;: &amp;#39;duck&amp;#39;, &amp;#39;place&amp;#39;: &amp;#39;bathtub&amp;#39;} &amp;gt;&amp;gt;&amp;gt; &amp;#39;The {0[thing]} is in the {0[place]}&amp;#39;.format(d) &amp;#39;The duck is in the bathtub&amp;#39; デフォルト以外のフォーマットで使用できる書式指定文字列</description></item><item><title>【5.8.1】古いスタイルのフォーマット</title><link>https://dddsuz2.github.io/suzmemo/5.8.1%E5%8F%A4%E3%81%84%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB%E3%81%AE%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%83%E3%83%88/</link><pubDate>Sat, 05 Aug 2023 02:02:19 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/5.8.1%E5%8F%A4%E3%81%84%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB%E3%81%AE%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%83%E3%83%88/</guid><description>formatstring % data という形式を使う
%s: 文字列 %d: 10進整数 %x: 16進整数 %o: 8進整数 %f: 10進浮動小数点数 %e: 指数形式浮動小数点数 %g: 10進または指数形式浮動小数点数 %%: リテラルの% 複数のデータを置くときには、データをタプルにまとめる
&amp;gt;&amp;gt;&amp;gt; &amp;#34;Our cat %s weights %s pounds&amp;#34; % (cat, weight) &amp;#39;Our cat Chester weights 28 pounds&amp;#39; %と型指定子の間の書式指定文字列には、以下のものを指定する別の値を入れることができる
幅の下限
文字数の上限
配置
指定できる値
先頭の%文字 オプションの配置文字:指定なしか、+なら右揃え、-なら左揃え オプションのフィールド幅の下限 オプションの幅下限と文字数上限を区切る. オプションの文字列の上限 変換型がfなら精度 上の表に囲まれている変換型 &amp;gt;&amp;gt;&amp;gt; thing = &amp;#39;woodchuck&amp;#39; &amp;gt;&amp;gt;&amp;gt; &amp;#39;%s&amp;#39; % thing &amp;#39;woodchuck&amp;#39; &amp;gt;&amp;gt;&amp;gt; &amp;#39;%12s&amp;#39; % thing &amp;#39; woodchuck&amp;#39; &amp;gt;&amp;gt;&amp;gt; &amp;#39;%+12s&amp;#39; % thing &amp;#39; woodchuck&amp;#39; &amp;gt;&amp;gt;&amp;gt; &amp;#39;%-12s&amp;#39; % thing &amp;#39;woodchuck &amp;#39; &amp;gt;&amp;gt;&amp;gt; &amp;#39;%.</description></item><item><title>【5.8】文字列のフォーマット</title><link>https://dddsuz2.github.io/suzmemo/5.8%E6%96%87%E5%AD%97%E5%88%97%E3%81%AE%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%83%E3%83%88/</link><pubDate>Sat, 05 Aug 2023 02:01:06 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/5.8%E6%96%87%E5%AD%97%E5%88%97%E3%81%AE%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%83%E3%83%88/</guid><description>文字列にさまざまなフォーマットでデータを差し込むには、次の3つの方法がある
古いスタイル(Python 2.3 ~) 新しいスタイル(Python 2.6 ~) f文字列(Python 3.6 ~)</description></item><item><title>【5.7】文字列の配置</title><link>https://dddsuz2.github.io/suzmemo/5.7%E6%96%87%E5%AD%97%E5%88%97%E3%81%AE%E9%85%8D%E7%BD%AE/</link><pubDate>Sat, 05 Aug 2023 01:59:36 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/5.7%E6%96%87%E5%AD%97%E5%88%97%E3%81%AE%E9%85%8D%E7%BD%AE/</guid><description> 文字列のレイアウトを操作する 指定した幅（30文字）の中で、文字列をどのように配置するのか決定する str.center(30) str.ljust(30) str.rjust(30)</description></item><item><title>【5.6.8】大文字と小文字</title><link>https://dddsuz2.github.io/suzmemo/5.6.8%E5%A4%A7%E6%96%87%E5%AD%97%E3%81%A8%E5%B0%8F%E6%96%87%E5%AD%97/</link><pubDate>Sat, 05 Aug 2023 01:56:31 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/5.6.8%E5%A4%A7%E6%96%87%E5%AD%97%E3%81%A8%E5%B0%8F%E6%96%87%E5%AD%97/</guid><description> 文字列の先頭単語の先頭文字を大文字にする str.capitalize() 全ての単語の先頭文字を大文字にする str.title() 全ての文字を大文字にする str.upper() 全ての文字を小文字にする str.lower() 大文字小文字を逆にする str.swapcase()</description></item><item><title>【5.6.7】文字列の探索と選択</title><link>https://dddsuz2.github.io/suzmemo/5.6.7%E6%96%87%E5%AD%97%E5%88%97%E3%81%AE%E6%8E%A2%E7%B4%A2%E3%81%A8%E9%81%B8%E6%8A%9E/</link><pubDate>Sat, 05 Aug 2023 01:50:34 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/5.6.7%E6%96%87%E5%AD%97%E5%88%97%E3%81%AE%E6%8E%A2%E7%B4%A2%E3%81%A8%E9%81%B8%E6%8A%9E/</guid><description>strという変数に紐づけられた長い文字列があるとする
先頭の13文字を取り出す
str[:13] 字数を数える（スペースや改行も含む）
len(str) 先頭がAllの3文字になっているか
str.stratswith('All') 末尾がThat*s all, folks!になっているか
str.endwith('That\'s all, folks!') 部分文字列のオフセットを探すメソッド
find() 先頭から探す 見つからない場合は-1が帰る index() 末尾から探す 見つからない場合は例外を投げる theという文字列が何個ついているか探す
str.count(&amp;quot;the&amp;quot;) 文字列が英数字だけか判定する
str.isalnum()</description></item><item><title>【5.6.6】stripによる文字列の除去</title><link>https://dddsuz2.github.io/suzmemo/5.6.6strip%E3%81%AB%E3%82%88%E3%82%8B%E6%96%87%E5%AD%97%E5%88%97%E3%81%AE%E9%99%A4%E5%8E%BB/</link><pubDate>Sat, 05 Aug 2023 01:46:09 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/5.6.6strip%E3%81%AB%E3%82%88%E3%82%8B%E6%96%87%E5%AD%97%E5%88%97%E3%81%AE%E9%99%A4%E5%8E%BB/</guid><description>文字列の先頭や末尾のパディング文字（特にスペース）を取り除きたい場合、strip()を使う
引数が指定されていない場合、空白文字( , \t, \n)を取り除く rstrip()は右（末尾）、lstrip()は左（先頭）だけを取り除く stripで役に立つ文字列の例
string.whitespace string.punctuation</description></item><item><title>基本的に電子書籍を買う</title><link>https://dddsuz2.github.io/suzmemo/%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AB%E9%9B%BB%E5%AD%90%E6%9B%B8%E7%B1%8D%E3%82%92%E8%B2%B7%E3%81%86/</link><pubDate>Sat, 05 Aug 2023 00:19:11 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AB%E9%9B%BB%E5%AD%90%E6%9B%B8%E7%B1%8D%E3%82%92%E8%B2%B7%E3%81%86/</guid><description> suzmemoにメモを取りながら読むので、電子の方が明らかに読書体験が良い ブックスタンドを買ってみたが、分厚い本には微妙 というか、本が傷まないか気になってしまい、読むどころじゃない感もある 電子書籍になっていない本も多いのでどうしよう というか、図書館ヘビーユーザーなので、読む本はどうしても物理本が多い 裁断せずにスキャンできるやつ買えば良くね？ 10万ぐらいするわどうしよう 図書館の本をスキャンするのは法律的にどうなんだ問題 調べると、私的利用の範囲なら問題ないらしい 【参考】図書館で本を借りて自炊でPDF化したら違法になる？</description></item><item><title>【5.6.5】replaceによる置き換え</title><link>https://dddsuz2.github.io/suzmemo/5.6.5replace%E3%81%AB%E3%82%88%E3%82%8B%E7%BD%AE%E3%81%8D%E6%8F%9B%E3%81%88/</link><pubDate>Fri, 04 Aug 2023 23:56:11 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/5.6.5replace%E3%81%AB%E3%82%88%E3%82%8B%E7%BD%AE%E3%81%8D%E6%8F%9B%E3%81%88/</guid><description>replace()を使えば、文字列の一部を置き換えできる
&amp;gt;&amp;gt;&amp;gt; setup = &amp;#34;a duck goes into a bar..&amp;#34; &amp;gt;&amp;gt;&amp;gt; setup.replace(&amp;#39;duck&amp;#39;, &amp;#39;marmoset&amp;#39;) &amp;#39;a marmoset goes into a bar..&amp;#39; &amp;gt;&amp;gt;&amp;gt; setup &amp;#39;a duck goes into a bar..&amp;#39; 第3引数で文字列を置き換えする回数を指定できる setup.replace(&amp;#39;a &amp;#39;, &amp;#39;a famous &amp;#39;, 100) 注意点 上の例で、aの後にスペースをつけずにaという1文字の文字列を置き返してしまうと、他の単語に含まれるaも置き換わってしまう 条件を詳しく指定する場合には、正規表現を使う</description></item><item><title>【5.6.4】joinによる結合</title><link>https://dddsuz2.github.io/suzmemo/5.6.4join%E3%81%AB%E3%82%88%E3%82%8B%E7%B5%90%E5%90%88/</link><pubDate>Fri, 04 Aug 2023 01:50:43 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/5.6.4join%E3%81%AB%E3%82%88%E3%82%8B%E7%B5%90%E5%90%88/</guid><description>join()関数で、文字列のリストを1つの文字列に結合できる
string.join(文字列のリスト) 糊として挟む文字列を指定してから、結合する文字列のリストを指定する</description></item><item><title>【5.6.3】splitによる分割</title><link>https://dddsuz2.github.io/suzmemo/5.6.3split%E3%81%AB%E3%82%88%E3%82%8B%E5%88%86%E5%89%B2/</link><pubDate>Fri, 04 Aug 2023 01:47:13 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/5.6.3split%E3%81%AB%E3%82%88%E3%82%8B%E5%88%86%E5%89%B2/</guid><description>split()をつかうことで、文字列をセパレータに基づいて、部分文字列のリストを作ることができる
セパレータを指定しない場合、空白文字列を使用する &amp;gt;&amp;gt;&amp;gt; str = &amp;#34;awdadadan,,2e3rwho, saaasdddddddddddddko&amp;#34; &amp;gt;&amp;gt;&amp;gt; str.split(&amp;#39;,&amp;#39;) [&amp;#39;awdadadan&amp;#39;, &amp;#39;&amp;#39;, &amp;#39;2e3rwho&amp;#39;, &amp;#39; saaasdddddddddddddko&amp;#39;]</description></item><item><title>【5.6.2】lenによる長さの取得</title><link>https://dddsuz2.github.io/suzmemo/5.6.2len%E3%81%AB%E3%82%88%E3%82%8B%E9%95%B7%E3%81%95%E3%81%AE%E5%8F%96%E5%BE%97/</link><pubDate>Fri, 04 Aug 2023 01:44:41 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/5.6.2len%E3%81%AB%E3%82%88%E3%82%8B%E9%95%B7%E3%81%95%E3%81%AE%E5%8F%96%E5%BE%97/</guid><description>len()関数で、文字列内の文字数を数えることができる
シーケンス型なら文字列以外にも使用できる</description></item><item><title>【5.6.1】スライス</title><link>https://dddsuz2.github.io/suzmemo/5.6.1%E3%82%B9%E3%83%A9%E3%82%A4%E3%82%B9/</link><pubDate>Fri, 04 Aug 2023 01:36:29 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/5.6.1%E3%82%B9%E3%83%A9%E3%82%A4%E3%82%B9/</guid><description>スライス
文字列から部分文字列を取り出すことができる
角括弧と先頭オフセット(start), 末尾オフセット(end), ステップ(step)で定義する
[:]
先頭から末尾までのシーケンス全体を抽出する [start:]
startオフセットから末尾までのシーケンスを抽出する [:end]
先頭からend - 1オフセットまでのシーケンスを抽出する [start:end]
startオフセットからend-1オフセットまでのシーケンスを抽出する [start:end:step]
step文字ごとにstartオフセットからend-1オフセットまでのシーケンスを抽出する リストなどを逆順に出力するテクニック
list[::-1] reverse関数でも同じようなことができるが、値を返さない</description></item><item><title>【5.6】文字列の変更</title><link>https://dddsuz2.github.io/suzmemo/5.6%E6%96%87%E5%AD%97%E5%88%97%E3%81%AE%E5%A4%89%E6%9B%B4/</link><pubDate>Fri, 04 Aug 2023 01:33:25 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/5.6%E6%96%87%E5%AD%97%E5%88%97%E3%81%AE%E5%A4%89%E6%9B%B4/</guid><description>Pythonでは文字列はイミュータブル
文字列を変更するためには、replace()かまたはスライスを使う</description></item><item><title>【5.5】[]による文字の抽出</title><link>https://dddsuz2.github.io/suzmemo/5.5%E3%81%AB%E3%82%88%E3%82%8B%E6%96%87%E5%AD%97%E3%81%AE%E6%8A%BD%E5%87%BA/</link><pubDate>Fri, 04 Aug 2023 01:28:23 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/5.5%E3%81%AB%E3%82%88%E3%82%8B%E6%96%87%E5%AD%97%E3%81%AE%E6%8A%BD%E5%87%BA/</guid><description>文字列の中の1つの文字を取り出したいとき、文字列変数名の後ろに[]とオフセットを添える
最も左の文字のオフセットが0から始まる 末尾のオフセットは-1からはじまり、-2, -3 となるごとに左にうつっていく</description></item><item><title>【5.4】*による繰り返し</title><link>https://dddsuz2.github.io/suzmemo/5.4%E3%81%AB%E3%82%88%E3%82%8B%E7%B9%B0%E3%82%8A%E8%BF%94%E3%81%97/</link><pubDate>Fri, 04 Aug 2023 01:27:41 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/5.4%E3%81%AB%E3%82%88%E3%82%8B%E7%B9%B0%E3%82%8A%E8%BF%94%E3%81%97/</guid><description>*演算子を使うと、文字列を繰り返すことができる</description></item><item><title>【5.3】+による文字列の連結</title><link>https://dddsuz2.github.io/suzmemo/5.3-%E3%81%AB%E3%82%88%E3%82%8B%E6%96%87%E5%AD%97%E5%88%97%E3%81%AE%E9%80%A3%E7%B5%90/</link><pubDate>Fri, 04 Aug 2023 01:23:57 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/5.3-%E3%81%AB%E3%82%88%E3%82%8B%E6%96%87%E5%AD%97%E5%88%97%E3%81%AE%E9%80%A3%E7%B5%90/</guid><description>+演算子を使うことで、リテラル文字列、文字列変数を連結できる
リテラル文字列のみの場合、順に並べるだけでも連結できる 文字列の連結を行う場合、Pythonはスペースを挿入しない print()の引数として文字列を指定した場合、スペースを挿入する</description></item><item><title>【5.2】\によるエスケープ</title><link>https://dddsuz2.github.io/suzmemo/5.2%5C%E3%81%AB%E3%82%88%E3%82%8B%E3%82%A8%E3%82%B9%E3%82%B1%E3%83%BC%E3%83%97/</link><pubDate>Fri, 04 Aug 2023 01:19:53 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/5.2%5C%E3%81%AB%E3%82%88%E3%82%8B%E3%82%A8%E3%82%B9%E3%82%B1%E3%83%BC%E3%83%97/</guid><description> 特定の文字の前にバックスラッシュを入れると、特別な意味になる \n とか シングルクォート、ダブルクォートをリテラルとして使いたい場合、直前に\をつける じゃあ\をリテラルとして使いたい場合は？ \\ raw文字列ではエスケープは使えない</description></item><item><title>【5.1】strによる文字列の作成</title><link>https://dddsuz2.github.io/suzmemo/5.1str%E3%81%AB%E3%82%88%E3%82%8B%E6%96%87%E5%AD%97%E5%88%97%E3%81%AE%E4%BD%9C%E6%88%90/</link><pubDate>Fri, 04 Aug 2023 01:18:04 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/5.1str%E3%81%AB%E3%82%88%E3%82%8B%E6%96%87%E5%AD%97%E5%88%97%E3%81%AE%E4%BD%9C%E6%88%90/</guid><description> str()によるほかのデータ型の文字列への変換 str(98.6) とか</description></item><item><title>【5】文字列</title><link>https://dddsuz2.github.io/suzmemo/5%E6%96%87%E5%AD%97%E5%88%97/</link><pubDate>Fri, 04 Aug 2023 01:10:01 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/5%E6%96%87%E5%AD%97%E5%88%97/</guid><description>一般的なプログラミングでは、数字よりも文字列を使う機会の方が多い
他の言語と異なり、Pythonの文字列はイミュータブル
作成
シングルクォートかダブルクォートで囲む 先頭がrのraw文字列は、エスケープシーケンスがエスケープシーケンスとして解釈されないようにする 先頭がfのフォーマット文字列もある frみたいなこともできる トリプルクォートで複数行の文字列も作成できる print()は改行文字とクォートを取り除いて出力する</description></item><item><title>【4.5】セイウチ演算子</title><link>https://dddsuz2.github.io/suzmemo/4.5%E3%82%BB%E3%82%A4%E3%82%A6%E3%83%81%E6%BC%94%E7%AE%97%E5%AD%90/</link><pubDate>Fri, 04 Aug 2023 01:07:28 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/4.5%E3%82%BB%E3%82%A4%E3%82%A6%E3%83%81%E6%BC%94%E7%AE%97%E5%AD%90/</guid><description>代入演算子のことをセイウチ演算子という
&amp;gt;&amp;gt;&amp;gt; tweet_limit = 280 &amp;gt;&amp;gt;&amp;gt; tweet_string = &amp;#34;Blah&amp;#34; * 50 &amp;gt;&amp;gt;&amp;gt; if (diff := tweet_limit - len(tweet_string)) &amp;gt;= 0: print(&amp;#34;A fitting tweet&amp;#34;) else: print(&amp;#34;Went Over by&amp;#34;, abs(diff))</description></item><item><title>【4.4】所属関係を調べるにはinを使う</title><link>https://dddsuz2.github.io/suzmemo/4.4%E6%89%80%E5%B1%9E%E9%96%A2%E4%BF%82%E3%82%92%E8%AA%BF%E3%81%B9%E3%82%8B%E3%81%AB%E3%81%AFin%E3%82%92%E4%BD%BF%E3%81%86/</link><pubDate>Fri, 04 Aug 2023 01:04:13 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/4.4%E6%89%80%E5%B1%9E%E9%96%A2%E4%BF%82%E3%82%92%E8%AA%BF%E3%81%B9%E3%82%8B%E3%81%AB%E3%81%AFin%E3%82%92%E4%BD%BF%E3%81%86/</guid><description>所属関係を調べるにはPythonのin演算子を使う
&amp;gt;&amp;gt;&amp;gt; vowels = &amp;#39;aeiou&amp;#39; &amp;gt;&amp;gt;&amp;gt; letter = &amp;#39;o&amp;#39; &amp;gt;&amp;gt;&amp;gt; letter in vowels True 辞書の場合、inはバリューではなくキーを使う</description></item><item><title>【4.3】Falseとして扱われるもの</title><link>https://dddsuz2.github.io/suzmemo/4.3false%E3%81%A8%E3%81%97%E3%81%A6%E6%89%B1%E3%82%8F%E3%82%8C%E3%82%8B%E3%82%82%E3%81%AE/</link><pubDate>Fri, 04 Aug 2023 01:01:17 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/4.3false%E3%81%A8%E3%81%97%E3%81%A6%E6%89%B1%E3%82%8F%E3%82%8C%E3%82%8B%E3%82%82%E3%81%AE/</guid><description>以下のものはFalseとして扱われる
ブール値: False 値の非存在: None 整数のゼロ: 0 浮動小数点数のゼロ: 0.0 空文字列: '' 空リスト: [] 空タプル: () 空辞書: {} 空集合: set()</description></item><item><title>【4.2】\による行の継続</title><link>https://dddsuz2.github.io/suzmemo/4.2%5C%E3%81%AB%E3%82%88%E3%82%8B%E8%A1%8C%E3%81%AE%E7%B6%99%E7%B6%9A/</link><pubDate>Thu, 03 Aug 2023 23:50:06 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/4.2%5C%E3%81%AB%E3%82%88%E3%82%8B%E8%A1%8C%E3%81%AE%E7%B6%99%E7%B6%9A/</guid><description>行末に\をおくと、Pythonはまだ改行していないと認識する</description></item><item><title>【4.1】#によるコメント</title><link>https://dddsuz2.github.io/suzmemo/4.1#%E3%81%AB%E3%82%88%E3%82%8B%E3%82%B3%E3%83%A1%E3%83%B3%E3%83%88/</link><pubDate>Thu, 03 Aug 2023 23:48:37 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/4.1#%E3%81%AB%E3%82%88%E3%82%8B%E3%82%B3%E3%83%A1%E3%83%B3%E3%83%88/</guid><description> 文頭に#をつけることで、その文はPythonインタプリタから無視される</description></item><item><title>【4】if文</title><link>https://dddsuz2.github.io/suzmemo/4if%E6%96%87/</link><pubDate>Thu, 03 Aug 2023 23:46:38 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/4if%E6%96%87/</guid><description>グイド・ヴァン・ロッサムがPythonを設計していたとき、インデントがあればプログラムの構造を表現できると考えた
disaster = True if disaster: print(&amp;#34;Woe!&amp;#34;) else: print(&amp;#34;Whee!&amp;#34;) PEP8 では、インデントは4個のスペースを使っている 条件が3つ以上に分かれる場合は、elifを使う 論理演算子と比較演算子が使える 論理演算子は比較対象の要素よりも優先順位が低い</description></item><item><title>【3.4】浮動小数点数</title><link>https://dddsuz2.github.io/suzmemo/3.4%E6%B5%AE%E5%8B%95%E5%B0%8F%E6%95%B0%E7%82%B9%E6%95%B0/</link><pubDate>Thu, 03 Aug 2023 23:43:08 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/3.4%E6%B5%AE%E5%8B%95%E5%B0%8F%E6%95%B0%E7%82%B9%E6%95%B0/</guid><description>小数点を持つ数を浮動小数点数という
eの後ろに10進数の桁数を入れることができる 【3.0】数値 float()を使えば、他のデータ型の値を浮動小数点数に変換できる</description></item><item><title>【3.2.2】int型の大きさ</title><link>https://dddsuz2.github.io/suzmemo/3.2.2int%E5%9E%8B%E3%81%AE%E5%A4%A7%E3%81%8D%E3%81%95/</link><pubDate>Thu, 03 Aug 2023 23:40:35 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/3.2.2int%E5%9E%8B%E3%81%AE%E5%A4%A7%E3%81%8D%E3%81%95/</guid><description>Python2 32ビット
-2,147,483,648 から、2,147,483,647 21億4748万3647 Python3
intはlongに統合された 利用可能なメモリサイズの範囲内で任意のサイズを表現できる</description></item><item><title>【3.2.1】整数への型の変換</title><link>https://dddsuz2.github.io/suzmemo/3.2.1%E6%95%B4%E6%95%B0%E3%81%B8%E3%81%AE%E5%9E%8B%E3%81%AE%E5%A4%89%E6%8F%9B/</link><pubDate>Thu, 03 Aug 2023 23:36:46 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/3.2.1%E6%95%B4%E6%95%B0%E3%81%B8%E3%81%AE%E5%9E%8B%E3%81%AE%E5%A4%89%E6%8F%9B/</guid><description>Pythonの整数以外へのデータ型を整数へ変換するには、int()関数を使う
浮動小数点は切り捨てられる 小数点や指数を含む文字列は処理しない _などのセパレータで区切られた数字の文字列も、整数型へ変換できる 10進数以外の基数をもつ整数型に変換する場合、引数として基数を指定する int(&amp;quot;10&amp;quot;, 2)</description></item><item><title>【3.3】基数</title><link>https://dddsuz2.github.io/suzmemo/3.3%E5%9F%BA%E6%95%B0/</link><pubDate>Thu, 03 Aug 2023 23:32:41 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/3.3%E5%9F%BA%E6%95%B0/</guid><description>整数では、基数を指定しない限り、10進数として扱われる
0b: 2進数 0o: 8進数 0x: 16進数 逆に、10進数をほかの基数付き文字列に変換できる
bin(val): 2進数へ変換 oct(val): 8進数へ変換 hex(val): 16進数へ変換 chr(val): 整数を文字コードとして解釈して、対応する文字に変換する ord(val): chr(val)の逆</description></item><item><title>【3.2】整数</title><link>https://dddsuz2.github.io/suzmemo/3.2%E6%95%B4%E6%95%B0/</link><pubDate>Thu, 03 Aug 2023 22:40:30 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/3.2%E6%95%B4%E6%95%B0/</guid><description> リテラル整数
Pythonでは、数字のシーケンスはリテラル整数となる 整数の先頭に、0x, 0o, 0xのどれかを置くことは可能 演算
+ - * / // % ** 割とよくあるやつが使える / は浮動小数点除算を行う 商と剰余をまとめて手に入れるには、divmodを使う (商、剰余)のタプルを返す 変数
リテラル整数と、整数オブジェクトが代入された変数を併用できる</description></item><item><title>【3.1】ブール値</title><link>https://dddsuz2.github.io/suzmemo/3.1%E3%83%96%E3%83%BC%E3%83%AB%E5%80%A4/</link><pubDate>Thu, 03 Aug 2023 22:37:40 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/3.1%E3%83%96%E3%83%BC%E3%83%AB%E5%80%A4/</guid><description>Pythonにおけるブール値は以下の二つのみ
True False bool()関数で値をブール型に変換できる
&amp;gt;&amp;gt;&amp;gt; bool(22) True &amp;gt;&amp;gt;&amp;gt; bool(-43) True &amp;gt;&amp;gt;&amp;gt; bool(False) False &amp;gt;&amp;gt;&amp;gt; bool(0) False &amp;gt;&amp;gt;&amp;gt; bool(0.000) False</description></item><item><title>【3.0】数値</title><link>https://dddsuz2.github.io/suzmemo/3.0%E6%95%B0%E5%80%A4/</link><pubDate>Thu, 03 Aug 2023 22:36:22 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/3.0%E6%95%B0%E5%80%A4/</guid><description> ブール値 整数 浮動小数点 10e8 &amp;mdash;-&amp;gt; 100000000.0</description></item><item><title>【2.4.4】2つの変数で同じオブジェクトの値を参照しており、片方の値を変更した場合</title><link>https://dddsuz2.github.io/suzmemo/2.4.42%E3%81%A4%E3%81%AE%E5%A4%89%E6%95%B0%E3%81%A7%E5%90%8C%E3%81%98%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E5%80%A4%E3%82%92%E5%8F%82%E7%85%A7%E3%81%97%E3%81%A6%E3%81%8A%E3%82%8A%E7%89%87%E6%96%B9%E3%81%AE%E5%80%A4%E3%82%92%E5%A4%89%E6%9B%B4%E3%81%97%E3%81%9F%E5%A0%B4%E5%90%88/</link><pubDate>Thu, 03 Aug 2023 22:29:15 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/2.4.42%E3%81%A4%E3%81%AE%E5%A4%89%E6%95%B0%E3%81%A7%E5%90%8C%E3%81%98%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E5%80%A4%E3%82%92%E5%8F%82%E7%85%A7%E3%81%97%E3%81%A6%E3%81%8A%E3%82%8A%E7%89%87%E6%96%B9%E3%81%AE%E5%80%A4%E3%82%92%E5%A4%89%E6%9B%B4%E3%81%97%E3%81%9F%E5%A0%B4%E5%90%88/</guid><description> イミュータブルなオブジェクトの場合 &amp;gt;&amp;gt;&amp;gt; x = 5 &amp;gt;&amp;gt;&amp;gt; y = x &amp;gt;&amp;gt;&amp;gt; x = 29 &amp;gt;&amp;gt;&amp;gt; x 29 &amp;gt;&amp;gt;&amp;gt; y 5 ミュータブルなオブジェクトの場合 &amp;gt;&amp;gt;&amp;gt; x [1, 2, 3, 4] &amp;gt;&amp;gt;&amp;gt; y = x &amp;gt;&amp;gt;&amp;gt; y [1, 2, 3, 4] &amp;gt;&amp;gt;&amp;gt; x [1, 2, 3, 4] &amp;gt;&amp;gt;&amp;gt; x.append(5) &amp;gt;&amp;gt;&amp;gt; x [1, 2, 3, 4, 5] &amp;gt;&amp;gt;&amp;gt; y [1, 2, 3, 4, 5] リストの場合、x[0], x[1], x[2] 自体も名前のような機能をはたしている
それぞれが、1, 2, 3 を指している</description></item><item><title>【2.4.3】参照カウントが0になった場合</title><link>https://dddsuz2.github.io/suzmemo/2.4.3%E5%8F%82%E7%85%A7%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88%E3%81%8C0%E3%81%AB%E3%81%AA%E3%81%A3%E3%81%9F%E5%A0%B4%E5%90%88/</link><pubDate>Thu, 03 Aug 2023 22:08:31 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/2.4.3%E5%8F%82%E7%85%A7%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88%E3%81%8C0%E3%81%AB%E3%81%AA%E3%81%A3%E3%81%9F%E5%A0%B4%E5%90%88/</guid><description>オブジェクトの参照カウントが0になった場合
そのオブジェクトを指す名前が一つもなくなっている ガベージコレクタによってオブジェクトのメモリが再利用される</description></item><item><title>【2.4.2】変数を宣言した時の流れ</title><link>https://dddsuz2.github.io/suzmemo/2.4.2%E5%A4%89%E6%95%B0%E3%82%92%E5%AE%A3%E8%A8%80%E3%81%97%E3%81%9F%E6%99%82%E3%81%AE%E6%B5%81%E3%82%8C/</link><pubDate>Thu, 03 Aug 2023 22:00:13 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/2.4.2%E5%A4%89%E6%95%B0%E3%82%92%E5%AE%A3%E8%A8%80%E3%81%97%E3%81%9F%E6%99%82%E3%81%AE%E6%B5%81%E3%82%8C/</guid><description>&amp;gt;&amp;gt;&amp;gt; y = 5 &amp;gt;&amp;gt;&amp;gt; x = 12 - y &amp;gt;&amp;gt;&amp;gt; x 値5の整数オブジェクトが作られる 値5のオブジェクトを指す変数yが作られる 値5の参照カウントがインクリメントされる 値12のオブジェクトが別に作られる 値12のオブジェクトから変数yが指す値5のオブジェクトを引く 減算の結果得られた値7を新しい整数オブジェクトに代入した 変数xがこの値7の整数オブジェクトを指すようにした xが指す整数オブジェクトの参照カウントをインクリメントする xが指す整数オブジェクトの値をルックアップし、7が出力された</description></item><item><title>【2.4.1】変数の型を知りたい時</title><link>https://dddsuz2.github.io/suzmemo/2.4.1%E5%A4%89%E6%95%B0%E3%81%AE%E5%9E%8B%E3%82%92%E7%9F%A5%E3%82%8A%E3%81%9F%E3%81%84%E6%99%82/</link><pubDate>Thu, 03 Aug 2023 21:58:09 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/2.4.1%E5%A4%89%E6%95%B0%E3%81%AE%E5%9E%8B%E3%82%92%E7%9F%A5%E3%82%8A%E3%81%9F%E3%81%84%E6%99%82/</guid><description>typeを使う
&amp;gt;&amp;gt;&amp;gt; type(7) &amp;lt;class &amp;#39;int&amp;#39;&amp;gt; &amp;gt;&amp;gt;&amp;gt; type(x) &amp;lt;class &amp;#39;list&amp;#39;&amp;gt; classとは、オブジェクトの定義である</description></item><item><title>【2.4】変数</title><link>https://dddsuz2.github.io/suzmemo/2.4%E5%A4%89%E6%95%B0/</link><pubDate>Thu, 03 Aug 2023 21:49:39 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/2.4%E5%A4%89%E6%95%B0/</guid><description>変数とは何か？
使いたいメモリ上の値に名前をつけたもの Pythonにおける変数名の制約
使える文字 大文字、小文字の英字 数字 アンダースコア 予約語は使えない 予約語を確認する方法 help(&amp;quot;keywords) 代入
=をつかって変数に値を代入できる =の右辺に値がある場合、その変数は初期化済みと表現される 値が入っていない変数は未初期化変数と呼ばれる Pythonにおける変数
Pythonでは、変数はただの名前である
代入したからといって値がコピーされた新しい領域が確保されるわけではない ただの参照手段 これにより、型を指定しなくてもよくなっている 他のプログラミング言語の場合
変数自身が型を持ち、メモリ位置が固定されている 複数の名前への代入が可能
それはそう 同時に2つの名前へ代入するのも、ある名前へ代入してから、別の名前に代入するのも、やってること同じだと思います</description></item><item><title>【2.3】リテラル値</title><link>https://dddsuz2.github.io/suzmemo/2.3%E3%83%AA%E3%83%86%E3%83%A9%E3%83%AB%E5%80%A4/</link><pubDate>Thu, 03 Aug 2023 21:48:19 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/2.3%E3%83%AA%E3%83%86%E3%83%A9%E3%83%AB%E5%80%A4/</guid><description>Pythonでは、次の二つの方法でデータの値を指定できる
リテラル値 変数</description></item><item><title>【2.2】ミュータビリティ</title><link>https://dddsuz2.github.io/suzmemo/2.2%E3%83%9F%E3%83%A5%E3%83%BC%E3%82%BF%E3%83%93%E3%83%AA%E3%83%86%E3%82%A3/</link><pubDate>Thu, 03 Aug 2023 21:46:27 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/2.2%E3%83%9F%E3%83%A5%E3%83%BC%E3%82%BF%E3%83%93%E3%83%AA%E3%83%86%E3%82%A3/</guid><description>オブジェクトの値が変更できるかどうか
ミュータブル 変更できる イミュータブル 変更できない Pythonは強い型付き言語
値がミュータブルだろうと、型は変わらない</description></item><item><title>【6.5】相手に共感するには</title><link>https://dddsuz2.github.io/suzmemo/6.5%E7%9B%B8%E6%89%8B%E3%81%AB%E5%85%B1%E6%84%9F%E3%81%99%E3%82%8B%E3%81%AB%E3%81%AF/</link><pubDate>Thu, 03 Aug 2023 20:42:34 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/6.5%E7%9B%B8%E6%89%8B%E3%81%AB%E5%85%B1%E6%84%9F%E3%81%99%E3%82%8B%E3%81%AB%E3%81%AF/</guid><description>感情を知るための二つのかぎ
ライフイベント デイリーハッスル 日常的な苛立ち 先回りして行動をおこしておくことが有効 相手の日常の所作を観察し、異常があれば先に動く、声をかける</description></item><item><title>【6.4】聞き上手になるには</title><link>https://dddsuz2.github.io/suzmemo/6.4%E8%81%9E%E3%81%8D%E4%B8%8A%E6%89%8B%E3%81%AB%E3%81%AA%E3%82%8B%E3%81%AB%E3%81%AF/</link><pubDate>Thu, 03 Aug 2023 20:38:25 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/6.4%E8%81%9E%E3%81%8D%E4%B8%8A%E6%89%8B%E3%81%AB%E3%81%AA%E3%82%8B%E3%81%AB%E3%81%AF/</guid><description> 聞き上手 相手から話をドンドン引き出す 会話の主導権を握る なんちゃって聞き上手 聞くリアクションがうまいだけ</description></item><item><title>【6.3】本音を打ち明けてもらうには</title><link>https://dddsuz2.github.io/suzmemo/6.3%E6%9C%AC%E9%9F%B3%E3%82%92%E6%89%93%E3%81%A1%E6%98%8E%E3%81%91%E3%81%A6%E3%82%82%E3%82%89%E3%81%86%E3%81%AB%E3%81%AF/</link><pubDate>Thu, 03 Aug 2023 20:37:24 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/6.3%E6%9C%AC%E9%9F%B3%E3%82%92%E6%89%93%E3%81%A1%E6%98%8E%E3%81%91%E3%81%A6%E3%82%82%E3%82%89%E3%81%86%E3%81%AB%E3%81%AF/</guid><description>相手の情報を調べ、会話に織り込む
点と点をつなげる話し方</description></item><item><title>【6.2】何でも話してもらえる3つの極意</title><link>https://dddsuz2.github.io/suzmemo/6.2%E4%BD%95%E3%81%A7%E3%82%82%E8%A9%B1%E3%81%97%E3%81%A6%E3%82%82%E3%82%89%E3%81%88%E3%82%8B3%E3%81%A4%E3%81%AE%E6%A5%B5%E6%84%8F/</link><pubDate>Thu, 03 Aug 2023 20:26:07 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/6.2%E4%BD%95%E3%81%A7%E3%82%82%E8%A9%B1%E3%81%97%E3%81%A6%E3%82%82%E3%82%89%E3%81%88%E3%82%8B3%E3%81%A4%E3%81%AE%E6%A5%B5%E6%84%8F/</guid><description>あまり話してくれない人への対処法
「唯一無二のこと」を質問する 相手が答えやすい質問 答えが一つしかない質問 コンパクトな質問を心掛ける 20文字程度がいい 「3～5回」に分解した質問をする 同じテーマの質問を分解する</description></item><item><title>【6.1】必勝パターン2つ</title><link>https://dddsuz2.github.io/suzmemo/6.1%E5%BF%85%E5%8B%9D%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B32%E3%81%A4/</link><pubDate>Thu, 03 Aug 2023 20:22:55 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/6.1%E5%BF%85%E5%8B%9D%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B32%E3%81%A4/</guid><description> 「冠婚葬祭」をスルーしない トン・トン・ターンでリアクションする 悲しい話も人は聞いて欲しがっている 静かにリアクションする こだわりのサインを見つけよう 注目すべきポイントは、「ひととの違い」</description></item><item><title>【6.0】相手が話したいモードになるスイッチを押す</title><link>https://dddsuz2.github.io/suzmemo/6.0%E7%9B%B8%E6%89%8B%E3%81%8C%E8%A9%B1%E3%81%97%E3%81%9F%E3%81%84%E3%83%A2%E3%83%BC%E3%83%89%E3%81%AB%E3%81%AA%E3%82%8B%E3%82%B9%E3%82%A4%E3%83%83%E3%83%81%E3%82%92%E6%8A%BC%E3%81%99/</link><pubDate>Thu, 03 Aug 2023 20:19:40 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/6.0%E7%9B%B8%E6%89%8B%E3%81%8C%E8%A9%B1%E3%81%97%E3%81%9F%E3%81%84%E3%83%A2%E3%83%BC%E3%83%89%E3%81%AB%E3%81%AA%E3%82%8B%E3%82%B9%E3%82%A4%E3%83%83%E3%83%81%E3%82%92%E6%8A%BC%E3%81%99/</guid><description>話したいモードを押すタイミングとは？
相手が「気付いてくれ」「話したいことがあるんだ」とサインを送っている時 こちらが話してもいないことを、相手がそれとなく話始めた時 「ここだけの話」が出てくると、ダムは決壊したと見ていい これに反応しないと盛り下がってしまう</description></item><item><title>【3.1】terraformにおけるプロバイダとは？</title><link>https://dddsuz2.github.io/suzmemo/3.1terraform%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E3%83%97%E3%83%AD%E3%83%90%E3%82%A4%E3%83%80%E3%81%A8%E3%81%AF/</link><pubDate>Thu, 03 Aug 2023 18:39:51 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/3.1terraform%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E3%83%97%E3%83%AD%E3%83%90%E3%82%A4%E3%83%80%E3%81%A8%E3%81%AF/</guid><description>プロバイダとは
インフラを管理するリソース（AWSとかGCPとか、GithubとかDockerとか）と対話するためのプラグイン terraform において、その設定内で作成されるリソースの作成、更新、削除などの管理を担当する</description></item><item><title>【3.0】terraformにおいて、状態ファイルをS3に保存する</title><link>https://dddsuz2.github.io/suzmemo/3.0terraform%E3%81%AB%E3%81%8A%E3%81%84%E3%81%A6%E7%8A%B6%E6%85%8B%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92s3%E3%81%AB%E4%BF%9D%E5%AD%98%E3%81%99%E3%82%8B/</link><pubDate>Thu, 03 Aug 2023 18:14:01 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/3.0terraform%E3%81%AB%E3%81%8A%E3%81%84%E3%81%A6%E7%8A%B6%E6%85%8B%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92s3%E3%81%AB%E4%BF%9D%E5%AD%98%E3%81%99%E3%82%8B/</guid><description>terraform { backend &amp;#34;s3&amp;#34; { region = &amp;#34;region&amp;#34; bucket = &amp;#34;bucket_name&amp;#34; key = &amp;#34;wawawa.tfstate&amp;#34; encrypt = true } } required_version = &amp;#34;=1.x.x&amp;#34; required_providers { aws = { version = &amp;#34;4.x.x&amp;#34; } http = { version = &amp;#34;2.x.x&amp;#34; } } terraform において、.tfstate はデフォルトでローカルに保存される backend に s3 を指定して状態ファイルをS3に保存する key: S3バケット内での状態ファイルのパスまたは名前を指定する required_version: terraformのバージョンを指定する 複数人でterraformを実行して、.tfstateが更新されてコンフリクトを起こすのを防ぐため、DynamoDBによってロックをかけることができる dynamodb_table = 'テーブル名'</description></item><item><title>【2.1】terraformにおけるモジュールとは？</title><link>https://dddsuz2.github.io/suzmemo/2.1terraform%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%A8%E3%81%AF/</link><pubDate>Thu, 03 Aug 2023 17:54:18 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/2.1terraform%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%A8%E3%81%AF/</guid><description>Terraform Module とは？
複数のresourceブロックで構成されたファイル群(.tf)をテンプレート化したもの 別ディレクトリ、リモートにある.tfファイルを関数のように呼び出すことができる</description></item><item><title>【2.0】terraformにおける環境ごとのデプロイ</title><link>https://dddsuz2.github.io/suzmemo/2.0terraform%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E7%92%B0%E5%A2%83%E3%81%94%E3%81%A8%E3%81%AE%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4/</link><pubDate>Thu, 03 Aug 2023 17:53:47 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/2.0terraform%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E7%92%B0%E5%A2%83%E3%81%94%E3%81%A8%E3%81%AE%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4/</guid><description>それぞれの環境ごとに異なるリソースを管理したり、同じリソースでも異なるパラメータを使いたい場合 環境ごとに env/{$環境}フォルダを作る それらの下に、main.tf ファイルを作る [Terraform]Moduleを作ると環境毎のデプロイが便利</description></item><item><title>【1.0】最も簡単なパターンのcodebuildスクリプト</title><link>https://dddsuz2.github.io/suzmemo/1.0%E6%9C%80%E3%82%82%E7%B0%A1%E5%8D%98%E3%81%AA%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E3%81%AEcodebuild%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88/</link><pubDate>Thu, 03 Aug 2023 17:39:14 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/1.0%E6%9C%80%E3%82%82%E7%B0%A1%E5%8D%98%E3%81%AA%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E3%81%AEcodebuild%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88/</guid><description>version: 0.2 phases: build: commands: - ./terraform/codebuild/build.sh set -eux terraform version cd &amp;#34;terraform/env/${ENV}&amp;#34; || exit if [&amp;#34;{$COMMNAD}&amp;#34; = &amp;#34;apply&amp;#34;]; then terraform apply -auto-approve elif [&amp;#34;{$COMMAND}&amp;#34; = &amp;#34;destroy&amp;#34;]; then terraform destroy -auto-approve else terraform &amp;#34;${COMMAND}&amp;#34; fi cd - || exit CI/CD パイプラインのようなスクリプトの実行が自動化されている環境では、auto-approve をつけて、対話的なプロンプトが起動しないようにする || exit をつけることで、前のコマンドが失敗した時に強制的にスクリプトを終了する set -eux -e（errexit）: このオプションが設定されていると、シェルスクリプトはエラーが発生した箇所で停止します。通常、シェルスクリプトはエラーが発生しても全てのコマンドを実行し終えるまで処理を続けます。しかし、set -eを設定すると、途中でエラーが起きた場合にはその時点でスクリプトが停止します。
-u（nounset）: このオプションが設定されていると、未定義の変数を参照しようとするとエラーが発生します。これは、変数の名前を間違えたり、変数が予期せず未設定のままになっている場合などのミスを防ぐのに役立ちます。
-x（xtrace）: このオプションが設定されていると、シェルスクリプトは実行するコマンドをすべて表示します。これはデバッグに便利で、どのコマンドがどのように実行されているかを明確にするのに役立ちます。
cd - cd -というコマンドはシェルで前回の作業ディレクトリに戻る役割を果たします。</description></item><item><title>【1.1】codebuildにおけるversionの指定</title><link>https://dddsuz2.github.io/suzmemo/1.1codebuild%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8Bversion%E3%81%AE%E6%8C%87%E5%AE%9A/</link><pubDate>Thu, 03 Aug 2023 17:37:20 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/1.1codebuild%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8Bversion%E3%81%AE%E6%8C%87%E5%AE%9A/</guid><description> version の指定が必須 現在は ver0.2 を指定する バージョン 0.1 はサポートされているが、可能な限りバージョン 0.2 を指定する</description></item><item><title>【メモ】AWS</title><link>https://dddsuz2.github.io/suzmemo/%E3%83%A1%E3%83%A2aws/</link><pubDate>Thu, 03 Aug 2023 17:28:41 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/%E3%83%A1%E3%83%A2aws/</guid><description/></item><item><title>メモ一覧</title><link>https://dddsuz2.github.io/suzmemo/%E3%83%A1%E3%83%A2%E4%B8%80%E8%A6%A7/</link><pubDate>Thu, 03 Aug 2023 17:14:30 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/%E3%83%A1%E3%83%A2%E4%B8%80%E8%A6%A7/</guid><description>ba</description></item><item><title>【1.0】codebuildにおけるbuildspec</title><link>https://dddsuz2.github.io/suzmemo/1.0codebuild%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8Bbuildspec/</link><pubDate>Thu, 03 Aug 2023 17:14:15 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/1.0codebuild%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8Bbuildspec/</guid><description>codebuild では、buildspec というファイルを使用して、ビルド仕様を決定することができる デフォルト名は buildspec.yml ソースディレクトリのルートに配置する必要がある buildspec.yml のファイル名と場所の変更 同じリポジトリの異なるビルドに、buildspec_debug.ymlや、buildspec_release.yml などの異なるファイルを使用する ルートディレクトリ以外の場所や、S3バケットに保存することができる ビルドプロジェクトと同じリージョンにS3バケットが存在する必要がある arn を使ってファイルを指定する ビルドプロジェクトには、1つの buildspec しか存在できない buildspec ファイルの名前、場所、またはその両方をオーバーライドする場合 AWS CLI の create-project または、update-project コマンドを使用する buildspec の値を、組み込みの環境変数の CODEBUILD_SRC_DIR の値を基準にした代替パスに設定する AWS CLI の start-build コマンドから、buildspecOverride の値を、CODEBUILD_SRC_DIR の値を基準にした代替パスに設定する AWS CloudFormation テンプレートで、BuildSpec タイプのリソース Source の AWS::CodeBuild::Project プロパティを、組み込みの環境変数 CODEBUILD_SRC_DIR の値を基準にした代替 buildspec ファイルのパスに設定します。</description></item><item><title>【2.1】型</title><link>https://dddsuz2.github.io/suzmemo/2.1%E5%9E%8B/</link><pubDate>Wed, 02 Aug 2023 23:50:32 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/2.1%E5%9E%8B/</guid><description>Pythonの基本データ型
ブール値 整数 浮動小数点 複素数 文字列 リスト ミュータブル タプル バイト バイト配列 ミュータブル 集合 ミュータブル frozenset 辞書 ミュータブル</description></item><item><title>【2.0】Python のデータはオブジェクトである</title><link>https://dddsuz2.github.io/suzmemo/2.0python-%E3%81%AE%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AF%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%A7%E3%81%82%E3%82%8B/</link><pubDate>Wed, 02 Aug 2023 23:24:31 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/2.0python-%E3%81%AE%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AF%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%A7%E3%81%82%E3%82%8B/</guid><description> プログラムはどこ（メモリ内の位置）に何（データ型）があるかを管理する コンピュータから見ればすべてはビットの集合体 Pythonでは、メモリ内のデータはすべてオブジェクトとして扱われる オブジェクトは次のものから構成されるデータのチャンクである 型 ID 値 参照カウント ということは、整数型が8バイトだったとして、8バイト+αでメモリが確保されるということ？
結構無駄に思えてしまう</description></item><item><title>【1】The Zen Of Python</title><link>https://dddsuz2.github.io/suzmemo/1the-zen-of-python/</link><pubDate>Wed, 02 Aug 2023 23:14:19 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/1the-zen-of-python/</guid><description>The Zen of Python, by Tim Peters Beautiful is better than ugly. 醜いより美しいほうがいい。 Explicit is better than implicit. 暗示するより明示するほうがいい。 Simple is better than complex. 複雑であるよりは平易であるほうがいい。 Complex is better than complicated. それでも、込み入っているよりは複雑であるほうがまし。 Flat is better than nested. ネストは浅いほうがいい。 Sparse is better than dense. 密集しているよりは隙間があるほうがいい。 Readability counts. 読みやすいことは善である。 Special cases aren&amp;#39;t special enough to break the rules. 特殊であることはルールを破る理由にならない。 Although practicality beats purity. しかし、実用性を求めると純粋さが失われることがある。 Errors should never pass silently. エラーは隠すな、無視するな。 Unless explicitly silenced. ただし、わざと隠されているのなら見逃せ。 In the face of ambiguity, refuse the temptation to guess.</description></item><item><title>【書誌】入門Python3</title><link>https://dddsuz2.github.io/suzmemo/%E6%9B%B8%E8%AA%8C%E5%85%A5%E9%96%80python3/</link><pubDate>Wed, 02 Aug 2023 23:08:54 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/%E6%9B%B8%E8%AA%8C%E5%85%A5%E9%96%80python3/</guid><description>監訳者まえがき まえがき 第Ⅰ部　Pythonの基礎 1章 Pyの味見 1.1　なぞなぞ 1.2　小さなプログラム 1.3　少し大きなプログラム 1.4　現実の世界でのPython 1.5　Pythonと惑星Xの他言語の比較 1.6　では、なぜPythonなのか 1.7　Pythonを避けるべきとき 1.8　Python 2かPython 3か 1.9　Pythonのインストール 1.10　Pythonの実行 1.10.1　対話型インタプリタの使い方 1.10.2　Pythonファイルの使い方 1.10.3　このあとはどうなる？ 1.11　The Zen of Python 1.12　次章では 1.13　復習課題 2章 データ：型、値、変数、そして名前 2.1　Pythonのデータはオブジェクトである 2.2　型 2.3　ミュータビリティ 2.4　リテラル値 2.5　変数 2.6　代入 2.7　変数は名前であって場所ではない 2.8　複数の名前への代入 2.9　名前への再代入 2.10　コピー 2.11　適切な変数名の選択 2.12　次章では 2.</description></item><item><title>【Splunk Enterprise 2.1】License pooling とは？</title><link>https://dddsuz2.github.io/suzmemo/splunk-enterprise-2.1license-pooling-%E3%81%A8%E3%81%AF/</link><pubDate>Wed, 02 Aug 2023 22:41:20 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/splunk-enterprise-2.1license-pooling-%E3%81%A8%E3%81%AF/</guid><description> License Stack 個々の License Volume が集約されたもの Enterprise と Enterprise Sales Trial ライセンスのみスタック可能 License Master (LM) Liscense Stack を持ち、Liscense Peer (Liscense Slave) 以下の各インスタンスにライセンスを分配する Liscense Peer 間でライセンスを共有することができる License Pool License stack から割り当てられるライセンスの量</description></item><item><title>【Splunk Enterprise 2.0】Splunk Enterprise と Splunk Cloud の違い</title><link>https://dddsuz2.github.io/suzmemo/splunk-enterprise-2.0splunk-enterprise-%E3%81%A8-splunk-cloud-%E3%81%AE%E9%81%95%E3%81%84/</link><pubDate>Wed, 02 Aug 2023 22:22:13 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/splunk-enterprise-2.0splunk-enterprise-%E3%81%A8-splunk-cloud-%E3%81%AE%E9%81%95%E3%81%84/</guid><description> Splunk Enterprise Splunk Cloud CLI 利用可能 利用不可　Splunk Apps 利用者が自由に決められる Splunkによって承認されたアプリのみ Direct TCP/UDP network input 利用可能 利用不可 Scripted Alerts 利用可能 承認されたアプリのみ利用可能 License pooling 利用可能 利用不可 HEC 利用可能 利用可能(ELB on port 443 のみ) Splunk API デフォルトで利用可能 IP Allow List を使用すれば利用可能 Network Connection TCP or UDP オンプレミス上の Forwarder からのTCPのみ（UF credentials が必要） 【Splunk Enterprise 2-1】License pooling とは？
License Poolong って何やねんと思ったときの説明</description></item><item><title>【5.3】質問の3つの機能</title><link>https://dddsuz2.github.io/suzmemo/5.3%E8%B3%AA%E5%95%8F%E3%81%AE3%E3%81%A4%E3%81%AE%E6%A9%9F%E8%83%BD/</link><pubDate>Wed, 02 Aug 2023 19:51:19 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/5.3%E8%B3%AA%E5%95%8F%E3%81%AE3%E3%81%A4%E3%81%AE%E6%A9%9F%E8%83%BD/</guid><description> 知らないことを知る クローズドクエスチョンとオープンクエスチョンを使い分ける 相手に考えてもらう 関係がしっかりできていないと意味がない 相手の頭を整理する 要るものと要らないものを分ける 順番通りに並べる</description></item><item><title>【5.2】情報収集のテクニック</title><link>https://dddsuz2.github.io/suzmemo/5.2%E6%83%85%E5%A0%B1%E5%8F%8E%E9%9B%86%E3%81%AE%E3%83%86%E3%82%AF%E3%83%8B%E3%83%83%E3%82%AF/</link><pubDate>Wed, 02 Aug 2023 19:48:13 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/5.2%E6%83%85%E5%A0%B1%E5%8F%8E%E9%9B%86%E3%81%AE%E3%83%86%E3%82%AF%E3%83%8B%E3%83%83%E3%82%AF/</guid><description>基本知識を押さえたら、それらの最新情報を随時集める
感度を高め、アンテナを張るだけで良い</description></item><item><title>【5.1】調べるべきイチオシの情報</title><link>https://dddsuz2.github.io/suzmemo/5.1%E8%AA%BF%E3%81%B9%E3%82%8B%E3%81%B9%E3%81%8D%E3%82%A4%E3%83%81%E3%82%AA%E3%82%B7%E3%81%AE%E6%83%85%E5%A0%B1/</link><pubDate>Wed, 02 Aug 2023 19:46:22 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/5.1%E8%AA%BF%E3%81%B9%E3%82%8B%E3%81%B9%E3%81%8D%E3%82%A4%E3%83%81%E3%82%AA%E3%82%B7%E3%81%AE%E6%83%85%E5%A0%B1/</guid><description> 基本知識 ほとんど変わらないもの 次の二つに分けられる 調べればわかること 質問すればわかること 最新情報 刻々と変わるもの</description></item><item><title>【5】ダメな質問のパターン5つ</title><link>https://dddsuz2.github.io/suzmemo/5%E3%83%80%E3%83%A1%E3%81%AA%E8%B3%AA%E5%95%8F%E3%81%AE%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B35%E3%81%A4/</link><pubDate>Wed, 02 Aug 2023 19:23:26 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/5%E3%83%80%E3%83%A1%E3%81%AA%E8%B3%AA%E5%95%8F%E3%81%AE%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B35%E3%81%A4/</guid><description>「わかってるね」は信頼のバロメーター
ダメな質問のパターン
疑問に思ったことを「そのまま質問する」 そもそも質問は作るもの 頭に思い浮かんだ疑問を、そのままのカタチで質問すべきではない 「質問する相手」を間違える 答えを得られないならまだマシで、間違った答えを教えられる可能性がある 誰に質問するのが一番いいか考えてみる 「考えればわかること」を質問する 質問する前に自分で考えればわかることかどうか、質問してみる 「調べればわかること」を質問する 「抽象的なこと」を質問する</description></item><item><title>【4.11】DESC法</title><link>https://dddsuz2.github.io/suzmemo/4.11desc%E6%B3%95/</link><pubDate>Wed, 02 Aug 2023 19:21:49 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/4.11desc%E6%B3%95/</guid><description>Describe Express Suggest Consequence 背景を説明してから問題提起したいときや、提案に向いている</description></item><item><title>【4.10】PREP法</title><link>https://dddsuz2.github.io/suzmemo/4.10prep%E6%B3%95/</link><pubDate>Wed, 02 Aug 2023 19:19:51 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/4.10prep%E6%B3%95/</guid><description> P (要点) R（理由） E（具体例） P（要点） 結果報告や悩みの相談に向いている
慣れないうちは準備してから話した方がいい</description></item><item><title>【4.9】SDS法</title><link>https://dddsuz2.github.io/suzmemo/4.9sds%E6%B3%95/</link><pubDate>Wed, 02 Aug 2023 19:17:38 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/4.9sds%E6%B3%95/</guid><description> S (要点) D（詳細） S（要点） 詳細を要点ではさむ
自己紹介、商品紹介に向いている</description></item><item><title>【4.8】「結論ファースト」で話す</title><link>https://dddsuz2.github.io/suzmemo/4.8%E7%B5%90%E8%AB%96%E3%83%95%E3%82%A1%E3%83%BC%E3%82%B9%E3%83%88%E3%81%A7%E8%A9%B1%E3%81%99/</link><pubDate>Wed, 02 Aug 2023 19:13:13 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/4.8%E7%B5%90%E8%AB%96%E3%83%95%E3%82%A1%E3%83%BC%E3%82%B9%E3%83%88%E3%81%A7%E8%A9%B1%E3%81%99/</guid><description>「結論を後回し」にすると、脇道にそれやすい
相手に興味を持たせたいときには、ストーリー形式で話す
そんなことが必要ないなら、結論ファーストで話す
報告の時には、時系列で話すべきではない
たとえ話は後にする
ロジカルに話す時は結論ファースト エモーショナルに話したいときは結論ラスト ごちゃまぜにしてはいけない</description></item><item><title>【4.7】主語と述語を近づける</title><link>https://dddsuz2.github.io/suzmemo/4.7%E4%B8%BB%E8%AA%9E%E3%81%A8%E8%BF%B0%E8%AA%9E%E3%82%92%E8%BF%91%E3%81%A5%E3%81%91%E3%82%8B/</link><pubDate>Wed, 02 Aug 2023 19:10:42 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/4.7%E4%B8%BB%E8%AA%9E%E3%81%A8%E8%BF%B0%E8%AA%9E%E3%82%92%E8%BF%91%E3%81%A5%E3%81%91%E3%82%8B/</guid><description> 念入りに話過ぎると話が長くなる 話が長くなると、主語と述語が遠くなり、話が分かりにくくなる 主語と述語を近づける 話は長くてもいい 一文は短い方がいい</description></item><item><title>【4.6】話がそれないように木を意識して話す</title><link>https://dddsuz2.github.io/suzmemo/4.6%E8%A9%B1%E3%81%8C%E3%81%9D%E3%82%8C%E3%81%AA%E3%81%84%E3%82%88%E3%81%86%E3%81%AB%E6%9C%A8%E3%82%92%E6%84%8F%E8%AD%98%E3%81%97%E3%81%A6%E8%A9%B1%E3%81%99/</link><pubDate>Wed, 02 Aug 2023 19:06:53 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/4.6%E8%A9%B1%E3%81%8C%E3%81%9D%E3%82%8C%E3%81%AA%E3%81%84%E3%82%88%E3%81%86%E3%81%AB%E6%9C%A8%E3%82%92%E6%84%8F%E8%AD%98%E3%81%97%E3%81%A6%E8%A9%B1%E3%81%99/</guid><description>話がそれる人
話している最中に枝葉のキーワードについて連想を始めてしまう 木をイメージして話す
「幹」「枝」「葉」 「幹」にあたるのが話の論点</description></item><item><title>【4.5】専門用語は相手に合わせて使う</title><link>https://dddsuz2.github.io/suzmemo/4.5%E5%B0%82%E9%96%80%E7%94%A8%E8%AA%9E%E3%81%AF%E7%9B%B8%E6%89%8B%E3%81%AB%E5%90%88%E3%82%8F%E3%81%9B%E3%81%A6%E4%BD%BF%E3%81%86/</link><pubDate>Wed, 02 Aug 2023 19:03:11 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/4.5%E5%B0%82%E9%96%80%E7%94%A8%E8%AA%9E%E3%81%AF%E7%9B%B8%E6%89%8B%E3%81%AB%E5%90%88%E3%82%8F%E3%81%9B%E3%81%A6%E4%BD%BF%E3%81%86/</guid><description>業界用語と、「よく聞くが意味が分かりづらいビジネス用語」を使う時は気を付ける 「よく聞くが実はいみがわかりづらいビジネス用語」
アジェンダ アサイン アテンド イシュー イニシアティブ エクスキューズ エビデンス コミット コンセンサス サマリー シュリンク スキーム ステークホルダー タスク ナレッジ バッファ フィックス プライオリティ ペンディング リソース ローンチ 相手がわかる言葉を選ぶのが、丁寧な話し方</description></item><item><title>【4.4】「あの・この・その」に気を付ける</title><link>https://dddsuz2.github.io/suzmemo/4.4%E3%81%82%E3%81%AE%E3%81%93%E3%81%AE%E3%81%9D%E3%81%AE%E3%81%AB%E6%B0%97%E3%82%92%E4%BB%98%E3%81%91%E3%82%8B/</link><pubDate>Wed, 02 Aug 2023 19:00:43 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/4.4%E3%81%82%E3%81%AE%E3%81%93%E3%81%AE%E3%81%9D%E3%81%AE%E3%81%AB%E6%B0%97%E3%82%92%E4%BB%98%E3%81%91%E3%82%8B/</guid><description>「あの・この・その」に気を付ける
「あの・この・その」がさす具体的な何かをハッキリ話す ハッキリ話した後に「あの・この・その」を使うのは問題ない</description></item><item><title>【4.3】ぼんやり表現を「4W2H」で分解する</title><link>https://dddsuz2.github.io/suzmemo/4.3%E3%81%BC%E3%82%93%E3%82%84%E3%82%8A%E8%A1%A8%E7%8F%BE%E3%82%924w2h%E3%81%A7%E5%88%86%E8%A7%A3%E3%81%99%E3%82%8B/</link><pubDate>Wed, 02 Aug 2023 18:35:08 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/4.3%E3%81%BC%E3%82%93%E3%82%84%E3%82%8A%E8%A1%A8%E7%8F%BE%E3%82%924w2h%E3%81%A7%E5%88%86%E8%A7%A3%E3%81%99%E3%82%8B/</guid><description>ぼんやり話す人の特徴
形容詞、副詞をそのまま加工せずに使うこと 「4W2H」で分解する いつ 誰 何 どこ どのように どれくらい</description></item><item><title>【4.2】最後までしっかり話きる</title><link>https://dddsuz2.github.io/suzmemo/4.2%E6%9C%80%E5%BE%8C%E3%81%BE%E3%81%A7%E3%81%97%E3%81%A3%E3%81%8B%E3%82%8A%E8%A9%B1%E3%81%8D%E3%82%8B/</link><pubDate>Wed, 02 Aug 2023 18:33:31 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/4.2%E6%9C%80%E5%BE%8C%E3%81%BE%E3%81%A7%E3%81%97%E3%81%A3%E3%81%8B%E3%82%8A%E8%A9%B1%E3%81%8D%E3%82%8B/</guid><description>最後まではっきり言わない話し方は伝わらない
特に依頼するとき 相手に何をしてもらいたいか、相手目線で話し切る</description></item><item><title>【4.1】話し方の基本</title><link>https://dddsuz2.github.io/suzmemo/4.1%E8%A9%B1%E3%81%97%E6%96%B9%E3%81%AE%E5%9F%BA%E6%9C%AC/</link><pubDate>Wed, 02 Aug 2023 18:31:34 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/4.1%E8%A9%B1%E3%81%97%E6%96%B9%E3%81%AE%E5%9F%BA%E6%9C%AC/</guid><description>話し方の基本とは？
「丁寧に」話すこと 流暢でなくてもいいし、会話が弾まなくてもいい 丁寧に話すために、「漏れなく」「細かく」を意識しよう</description></item><item><title>【4】誤解を生む話し方とは？</title><link>https://dddsuz2.github.io/suzmemo/4%E8%AA%A4%E8%A7%A3%E3%82%92%E7%94%9F%E3%82%80%E8%A9%B1%E3%81%97%E6%96%B9%E3%81%A8%E3%81%AF/</link><pubDate>Wed, 02 Aug 2023 18:29:38 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/4%E8%AA%A4%E8%A7%A3%E3%82%92%E7%94%9F%E3%82%80%E8%A9%B1%E3%81%97%E6%96%B9%E3%81%A8%E3%81%AF/</guid><description>思い付きで話すと、話はあいまいになる
話がかみ合わないのは、ぼんやり話すから 曖昧な話になったときに、何度も確認してくれる人なら良いが、そうでないなら、聞き手は自分の解釈で話を進めてしまう 誤解が誤解を生む状態になる</description></item><item><title>【3.7】ちなみに作戦</title><link>https://dddsuz2.github.io/suzmemo/3.7%E3%81%A1%E3%81%AA%E3%81%BF%E3%81%AB%E4%BD%9C%E6%88%A6/</link><pubDate>Wed, 02 Aug 2023 17:46:08 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/3.7%E3%81%A1%E3%81%AA%E3%81%BF%E3%81%AB%E4%BD%9C%E6%88%A6/</guid><description> 細かい点を確認すると嫌がられやすい すでに確認するまでもないことを確認してから、「ちなみに～」で細かい点を確認する</description></item><item><title>【3.6】確認忘れの対処法</title><link>https://dddsuz2.github.io/suzmemo/3.6%E7%A2%BA%E8%AA%8D%E5%BF%98%E3%82%8C%E3%81%AE%E5%AF%BE%E5%87%A6%E6%B3%95/</link><pubDate>Wed, 02 Aug 2023 17:42:52 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/3.6%E7%A2%BA%E8%AA%8D%E5%BF%98%E3%82%8C%E3%81%AE%E5%AF%BE%E5%87%A6%E6%B3%95/</guid><description> 「確認」するのではなく「相談」する 「相談したいことがあるのですが、～」 「～に悩んでいます」 手を動かした後に聞いているんだなという印象を相手に与えることができる 雑相 雑談をもちかけて、相手と良い雰囲気を作ってから相談する</description></item><item><title>【0】openFrameworksとは？</title><link>https://dddsuz2.github.io/suzmemo/0openframeworks%E3%81%A8%E3%81%AF/</link><pubDate>Tue, 01 Aug 2023 23:03:28 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/0openframeworks%E3%81%A8%E3%81%AF/</guid><description>openFrameworksという言葉を直訳すると？
「開かれたフレームワーク」 フレームワークとは？ アプリケーションで頻繁に利用される機能をまとめて、アプリ開発の土台として使用できるようにしたもの openFrameworksとは？ インタラクティブなコンテンツやメディアアートを制作することに特化したフレームワーク 2次元や3次元の図形の描画 アニメーション サウンドの録音と再生 動画のキャプチャと再生 マウスやキーボードによるインタラクション　など　</description></item><item><title>【書誌】Beyond_Interaction（改訂第3版）</title><link>https://dddsuz2.github.io/suzmemo/%E6%9B%B8%E8%AA%8Cbeyond_interaction%E6%94%B9%E8%A8%82%E7%AC%AC3%E7%89%88/</link><pubDate>Tue, 01 Aug 2023 22:26:43 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/%E6%9B%B8%E8%AA%8Cbeyond_interaction%E6%94%B9%E8%A8%82%E7%AC%AC3%E7%89%88/</guid><description>
Chapter 1　openFrameworks入門 1-1　openFrameworkについて 1-2　作例とコミュニティ Chapter 2　openFrameworksプログラミング初級編 2-1　プログラムの入手とインストール 2-2　サンプルプログラムの起動 2-3　openFrameworksプログラムを始めよう 2-4　ProjectGeneratorで新規プロジェクトを作成 2-5　図形を描く 2-6　色の設定 2-7　数値の記憶と計算 2-8　たくさんの図形を一気に描く 2-9　たくさんの値を記憶する―配列 2-10　移動する―アニメーション 2-11　条件分岐―「もし○○なら××せよ」 2-12　たくさんの図形を移動する 2-13　図形に触れる―インタラクション 2-14　より高度な表現へ Chapter 3　openFrameworksプログラミング中級編 3-1　プロジェクトの構造をより深く理解する 3-2　いろいろなメディアを扱う 3-3　OOOF：オブジェクト指向oFプログラミング 3-4　アドオンの利用 3-5　楽器を作る Chapter 4　openFrameworksプログラミング上級編 4-1　3Dグラフィクスプログラミングの基本 4-2　より自由な3D図形を描く―ポリゴンメッシュの操作 4-3　GLSL (シェーダー) を使う―ofShader Chapter 5　openFrameworksの現状と未来 5-1　openFrameworksは終わったのか? 5-2　クリエイティブ・コーディング環境の発展と進化 5-3　クリエイティブ・コーディングの歴史の継承 5-4　「ツール」ではなく「マテリアル」としてのコンピューティング 5-5　オープンなフレームワークであること 5-6　openFrameworksを超えて</description></item><item><title>【3.5】常備するべき二つのグッズ</title><link>https://dddsuz2.github.io/suzmemo/3.5%E5%B8%B8%E5%82%99%E3%81%99%E3%82%8B%E3%81%B9%E3%81%8D%E4%BA%8C%E3%81%A4%E3%81%AE%E3%82%B0%E3%83%83%E3%82%BA/</link><pubDate>Tue, 01 Aug 2023 20:51:57 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/3.5%E5%B8%B8%E5%82%99%E3%81%99%E3%82%8B%E3%81%B9%E3%81%8D%E4%BA%8C%E3%81%A4%E3%81%AE%E3%82%B0%E3%83%83%E3%82%BA/</guid><description>メモとペン
確認グセをつけるうえで大事 電話対応と同じスタンスでメモをとる 紙のメモがおすすめ 相手が話したくなるような姿勢を見せられる メモパフォーマンス
「ちょっとメモしていいですか？」は殺し文句 相手の自尊心を高められる 聞き逃したらチャンスと受け止めるぐらいの余裕を持つ 聞き逃したので、もう1回言ってもらえませんか？ メモした内容を「後追いメール」する ポイントは、体言止めの箇条書きはしないこと　きちんと動詞を書く</description></item><item><title>【3.4】スタンスを合わせる</title><link>https://dddsuz2.github.io/suzmemo/3.4%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%82%92%E5%90%88%E3%82%8F%E3%81%9B%E3%82%8B/</link><pubDate>Tue, 01 Aug 2023 20:47:47 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/3.4%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%82%92%E5%90%88%E3%82%8F%E3%81%9B%E3%82%8B/</guid><description>会話をするうえで筆者が最も重要視しているのはスタンス
スタンスが合っていなければ、最初からズレまくった会話になってしまう 事前に確認する 他愛もない雑談なのに、相手が真剣だったり、真面目に相談するつもりだったのに、相手にジョークと受け止められたり</description></item><item><title>【3.3】的外れをゼロにする質問</title><link>https://dddsuz2.github.io/suzmemo/3.3%E7%9A%84%E5%A4%96%E3%82%8C%E3%82%92%E3%82%BC%E3%83%AD%E3%81%AB%E3%81%99%E3%82%8B%E8%B3%AA%E5%95%8F/</link><pubDate>Tue, 01 Aug 2023 20:46:01 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/3.3%E7%9A%84%E5%A4%96%E3%82%8C%E3%82%92%E3%82%BC%E3%83%AD%E3%81%AB%E3%81%99%E3%82%8B%E8%B3%AA%E5%95%8F/</guid><description>話が明確になるまで確認する
1回で的に当たるとは限らない 確認が1回で終わることは少ない 相手に迷惑をかけるんじゃないかというのは気にしない 「丁寧に仕事をしようという気持ちのあらわれだ」とポジティブにとらえる</description></item><item><title>【3.2】ピントが合う二つの質問</title><link>https://dddsuz2.github.io/suzmemo/3.2%E3%83%94%E3%83%B3%E3%83%88%E3%81%8C%E5%90%88%E3%81%86%E4%BA%8C%E3%81%A4%E3%81%AE%E8%B3%AA%E5%95%8F/</link><pubDate>Tue, 01 Aug 2023 20:43:50 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/3.2%E3%83%94%E3%83%B3%E3%83%88%E3%81%8C%E5%90%88%E3%81%86%E4%BA%8C%E3%81%A4%E3%81%AE%E8%B3%AA%E5%95%8F/</guid><description> 抽象的な言葉に対して 「具体的には？」 「わかりやすくというのは、具体的にどういうことでしょうか？」 「たとえば？」 「わかりやすくというのは、たとえば図表を用いて書くということですか？」</description></item><item><title>【3.1】確認のコツ</title><link>https://dddsuz2.github.io/suzmemo/3.1%E7%A2%BA%E8%AA%8D%E3%81%AE%E3%82%B3%E3%83%84/</link><pubDate>Tue, 01 Aug 2023 20:41:12 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/3.1%E7%A2%BA%E8%AA%8D%E3%81%AE%E3%82%B3%E3%83%84/</guid><description>そもそも、日常会話において「伝え方」を鍛えている人はほぼいない
1割もいない つまり、話し手の言い分が聞き手に伝わることはほぼ100%ない 「わかった？」と聞かれて、「わかりました」と答えるのは前提から間違っている つまり、コミュニケーションが成立していない 相手から確認される前に、こちらから確認するのが礼儀</description></item><item><title>【3】対人関係で気を付けること</title><link>https://dddsuz2.github.io/suzmemo/3%E5%AF%BE%E4%BA%BA%E9%96%A2%E4%BF%82%E3%81%A7%E6%B0%97%E3%82%92%E4%BB%98%E3%81%91%E3%82%8B%E3%81%93%E3%81%A8/</link><pubDate>Tue, 01 Aug 2023 20:38:50 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/3%E5%AF%BE%E4%BA%BA%E9%96%A2%E4%BF%82%E3%81%A7%E6%B0%97%E3%82%92%E4%BB%98%E3%81%91%E3%82%8B%E3%81%93%E3%81%A8/</guid><description>対人関係を良くしたい
「悪くならなければいい」に考え方を変える 対人関係を悪くする要因 コミュニケーション きちんと会話が成立すること 「あの人はよくわかってる」と思われれば、関係が悪くなることはない 関係を悪くさせないコミュニケーション技術 「確認」 確認ゼロでは会話は成立しない</description></item><item><title>【2.6】本気のリスニング</title><link>https://dddsuz2.github.io/suzmemo/2.6%E6%9C%AC%E6%B0%97%E3%81%AE%E3%83%AA%E3%82%B9%E3%83%8B%E3%83%B3%E3%82%B0/</link><pubDate>Tue, 01 Aug 2023 20:35:41 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/2.6%E6%9C%AC%E6%B0%97%E3%81%AE%E3%83%AA%E3%82%B9%E3%83%8B%E3%83%B3%E3%82%B0/</guid><description>そもそも、説明を正しく聞き取ることは難しい
聞き間違いがあると、必ずズレる バックトラッキングは1対1で会話している時しか使えない 早とちりしやすい人 1語1句漏らさないように聞く 最後まで話を聞かずに考えを巡らせてしまってはいけない 英語のリスニング試験を受ける気持ちで</description></item><item><title>【2.5】リアクションのコツ</title><link>https://dddsuz2.github.io/suzmemo/2.5%E3%83%AA%E3%82%A2%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E3%82%B3%E3%83%84/</link><pubDate>Tue, 01 Aug 2023 20:33:13 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/2.5%E3%83%AA%E3%82%A2%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E3%82%B3%E3%83%84/</guid><description>「ターン」のときにあいてをほめる
3S (ターン用) さすがですね すごいですね すばらしいですね あいうえお（トン用） あ～ いいですね～ うーん えー？ おお～ 表情も明るく 声よりも顔でリアクションすることも意識する</description></item><item><title>【2.4】会話のリズム</title><link>https://dddsuz2.github.io/suzmemo/2.4%E4%BC%9A%E8%A9%B1%E3%81%AE%E3%83%AA%E3%82%BA%E3%83%A0/</link><pubDate>Tue, 01 Aug 2023 20:21:15 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/2.4%E4%BC%9A%E8%A9%B1%E3%81%AE%E3%83%AA%E3%82%BA%E3%83%A0/</guid><description>リアクションが弱い人
リアクションの量で考察する 多すぎる ちょうどいい 少なすぎる 少なすぎると、相手の気持ちは乗ってこない 多すぎてもだめ 対策 小さいうなずき、大きなうなずきを適度に混ぜる リズムも意識する 「トン・トン・ターン」のリズムで話す 3つ目を大きなリアクションにする</description></item><item><title>【2.3】バックトラッキング</title><link>https://dddsuz2.github.io/suzmemo/2.3%E3%83%90%E3%83%83%E3%82%AF%E3%83%88%E3%83%A9%E3%83%83%E3%82%AD%E3%83%B3%E3%82%B0/</link><pubDate>Tue, 01 Aug 2023 20:19:05 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/2.3%E3%83%90%E3%83%83%E3%82%AF%E3%83%88%E3%83%A9%E3%83%83%E3%82%AD%E3%83%B3%E3%82%B0/</guid><description>基本技術は「バックトラッキング」
オウム返し 会話の指差し確認 復唱によって、話を明確化する 聞き間違いを防ぐ 聞いているというサインを送る</description></item><item><title>【2.2】聞く姿勢の作り方</title><link>https://dddsuz2.github.io/suzmemo/2.2%E8%81%9E%E3%81%8F%E5%A7%BF%E5%8B%A2%E3%81%AE%E4%BD%9C%E3%82%8A%E6%96%B9/</link><pubDate>Tue, 01 Aug 2023 20:17:19 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/2.2%E8%81%9E%E3%81%8F%E5%A7%BF%E5%8B%A2%E3%81%AE%E4%BD%9C%E3%82%8A%E6%96%B9/</guid><description> 座り方が大切 膝に意識を向けて座る 膝を相手に向ける 背もたれにどっかり身体を預けるのはやめよう 聞く姿勢をとることで、会話の主導権を握ることができる</description></item><item><title>【2.1】会話のズレスパイラルとは</title><link>https://dddsuz2.github.io/suzmemo/2.1%E4%BC%9A%E8%A9%B1%E3%81%AE%E3%82%BA%E3%83%AC%E3%82%B9%E3%83%91%E3%82%A4%E3%83%A9%E3%83%AB%E3%81%A8%E3%81%AF/</link><pubDate>Tue, 01 Aug 2023 20:14:30 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/2.1%E4%BC%9A%E8%A9%B1%E3%81%AE%E3%82%BA%E3%83%AC%E3%82%B9%E3%83%91%E3%82%A4%E3%83%A9%E3%83%AB%E3%81%A8%E3%81%AF/</guid><description>会話のズレスパイラルの流れ
聞く姿勢がなっていない 話がズレる さらに相手がきちんと話してくれなくなる ズレスパイラルから抜け出す方法
正しい姿勢で聞く 話がズレなくなる 相手が積極的に話しかけてくれる ちゃんとした聞きグセを身に着ける
慣れないうちは、大げさなぐらい聞いてますオーラをだしてもよい 【2.2】聞く姿勢の作り方
【2.3】バックトラッキング
【2.4】会話のリズム
【2.5】リアクションのコツ
【2.6】本気のリスニング
会話のズレスパイラルをなくすための聞きグセについてここら辺に書いてある</description></item><item><title>【2】返事がズレないための聞き方</title><link>https://dddsuz2.github.io/suzmemo/2%E8%BF%94%E4%BA%8B%E3%81%8C%E3%82%BA%E3%83%AC%E3%81%AA%E3%81%84%E3%81%9F%E3%82%81%E3%81%AE%E8%81%9E%E3%81%8D%E6%96%B9/</link><pubDate>Tue, 01 Aug 2023 20:11:05 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/2%E8%BF%94%E4%BA%8B%E3%81%8C%E3%82%BA%E3%83%AC%E3%81%AA%E3%81%84%E3%81%9F%E3%82%81%E3%81%AE%E8%81%9E%E3%81%8D%E6%96%B9/</guid><description>ぼんやりした話し方をする人が大半
ぼんやりした話し方とは？
「前提」を省略したり、あいまいな表現を使うせい 相手がぼんやり話すとこちらもぼんやりとしか理解できない
ぼんやりと聞き返さない
「聞き方」に問題がある場合、上司が話してくれなくなる可能性がある 正しい聞きグセをつけよう</description></item><item><title>【1.3】ズレリセット3か条</title><link>https://dddsuz2.github.io/suzmemo/1.3%E3%82%BA%E3%83%AC%E3%83%AA%E3%82%BB%E3%83%83%E3%83%883%E3%81%8B%E6%9D%A1/</link><pubDate>Tue, 01 Aug 2023 20:08:54 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/1.3%E3%82%BA%E3%83%AC%E3%83%AA%E3%82%BB%E3%83%83%E3%83%883%E3%81%8B%E6%9D%A1/</guid><description> その場で確認 反射はやめて、その場での確認を習慣化する 具体化する 数字と固有名詞を意識して質問する 常識はメモる 事前に覚えておくことにも限界がある その都度メモをとって覚えよう</description></item><item><title>【1.2】ズレが生じる3つのパターン</title><link>https://dddsuz2.github.io/suzmemo/1.2%E3%82%BA%E3%83%AC%E3%81%8C%E7%94%9F%E3%81%98%E3%82%8B3%E3%81%A4%E3%81%AE%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3/</link><pubDate>Tue, 01 Aug 2023 20:04:37 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/1.2%E3%82%BA%E3%83%AC%E3%81%8C%E7%94%9F%E3%81%98%E3%82%8B3%E3%81%A4%E3%81%AE%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3/</guid><description> 反射 相手の話を聞いた後、反射的に答えてしまうこと 確認するタイミングを失ってしまうのが問題 対策 「相手の指示は、あいまいではないか？」 「言い足りないことはないか？」 思い込み 話し手が確認してもズレを直せない 対策 自分が理解していることを「丁寧に話す」クセをつける 知識不足 知識不足だと、そもそも何も聞き取れない 対策 基本的なビジネス用語、業界用語を覚える 質問力をつける 【1.3】ズレリセット3か条
会話のズレをリセットする方法が書いてある</description></item><item><title>【1.1】話がかみ合わない二つの理由</title><link>https://dddsuz2.github.io/suzmemo/1.1%E8%A9%B1%E3%81%8C%E3%81%8B%E3%81%BF%E5%90%88%E3%82%8F%E3%81%AA%E3%81%84%E4%BA%8C%E3%81%A4%E3%81%AE%E7%90%86%E7%94%B1/</link><pubDate>Tue, 01 Aug 2023 20:02:11 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/1.1%E8%A9%B1%E3%81%8C%E3%81%8B%E3%81%BF%E5%90%88%E3%82%8F%E3%81%AA%E3%81%84%E4%BA%8C%E3%81%A4%E3%81%AE%E7%90%86%E7%94%B1/</guid><description> どちらかが、ぼんやりとした話し方をしていること
あいまいな表現、抽象的な言葉を使ってコミュニケーションを行うと必ずズレが生じる 言葉を省略すること
【2.3】バックトラッキング
ぼんやりした話し方をされた時にはバックトラッキングが有効 【2.6】本気のリスニング
そもそも、話に傾聴できているか？を確認する必要がある</description></item><item><title>【1】話がズレると、会話を続ける気がしない</title><link>https://dddsuz2.github.io/suzmemo/1%E8%A9%B1%E3%81%8C%E3%82%BA%E3%83%AC%E3%82%8B%E3%81%A8%E4%BC%9A%E8%A9%B1%E3%82%92%E7%B6%9A%E3%81%91%E3%82%8B%E6%B0%97%E3%81%8C%E3%81%97%E3%81%AA%E3%81%84/</link><pubDate>Tue, 01 Aug 2023 19:59:41 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/1%E8%A9%B1%E3%81%8C%E3%82%BA%E3%83%AC%E3%82%8B%E3%81%A8%E4%BC%9A%E8%A9%B1%E3%82%92%E7%B6%9A%E3%81%91%E3%82%8B%E6%B0%97%E3%81%8C%E3%81%97%E3%81%AA%E3%81%84/</guid><description> 相手の反応がいまいち悪い時
確実に相手との会話がかみ合っていない 気に病む必要はない 相手の責任も確実にある ズレを防止する方法を考える
【1.3】ズレリセット3か条
【3.1】確認のコツ
話を聞くスタンスにおいて大事なことが書いてある そもそも論、伝え方の訓練をしている人はすくない &amp;mdash;&amp;gt; 話が伝わらなくて当然 これに対してわかりましたと言うのはバッドコミュニケーション</description></item><item><title>【0】10秒でできる＜会話のズレ度・チェック＞</title><link>https://dddsuz2.github.io/suzmemo/010%E7%A7%92%E3%81%A7%E3%81%A7%E3%81%8D%E3%82%8B%E4%BC%9A%E8%A9%B1%E3%81%AE%E3%82%BA%E3%83%AC%E5%BA%A6%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF/</link><pubDate>Tue, 01 Aug 2023 19:55:46 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/010%E7%A7%92%E3%81%A7%E3%81%A7%E3%81%8D%E3%82%8B%E4%BC%9A%E8%A9%B1%E3%81%AE%E3%82%BA%E3%83%AC%E5%BA%A6%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF/</guid><description>次のようなことを言われていたら要注意
「あの件、どうなった？」と確認される 「ちゃんと話聞いてる？」と心配される 「それは自分で聞いてくれないか」と、相手から避けられる 「ま、それはおいといて...」と、話している途中で遮られる 「がんばってるのは認めるけど」と言われ、なかなか評価してもらえない</description></item><item><title>【書誌】キミが信頼されないのは話が「ズレてる」だけなんだ</title><link>https://dddsuz2.github.io/suzmemo/%E6%9B%B8%E8%AA%8C%E3%82%AD%E3%83%9F%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF%E8%A9%B1%E3%81%8C%E3%82%BA%E3%83%AC%E3%81%A6%E3%82%8B%E3%81%A0%E3%81%91%E3%81%AA%E3%82%93%E3%81%A0/</link><pubDate>Tue, 01 Aug 2023 19:54:05 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/%E6%9B%B8%E8%AA%8C%E3%82%AD%E3%83%9F%E3%81%8C%E4%BF%A1%E9%A0%BC%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%AE%E3%81%AF%E8%A9%B1%E3%81%8C%E3%82%BA%E3%83%AC%E3%81%A6%E3%82%8B%E3%81%A0%E3%81%91%E3%81%AA%E3%82%93%E3%81%A0/</guid><description>1章　〈知らぬ間に、信頼を失っていた!?〉こんな話し方、していませんか？ 2章　〈まずは「相手の話」「指示」をちゃんと聞く〉この「聞き方」で、返事がズレない 3章　〈「認識のズレ」をなくす〉この「確認」が必要だった！ 4章　〈話が長く、脱線しやすい人は〉もっと丁寧に話そう 5章　〈「わかってるね！」と評価が上がる〉「ダメな質問」「すべき質問」はコレだ！ 6章　〈キーパーソン、重要な人から信頼を勝ち取れる！〉ひとつ上の話し方 【0】10秒でできる＜会話のズレ度・チェック＞
【1】話がズレると、会話を続ける気がしない
【1.1】話がかみ合わない二つの理由
【1.2】ズレが生じる3つのパターン
【1.3】ズレリセット3か条
【2】返事がズレないための聞き方
【2.1】会話のズレスパイラルとは
【2.2】聞く姿勢の作り方
【2.3】バックトラッキング
【2.4】会話のリズム
【2.5】リアクションのコツ
【2.6】本気のリスニング
【3】対人関係で気を付けること
【3.1】確認のコツ
【3.2】ピントが合う二つの質問
【3.3】的外れをゼロにする質問
【3.4】スタンスを合わせる
【3.5】常備するべき二つのグッズ
【3.6】確認忘れの対処法
【3.7】ちなみに作戦
【4】誤解を生む話し方とは？
【4.1】話し方の基本
【4.2】最後までしっかり話きる
【4.3】ぼんやり表現を「4W2H」で分解する
【4.4】「あの・この・その」に気を付ける
【4.5】専門用語は相手に合わせて使う
【4.6】話がそれる人、3つの共通点
【4.7】主語と述語を近づける
【4.8】「結論ファースト」で話す
【4.9】SDS法
【4.10】PREP法
【4.11】DESC法
【5】ダメな質問のパターン5つ
【5.1】調べるべきイチオシの情報
【5.2】情報収集のテクニック
【5.3】質問の3つの機能
【6.0】相手が話したいモードになるスイッチを押す
【6.1】必勝パターン2つ
【6.2】何でも話してもらえる3つの極意
【6.3】本音を打ち明けてもらうには
【6.4】聞き上手になるには
【6.5】相手に共感するには</description></item><item><title>【1.4】なぜ私は自分が信じていることを信じているのか？</title><link>https://dddsuz2.github.io/suzmemo/1.4%E3%81%AA%E3%81%9C%E7%A7%81%E3%81%AF%E8%87%AA%E5%88%86%E3%81%8C%E4%BF%A1%E3%81%98%E3%81%A6%E3%81%84%E3%82%8B%E3%81%93%E3%81%A8%E3%82%92%E4%BF%A1%E3%81%98%E3%81%A6%E3%81%84%E3%82%8B%E3%81%AE%E3%81%8B/</link><pubDate>Tue, 01 Aug 2023 00:49:53 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/1.4%E3%81%AA%E3%81%9C%E7%A7%81%E3%81%AF%E8%87%AA%E5%88%86%E3%81%8C%E4%BF%A1%E3%81%98%E3%81%A6%E3%81%84%E3%82%8B%E3%81%93%E3%81%A8%E3%82%92%E4%BF%A1%E3%81%98%E3%81%A6%E3%81%84%E3%82%8B%E3%81%AE%E3%81%8B/</guid><description>なぜ私は自分が信じていることを信じているのか？
自分自身の信念や偏見、思い込みを疑うところから意思決定は始まる 何かを信じたいことがあったときに、それを裏付ける情報を探すのは現代では容易 自分の思い込みを検証するために、急所を突いた質問をする 急所を突いた質問とは？ 第一に「なに？」 自分の思い込みはなに？ 「この問題について自分が信じたがっていることは何か？」 第二に「なぜ？」 「なぜ思い込みを思い込んでいるのか？」</description></item><item><title>【1.3】即断即決の悪い点</title><link>https://dddsuz2.github.io/suzmemo/1.3%E5%8D%B3%E6%96%AD%E5%8D%B3%E6%B1%BA%E3%81%AE%E6%82%AA%E3%81%84%E7%82%B9/</link><pubDate>Tue, 01 Aug 2023 00:41:24 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/1.3%E5%8D%B3%E6%96%AD%E5%8D%B3%E6%B1%BA%E3%81%AE%E6%82%AA%E3%81%84%E7%82%B9/</guid><description>即断即決の悪い点
その時は正確な見方をしているつもりでも、狭く歪んだ見方に頼ってしまっている 即断即決が効果を発揮する状況 その状況について他のことを多く知っている場合のみ 「直感を信じるべきか？」よりも、「どうすればその直感を乗り越えられるか？」と問う方が良い質問 質問を重ねることで、本能を無効化し、自分の無知さに対する無知を軽減できる</description></item><item><title>【1.2】意思決定を行う時の落とし穴</title><link>https://dddsuz2.github.io/suzmemo/1.2%E6%84%8F%E6%80%9D%E6%B1%BA%E5%AE%9A%E3%82%92%E8%A1%8C%E3%81%86%E6%99%82%E3%81%AE%E8%90%BD%E3%81%A8%E3%81%97%E7%A9%B4/</link><pubDate>Tue, 01 Aug 2023 00:39:08 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/1.2%E6%84%8F%E6%80%9D%E6%B1%BA%E5%AE%9A%E3%82%92%E8%A1%8C%E3%81%86%E6%99%82%E3%81%AE%E8%90%BD%E3%81%A8%E3%81%97%E7%A9%B4/</guid><description>意思決定をする際の落とし穴
未知のものを恐れ、安全策をとる方向に意思決定をゆがめてしまう 間違った情報に注目してしまう 自分の予測を過信する 自分の心にある思い込みや偏見に合致する情報に注目してしまう</description></item><item><title>【1.1】難しい決断を行う時</title><link>https://dddsuz2.github.io/suzmemo/1.1%E9%9B%A3%E3%81%97%E3%81%84%E6%B1%BA%E6%96%AD%E3%82%92%E8%A1%8C%E3%81%86%E6%99%82/</link><pubDate>Tue, 01 Aug 2023 00:36:13 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/1.1%E9%9B%A3%E3%81%97%E3%81%84%E6%B1%BA%E6%96%AD%E3%82%92%E8%A1%8C%E3%81%86%E6%99%82/</guid><description>難しい決断
不快で不安なもの 不確実性が伴う 考えることをやめてしまいたいという強い力が存在する 質問により、考えるきっかけを作る 人の脳みそ 本能的に素早く判断してしまう（野生の名残か） 現代社会で野生のように意思決定しなければならないシチュエーションは少ない よりよい決断をするために、時間を使わないのは、悪い決断</description></item><item><title>【0.12】考えを深めるための5つの万能な質問</title><link>https://dddsuz2.github.io/suzmemo/0.12%E8%80%83%E3%81%88%E3%82%92%E6%B7%B1%E3%82%81%E3%82%8B%E3%81%9F%E3%82%81%E3%81%AE5%E3%81%A4%E3%81%AE%E4%B8%87%E8%83%BD%E3%81%AA%E8%B3%AA%E5%95%8F/</link><pubDate>Sun, 30 Jul 2023 21:41:20 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/0.12%E8%80%83%E3%81%88%E3%82%92%E6%B7%B1%E3%82%81%E3%82%8B%E3%81%9F%E3%82%81%E3%81%AE5%E3%81%A4%E3%81%AE%E4%B8%87%E8%83%BD%E3%81%AA%E8%B3%AA%E5%95%8F/</guid><description> ・新しい始点で見るにはどうすればよいか？ ・思い込んでいることはないか？ ・焦って判断しようとしていないか？ ・何か見落としていないか？ ・一番大事なのは何か？</description></item><item><title>【0.11】民主主義の未来は質問にかかっている？</title><link>https://dddsuz2.github.io/suzmemo/0.11%E6%B0%91%E4%B8%BB%E4%B8%BB%E7%BE%A9%E3%81%AE%E6%9C%AA%E6%9D%A5%E3%81%AF%E8%B3%AA%E5%95%8F%E3%81%AB%E3%81%8B%E3%81%8B%E3%81%A3%E3%81%A6%E3%81%84%E3%82%8B/</link><pubDate>Sun, 30 Jul 2023 21:37:57 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/0.11%E6%B0%91%E4%B8%BB%E4%B8%BB%E7%BE%A9%E3%81%AE%E6%9C%AA%E6%9D%A5%E3%81%AF%E8%B3%AA%E5%95%8F%E3%81%AB%E3%81%8B%E3%81%8B%E3%81%A3%E3%81%A6%E3%81%84%E3%82%8B/</guid><description> 「懐疑的な質問ができなくなり、何かが真実であるという人たちに質問したり、権威を疑うことが出来なくなれば、政治的・宗教的ペテンが登場するのを許してしまう」
情報の氾濫による批判的思考力の低下 意思決定能力を向上させるには、批判的思考を磨く必要がある 政治の参加者や消費者としてではなく、自分自身の決定に対しても批判的になる必要がある 個人的決定は、内面の歪んだ認知の影響を受ける 偏見を認識し、厳密な問いかけが必要</description></item><item><title>【0.10】質問により人間関係を深める</title><link>https://dddsuz2.github.io/suzmemo/0.10%E8%B3%AA%E5%95%8F%E3%81%AB%E3%82%88%E3%82%8A%E4%BA%BA%E9%96%93%E9%96%A2%E4%BF%82%E3%82%92%E6%B7%B1%E3%82%81%E3%82%8B/</link><pubDate>Sun, 30 Jul 2023 21:32:35 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/0.10%E8%B3%AA%E5%95%8F%E3%81%AB%E3%82%88%E3%82%8A%E4%BA%BA%E9%96%93%E9%96%A2%E4%BF%82%E3%82%92%E6%B7%B1%E3%82%81%E3%82%8B/</guid><description> 人々は問いによって結ばれている。人々を分断するのは答えだ。
深いつながりにより人生を豊かにする 他者に質問をすることによる基本的な効果 他者を理解し、共感すること 質問をすることで、相手に対して興味があることを示すことができる 近い関係の人に対して、あまり質問をしない傾向がある 批判や意見を言ったりするのではなく、質問をして、それに傾聴する 質問によって、対立する人との関係も改善する可能性がある 会話の道を開くような質問</description></item><item><title>【0.9】なぜ今質問が必要なのか？</title><link>https://dddsuz2.github.io/suzmemo/0.9%E3%81%AA%E3%81%9C%E4%BB%8A%E8%B3%AA%E5%95%8F%E3%81%8C%E5%BF%85%E8%A6%81%E3%81%AA%E3%81%AE%E3%81%8B/</link><pubDate>Sun, 30 Jul 2023 21:29:45 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/0.9%E3%81%AA%E3%81%9C%E4%BB%8A%E8%B3%AA%E5%95%8F%E3%81%8C%E5%BF%85%E8%A6%81%E3%81%AA%E3%81%AE%E3%81%8B/</guid><description>なぜ質問が必要なのか？
物事が指数関数的に変化する時代 既存の知識を更新、修正しながら学び続ける必要性 創造性の発揮 誰しもが創造性を持つ 創造への自信を強化し、その機会を見極めるには質問が必要 正しい質問により、物事に取り組む推進力を生み出す</description></item><item><title>【0.8】自分自身が美しい問いをしているかどうか確認する質問</title><link>https://dddsuz2.github.io/suzmemo/0.8%E8%87%AA%E5%88%86%E8%87%AA%E8%BA%AB%E3%81%8C%E7%BE%8E%E3%81%97%E3%81%84%E5%95%8F%E3%81%84%E3%82%92%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E3%81%8B%E3%81%A9%E3%81%86%E3%81%8B%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8B%E8%B3%AA%E5%95%8F/</link><pubDate>Sun, 30 Jul 2023 21:27:30 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/0.8%E8%87%AA%E5%88%86%E8%87%AA%E8%BA%AB%E3%81%8C%E7%BE%8E%E3%81%97%E3%81%84%E5%95%8F%E3%81%84%E3%82%92%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E3%81%8B%E3%81%A9%E3%81%86%E3%81%8B%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8B%E8%B3%AA%E5%95%8F/</guid><description> ・世間知らずだと思われてもかまわないと思っているか？ ・すぐに答えの出ない質問をすることに抵抗はないか？ ・自分の知っている世界から離れてもかまわないと思っているか？ ・自分の誤りを認められるか？ ・落ち着いて熟考しようとしているか？ 【0.7】質問を習慣化する
美しい問いを発するためには、5つの敵への対処が必要 その敵への対処方法が書いてある</description></item><item><title>【0.7】質問を習慣化する</title><link>https://dddsuz2.github.io/suzmemo/0.7%E8%B3%AA%E5%95%8F%E3%82%92%E7%BF%92%E6%85%A3%E5%8C%96%E3%81%99%E3%82%8B/</link><pubDate>Sun, 30 Jul 2023 21:19:33 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/0.7%E8%B3%AA%E5%95%8F%E3%82%92%E7%BF%92%E6%85%A3%E5%8C%96%E3%81%99%E3%82%8B/</guid><description> 質問の習慣化 5つの敵への対処が必要 恐怖 人前での質問 こわがらず、実際にやってみるのが、恐怖を克服するために最も良い方法 自分自身に対する質問 質問の答えが見つからないことに対する恐怖 重要な質問の多くは、答えがすぐには見つからないという認識を持つ 恐怖への対処のコツ 疑問を持ちながら生きること 疑問に取り組むこと 疑問から学ぶこと すぐに答えが見つからないことを受容すること 知識、偏見、傲慢への対処 自分の知っていることから一歩下がって、新しい考えかたなどを仕入れる 質問して学んだことに基づいて考えを調整する謙虚さと柔軟性を持つ訓練が必要 時間への対処 「その質問には時間をかける価値が本当にあるのか？」という問いを自分自身に対して行う 【0.5】質問の5つの敵
質問の5つの敵が説明されている</description></item><item><title>【0.6】質問によって人間関係で起こってしまう問題</title><link>https://dddsuz2.github.io/suzmemo/0.6%E8%B3%AA%E5%95%8F%E3%81%AB%E3%82%88%E3%81%A3%E3%81%A6%E4%BA%BA%E9%96%93%E9%96%A2%E4%BF%82%E3%81%A7%E8%B5%B7%E3%81%93%E3%81%A3%E3%81%A6%E3%81%97%E3%81%BE%E3%81%86%E5%95%8F%E9%A1%8C/</link><pubDate>Sun, 30 Jul 2023 21:17:58 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/0.6%E8%B3%AA%E5%95%8F%E3%81%AB%E3%82%88%E3%81%A3%E3%81%A6%E4%BA%BA%E9%96%93%E9%96%A2%E4%BF%82%E3%81%A7%E8%B5%B7%E3%81%93%E3%81%A3%E3%81%A6%E3%81%97%E3%81%BE%E3%81%86%E5%95%8F%E9%A1%8C/</guid><description> 質問は親密な人間関係を形成するのに役に立つ 質問をすべきシチュエーションで、意見を述べたり、アドバイスをしてしまいがち 質問するよりも伝えようとしてしまっている</description></item><item><title>【0.5】質問の5つの敵</title><link>https://dddsuz2.github.io/suzmemo/0.5%E8%B3%AA%E5%95%8F%E3%81%AE5%E3%81%A4%E3%81%AE%E6%95%B5/</link><pubDate>Sun, 30 Jul 2023 21:09:42 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/0.5%E8%B3%AA%E5%95%8F%E3%81%AE5%E3%81%A4%E3%81%AE%E6%95%B5/</guid><description> 恐怖 質問は、自分が知っているべきことを知らないことを晒すリスクを伴う 特に社会人にはこのリスクは大きい 知識 専門知識の罠 知っていることに頼りすぎる問題 偏見 生まれつきの性質に起因するものと、経験の少なさに起因するものがある 考える方向が決まると、それに反する問いを考えることが少なくなる 傲慢 なぜ偏見を信じてしまうのか？ &amp;ndash;&amp;gt; 傲慢さのため 謙虚さと問いかけの頻度には関係がある 時間 探索、熟考、批判的思考の時間は少なくなっている 限られた時間でより多くのことをしようと焦ってしまう &amp;ndash;&amp;gt; かえって非効率になるというパラドクス</description></item><item><title>【0.4】どうすればより良い質問者になれるか？</title><link>https://dddsuz2.github.io/suzmemo/0.4%E3%81%A9%E3%81%86%E3%81%99%E3%82%8C%E3%81%B0%E3%82%88%E3%82%8A%E8%89%AF%E3%81%84%E8%B3%AA%E5%95%8F%E8%80%85%E3%81%AB%E3%81%AA%E3%82%8C%E3%82%8B%E3%81%8B/</link><pubDate>Sun, 30 Jul 2023 21:07:24 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/0.4%E3%81%A9%E3%81%86%E3%81%99%E3%82%8C%E3%81%B0%E3%82%88%E3%82%8A%E8%89%AF%E3%81%84%E8%B3%AA%E5%95%8F%E8%80%85%E3%81%AB%E3%81%AA%E3%82%8C%E3%82%8B%E3%81%8B/</guid><description>4歳の女児は質問の達人
知らないという事実に対する十分な認識 改善するために何かをしようとする創意工夫 興味深い問いに対して不思議に思うだけで、脳内の報酬に関わる領域が活性化される
年齢を重ねるごとに、質問の回数は極端に落ちてしまう</description></item><item><title>【0.3】質問の役立て方とは？</title><link>https://dddsuz2.github.io/suzmemo/0.3%E8%B3%AA%E5%95%8F%E3%81%AE%E5%BD%B9%E7%AB%8B%E3%81%A6%E6%96%B9%E3%81%A8%E3%81%AF/</link><pubDate>Sun, 30 Jul 2023 20:48:36 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/0.3%E8%B3%AA%E5%95%8F%E3%81%AE%E5%BD%B9%E7%AB%8B%E3%81%A6%E6%96%B9%E3%81%A8%E3%81%AF/</guid><description> 質問を行う上で必要な能力
批判的思考 意思決定
質問を自分自身に投げかけ、意思決定を行う際にありがちな落とし穴を回避できる 創造力
挑戦的な問いを立てる 始まりに強力な「なぜ」「もしも」の問いを立てる 創造の各プロセスの段階で何を問うべきか知っていると、着実に進んでいくことができる 人間関係
質問によって、好感をもたれやすくなる しかし、適切な質問を適切な方法で行うことが必要 リーダーシップ
リーダーは「組織の質問」を提起しなければならない 質問の役立て方
状況を複数の視点から見る 自分自身の偏見に対して自覚できる 問いを立てる力は筋肉のようなもの
継続的な訓練が必要</description></item><item><title>【0.2】美しい質問とは？</title><link>https://dddsuz2.github.io/suzmemo/0.2%E7%BE%8E%E3%81%97%E3%81%84%E8%B3%AA%E5%95%8F%E3%81%A8%E3%81%AF/</link><pubDate>Sun, 30 Jul 2023 20:43:11 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/0.2%E7%BE%8E%E3%81%97%E3%81%84%E8%B3%AA%E5%95%8F%E3%81%A8%E3%81%AF/</guid><description>美しい質問とは何ですか？
人々の思考を変容させるような問い どんな状況で美しい質問を使うのか？ 意思決定を行うとき 何か新しいものを作るとき 人とつながる 有能で役立つリーダーになりたいとき</description></item><item><title>【0.1】質問の価値とは？</title><link>https://dddsuz2.github.io/suzmemo/0.1%E8%B3%AA%E5%95%8F%E3%81%AE%E4%BE%A1%E5%80%A4%E3%81%A8%E3%81%AF/</link><pubDate>Sun, 30 Jul 2023 20:36:25 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/0.1%E8%B3%AA%E5%95%8F%E3%81%AE%E4%BE%A1%E5%80%A4%E3%81%A8%E3%81%AF/</guid><description>筆者が質問の価値に気付いた時
筆者は新聞記者として働いていた 他人から情報を引き出すものが質問という認識 イノベーションを起こす人の質問の使い方 問いが自らに向いている 問題解決や、独創的なものを作る際に、自問自答から始める傾向がある イノベーションは質問から始まる 成功するスタートアップの発想の原点に「美しい問い」</description></item><item><title>【0】なぜ「質問力が大事なのか？」</title><link>https://dddsuz2.github.io/suzmemo/0%E3%81%AA%E3%81%9C%E8%B3%AA%E5%95%8F%E5%8A%9B%E3%81%8C%E5%A4%A7%E4%BA%8B%E3%81%AA%E3%81%AE%E3%81%8B/</link><pubDate>Sun, 30 Jul 2023 20:25:27 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/0%E3%81%AA%E3%81%9C%E8%B3%AA%E5%95%8F%E5%8A%9B%E3%81%8C%E5%A4%A7%E4%BA%8B%E3%81%AA%E3%81%AE%E3%81%8B/</guid><description> 著者はある時期から質問学者と名乗り始めた
誰も異を唱えなかった 問うことに対するみんなの関心の高さ 質問に対してみんなの関心が高いのはなぜ？
難しい状況でも、問いを立てるだけで、よりよい決断や生産的な行動に自らを導くことができる 正しい問いを立てる必要があるという前提が存在する 世の中にある本とこの本の違い
世の中にある無数の本 -&amp;gt; 答えだけ書いてある 背景にある哲学 そもそも、仕事や人生の問題には自分で答えを出していくしかない 自分で答えを出すためのツールが質問</description></item><item><title>【1】自分の決断に疑問を持つ</title><link>https://dddsuz2.github.io/suzmemo/1%E8%87%AA%E5%88%86%E3%81%AE%E6%B1%BA%E6%96%AD%E3%81%AB%E7%96%91%E5%95%8F%E3%82%92%E6%8C%81%E3%81%A4/</link><pubDate>Sun, 30 Jul 2023 20:18:46 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/1%E8%87%AA%E5%88%86%E3%81%AE%E6%B1%BA%E6%96%AD%E3%81%AB%E7%96%91%E5%95%8F%E3%82%92%E6%8C%81%E3%81%A4/</guid><description>現代社会では、決断のための時間が十分に無く、直感で物事を決めがち
直感による判断の正答率はそれほど高くはない 感覚や感情ではなく、証拠を集めるべき
外部の情報源や異なる視点からの意見など 選択肢をもっと増やして検討するべき</description></item><item><title>2.人の目を見て話す</title><link>https://dddsuz2.github.io/suzmemo/2.%E4%BA%BA%E3%81%AE%E7%9B%AE%E3%82%92%E8%A6%8B%E3%81%A6%E8%A9%B1%E3%81%99/</link><pubDate>Tue, 25 Jul 2023 01:08:51 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/2.%E4%BA%BA%E3%81%AE%E7%9B%AE%E3%82%92%E8%A6%8B%E3%81%A6%E8%A9%B1%E3%81%99/</guid><description>人の目を見て話せるとき
1対1で向かい合って話している時 人の目を見て話せないとき
急に話しかけられた時 緊張している時、テンパっている時 話に集中していない時 人の目を見て話すメリット
人の話を聞くことに集中できる 他のことを考えたり、人の話を聞いている最中に考え事をしてしまう事象減らす 相手に興味があると示すことができる 人の目を見て話すデメリット
強いて言うなら、威圧感を与える可能性がある</description></item><item><title>【書誌】質問力を鍛える本</title><link>https://dddsuz2.github.io/suzmemo/%E6%9B%B8%E8%AA%8C%E8%B3%AA%E5%95%8F%E5%8A%9B%E3%82%92%E9%8D%9B%E3%81%88%E3%82%8B%E6%9C%AC/</link><pubDate>Fri, 21 Jul 2023 01:36:57 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/%E6%9B%B8%E8%AA%8C%E8%B3%AA%E5%95%8F%E5%8A%9B%E3%82%92%E9%8D%9B%E3%81%88%E3%82%8B%E6%9C%AC/</guid><description>目次
はじめに　なぜ「質問力」が大切なのか？
私は質問学者（questionologist）だ／決断，創造，人間関係，リーダーシップに質問はどのように役立つか？／4歳の女児から学ぶ／質問の五つの敵／質問を習慣化する／なぜ今，質問が重要なのか？／質問が人間関係を強める／民主主義の未来は質問にかかっている？
第1章　よりよい意思決定のための質問
なぜ自分の決断に疑問をもたなければならないのか？／なぜ私は自分が信じていることを信じているのか（ 間違っていたらどうしよう？）／戦士か偵察兵か／言われたことを受け入れなければならないのか？／批判的思考に自分の思惑が入り込んでいないか？／「イエスかノーか」ではない決断／部外者ならどうするか？／絶対に失敗しないなら何をする？／恐怖心に対して，質問はどう役立つか？／「未来の私」なら何を決めるか？／自分が進化し，活躍できるのはどの選択肢か？／この決断を後で他人にどう説明するか？／私のテニスボールは何か？
第2章　創造性を引き出すための質問
なぜ創造するのか？／私の創造性はどこへ行った？／問題を探しに行くとしたら？／世界に足りないものは何か？／なぜこれが私の問題なのか？／私の亀の甲羅はどこ？／私のゴールデンタイムはいつか？／私は蝶を殺したいのだろうか？／どこからでも始められるようにしたら？／どうすれば行き詰まりから脱することができるか？／私は「公開」する準備ができているだろうか？／終わらせたいのか，改善したいのか？／どうすれば常に「途上」にいられるか？
第3章　他者とのつながりを深めるための質問
なぜつながるのか？／「お元気ですか」を超えてみたら？／どうすれば全身で聴けるか？／アドバイスを減らして，もっと質問したら？ ／批判していることについて，自分に思い当たる節がないか？／決めつけを好奇心に置き換えたらどうだろう？／どうすれば自分の偏見を認知できるか？／どうすればより強いパートナーシップを築けるか？／求めるのは正しさか，平安か？／質問によって職場での人間関係を築けるか？／管理職が「下に質問する」のが難しいのはなぜか？／セールスの売り込みを「質問の売り込み」に置き換えたら？
第4章　より強いリーダーとなるための質問
「この間違いを正すために何ができる？」／なぜ私はリーダーになるのか？／謙虚になる自信があるか？／リーダーシップを発揮するために，なぜ身を引かなければならないのか？／私の行動規範は何か？／私にできる最低限のことは何だろうか？／どうすれば「自らを廃業に追い込む」ような会社になれるのか？／外で何が起こっているのか，何か手伝えることはあるか？／探すのは，壊れたものか，うまくいっているものか？／私は本当に好奇心に満ちた文化を望んでいるのだろうか？／どうしたら安心して質問ができ，やりがいを感じられ，生産的になれるか？
おわりに　問いかける人生
質問をどうやって行動に移すか？／「質問筋肉」をどうウォーミングアップするか？／よりよい質問をつくれるか？／自分に備わっている「デタラメ検出器」を試すには？／周りの世界を新鮮な目で見たらどうだろうか？／どのように（誰と）打ち解けたらよいか？／自分にインタビューしてみたら？／質問で家族の絆を強められるか？／「宣言」を「宣言質問」に変えてみたら？／どうすればほかの人にもっと質問してもらえるだろうか？／私の「大きな美しい質問」は？
謝辞
質問リスト 【0】はじめに
【0.1】質問の価値とは？
【0.2】美しい質問とは？
【0.3】質問の役立て方とは？
【0.4】どうすればより良い質問者になれるか？
【0.5】質問の5つの敵
【0.6】質問によって人間関係で起こってしまう問題
【0.7】質問を習慣化する
【0.8】自分自身が美しい問いをしているかどうか確認する質問
【0.9】なぜ今質問が必要なのか？
【0.10】質問により人間関係を深める
【0.11】民主主義の未来は質問にかかっている？
【0.12】考えを深めるための5つの万能な質問
【1】自分の決断に疑問を持つ</description></item><item><title>1.基本的な姿勢</title><link>https://dddsuz2.github.io/suzmemo/1.%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AA%E5%A7%BF%E5%8B%A2/</link><pubDate>Sat, 15 Jul 2023 22:05:13 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/1.%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AA%E5%A7%BF%E5%8B%A2/</guid><description> あらゆるものは「問いの集合体である」という考え方
それについて、考える/考えない、答える/答えない は自分の好きなように選択する 全てのことに対して疑問を持つことが可能
ニラジ氏が言ってた「五感を磨く」って、「全てのことに対して疑問が持てるような感覚を磨く」ってことなのかなと少し思った
【参考】https://www.youtube.com/watch?v=18mwiVRIFBc</description></item><item><title>【Splunk Enterprise 1】Splunkの主要コンポーネント</title><link>https://dddsuz2.github.io/suzmemo/splunk-enterprise-1splunk%E3%81%AE%E4%B8%BB%E8%A6%81%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88/</link><pubDate>Mon, 10 Jul 2023 22:25:40 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/splunk-enterprise-1splunk%E3%81%AE%E4%B8%BB%E8%A6%81%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88/</guid><description> Instance
Splunk が起動しているサーバーのこと StandAlone: 単独サーバーのみで、input, parse, index, search を行う構成のこと Distributed: 複数のサーバーで、input, parse, index, search を行う構成のこと Forwader
データを Indexer または別の Forwarder に対して転送するコンポーネント Indexer
データをインデックス化し、raw data をイベントに変換する 検索リクエストに応じて、インデックス化されたデータを検索する Distributed なデプロイメントの場合 Search Head と呼ばれるコンポーネントが検索管理を行い、複数の Indexer 間で検索を調整する この場合、個々の Indexer は「検索ピア」と呼ばれる Index
Splunk によって検索可能な形式に変換された raw data のこと Deployment-Server
任意の数のインスタンスの設定をまとめて管理するインスタンス Deployment-Client
Deployment-Server によってリモートで設定を管理されるインスタンス</description></item></channel></rss>