<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>プログラミング on suzmemo</title><link>https://dddsuz2.github.io/suzmemo/tags/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/</link><description>Recent content in プログラミング on suzmemo</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Sat, 14 Oct 2023 14:26:47 +0900</lastBuildDate><atom:link href="https://dddsuz2.github.io/suzmemo/tags/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/index.xml" rel="self" type="application/rss+xml"/><item><title>【3】そもそもfor文って結構複雑だよね</title><link>https://dddsuz2.github.io/suzmemo/3%E3%81%9D%E3%82%82%E3%81%9D%E3%82%82for%E6%96%87%E3%81%A3%E3%81%A6%E7%B5%90%E6%A7%8B%E8%A4%87%E9%9B%91%E3%81%A0%E3%82%88%E3%81%AD/</link><pubDate>Sat, 14 Oct 2023 14:26:47 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/3%E3%81%9D%E3%82%82%E3%81%9D%E3%82%82for%E6%96%87%E3%81%A3%E3%81%A6%E7%B5%90%E6%A7%8B%E8%A4%87%E9%9B%91%E3%81%A0%E3%82%88%E3%81%AD/</guid><description>要点 for文って結構複雑 頭の中で処理を追いかけるのが面倒 チーム開発などで可読性を考えるなら、使わない or わかりやすい所で書くのが良い 関数の中でカプセル化すると良くない（誤ったカプセル化） 内容 for文の構文のめんどくささ 境界値 誤っていた時に、本当にレビューで指摘できるか？ 体調悪かったりしたら無理なこともある じゃあ使うなよと 添え字 indexで配列にアクセスすると、読みづらい 副作用 主たる作用以外の作用を副作用という ここでいう主たる作用とは、関数などの中で実現したい処理のこと どうしても避けられない場合以外は副作用は避けたい 考察・思ったこと リンク なぜ我々は頑なにfor文を避けるのか 【2】可読性が犠牲にならないように副作用を抑える for文をレビューで指摘された時に書いた</description></item><item><title>【2】可読性が犠牲にならないように副作用を抑える</title><link>https://dddsuz2.github.io/suzmemo/2%E5%8F%AF%E8%AA%AD%E6%80%A7%E3%81%8C%E7%8A%A0%E7%89%B2%E3%81%AB%E3%81%AA%E3%82%89%E3%81%AA%E3%81%84%E3%82%88%E3%81%86%E3%81%AB%E5%89%AF%E4%BD%9C%E7%94%A8%E3%82%92%E6%8A%91%E3%81%88%E3%82%8B/</link><pubDate>Sat, 14 Oct 2023 14:15:52 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/2%E5%8F%AF%E8%AA%AD%E6%80%A7%E3%81%8C%E7%8A%A0%E7%89%B2%E3%81%AB%E3%81%AA%E3%82%89%E3%81%AA%E3%81%84%E3%82%88%E3%81%86%E3%81%AB%E5%89%AF%E4%BD%9C%E7%94%A8%E3%82%92%E6%8A%91%E3%81%88%E3%82%8B/</guid><description>要点 関数の中で副作用が入るような書き方をしない この場合の副作用とは、データに破壊的変更が加わること 可読性が犠牲になってしまうため 内容 例えば、以下のようなデータクラスを考える
@dataclass class FileEntity: file_name_prefix: str file_name: list[str] file_path: list[str] このデータクラスのfile_nameに、何からの処理を加えてfile_pathを作る処理を考える
def create_file_name(file_name): for file in file_name: file_path.append(f&amp;#34;/tmp/{file_name}.gz&amp;#34;) この場合、create_file_nameの関数の中に、for文が入ってしまっている。
可読性が良くない 頭から処理を追いかけていくときに、関数の中でfor文を回すことで読みづらくなる 呼び出し側のmain関数の中でfor文を回した方が処理が追いやすい 考察・思ったこと リンク</description></item><item><title>【1】コードがわからない時の対処法</title><link>https://dddsuz2.github.io/suzmemo/1%E3%82%B3%E3%83%BC%E3%83%89%E3%81%8C%E3%82%8F%E3%81%8B%E3%82%89%E3%81%AA%E3%81%84%E6%99%82%E3%81%AE%E5%AF%BE%E5%87%A6%E6%B3%95/</link><pubDate>Thu, 17 Aug 2023 21:28:50 +0900</pubDate><guid>https://dddsuz2.github.io/suzmemo/1%E3%82%B3%E3%83%BC%E3%83%89%E3%81%8C%E3%82%8F%E3%81%8B%E3%82%89%E3%81%AA%E3%81%84%E6%99%82%E3%81%AE%E5%AF%BE%E5%87%A6%E6%B3%95/</guid><description> 仕事をしていて、わからないコードがあったときの対処法ができたのでメモ
初見のコードは一気に読んでも、まずわかることはない VSCodeを開いて、めちゃくちゃ小さい単位に分解して、それを実際のコードに近づけていく作業をすると理解できることがわかった 実験してみることが大事 これと本を読んで知識をつけることを並行すればよい そもそも小さい範囲に分解できない場合
そんな場合あるのか？ 専用の環境でしか動かないようなコードだと難しいのか そういう場合は、開発環境で実験する方法を有識者に聞く つまりDockerとかを利用してない環境はGarbage その場合はあきらめて寝る</description></item></channel></rss>